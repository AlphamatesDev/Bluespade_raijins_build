{"version":3,"file":"static/js/957.27cff3cb.chunk.js","mappings":"gMAgCA,EAxBqB,SAAHA,GAOX,IANLC,EAAQD,EAARC,SACAC,EAAIF,EAAJE,KAGAC,GAFOH,EAAPI,QACWJ,EAAXK,YACYL,EAAZG,cACAG,EAAON,EAAPM,QAEA,OACEC,EAAAA,EAAAA,MAACC,EAAAA,EAAK,CACJN,KAAMA,EACNO,QAASN,EACTO,QAAM,EACNC,WAAY,CAAEC,MAAM,iBAADC,OAAmBP,IAAYL,SAAA,EAElDa,EAAAA,EAAAA,KAAA,UAAQC,QAASZ,EAAca,UAAU,WAAUf,UAEjDa,EAAAA,EAAAA,KAACG,EAAAA,IAAc,MAEhBhB,IAGP,C,oeCoBA,EAhDyB,SAAHD,GAAiC,IAA3BkB,EAAIlB,EAAJkB,KAAMC,EAAanB,EAAbmB,cAChC,OACEZ,EAAAA,EAAAA,MAAA,OAAKS,UAAWI,IAAG,qBAAsB,QAAQnB,SAAA,EAC/CM,EAAAA,EAAAA,MAAA,MAAIS,UAAWI,IAAG,WAAY,QAAQnB,SAAA,CAAC,cAC3Ba,EAAAA,EAAAA,KAAA,QAAME,UAAWI,IAAG,UAAUnB,SAAEiB,EAAKG,YAEjDP,EAAAA,EAAAA,KAAA,OAAKE,UAAWI,IAAG,SAAU,iBAAkB,QAAQnB,SACpDiB,EAAKI,OAAOC,KAAI,SAACC,GAAK,OACrBV,EAAAA,EAAAA,KAAA,OACEW,IAAKD,EAELE,IAAKF,EACLG,MAAM,MACNX,UAAWI,IAAG,aACdL,QAAS,kBAAMI,EAAcK,EAAM,GAJ9BA,EAKL,OAGNjB,EAAAA,EAAAA,MAAA,OAAKS,UAAWI,IAAG,SAAU,cAAe,SAASnB,SAAA,EACnDM,EAAAA,EAAAA,MAAA,OAAKS,UAAWI,IAAG,iBAAiBnB,SAAA,CAAC,WAC1B,KACTM,EAAAA,EAAAA,MAAA,QAAMS,UAAWI,IAAG,UAAUnB,SAAA,CAC3BiB,EAAKU,KAAK,UAAsB,IAAdV,EAAKU,KAAa,GAAK,WAG9CrB,EAAAA,EAAAA,MAAA,OAAKS,UAAWI,IAAG,iBAAiBnB,SAAA,CAAC,YACzB,KACVM,EAAAA,EAAAA,MAAA,QAAMS,UAAWI,IAAG,UAAUnB,SAAA,CAC3BiB,EAAKW,MAAM,UAAuB,IAAfX,EAAKW,MAAc,GAAK,WAGhDtB,EAAAA,EAAAA,MAAA,OAAKS,UAAWI,IAAG,iBAAiBnB,SAAA,CAAC,YACzB,KACVM,EAAAA,EAAAA,MAAA,QAAMS,UAAWI,IAAG,UAAUnB,SAAA,CAC3BiB,EAAKY,MAAM,UAAuB,IAAfZ,EAAKY,MAAc,GAAK,WAGhDvB,EAAAA,EAAAA,MAAA,OAAKS,UAAWI,IAAG,iBAAiBnB,SAAA,CAAC,YACzB,KACVM,EAAAA,EAAAA,MAAA,QAAMS,UAAWI,IAAG,UAAUnB,SAAA,CAC3BiB,EAAKa,MAAM,UAAwB,IAAhBb,EAAKc,OAAe,GAAK,eAMzD,ECDMC,EAAY,CAChB,CACEZ,MAAO,UACPa,KAAM,UACNZ,OAAQ,CACNa,EACAC,EACAC,EACAC,EACAC,EACAC,GAEFZ,KAAM,EACNC,MAAO,GACPC,MAAO,GACPC,MAAO,GACPU,OAAQ,KAwHZ,EAlHsB,SAAHzC,GAAsB,IAAhB0C,EAAQ1C,EAAR0C,SACvBC,GAAwCC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAhDI,EAAYF,EAAA,GAAEG,EAAeH,EAAA,GACpCI,GAAgCL,EAAAA,EAAAA,UAAS,MAAKM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAvCE,EAAQD,EAAA,GAAEE,EAAWF,EAAA,GAEtB/B,EAAgB,SAACK,GAIvB,EAOA,OACEjB,EAAAA,EAAAA,MAAA,OAAKS,UAAWI,IAAG,kBAAkBnB,SAAA,EACnCa,EAAAA,EAAAA,KAACuC,EAAAA,EAAY,CAAC/C,QAAQ,OAAML,UAG1Ba,EAAAA,EAAAA,KAAA,QAAAb,SAAM,gCAEPyC,EACCT,EAAUV,KAAI,SAAC+B,GAAK,OAClBxC,EAAAA,EAAAA,KAACyC,EAAgB,CAEfrC,KAAMoC,EACNnC,cAAeA,GAFVmC,EAAMpB,KAGX,KAGJ3B,EAAAA,EAAAA,MAAA,SAAOS,UAAWI,IAAG,wBAAwBnB,SAAA,EAC3CM,EAAAA,EAAAA,MAAA,SAAAN,SAAA,EACEM,EAAAA,EAAAA,MAAA,MAAAN,SAAA,EACEa,EAAAA,EAAAA,KAAA,MAAI0C,QAAS,EAAEvD,SAAC,OAChBa,EAAAA,EAAAA,KAAA,MAAI0C,QAAS,EAAGxC,UAAWI,IAAG,cAAcnB,SAAC,iBAW/CM,EAAAA,EAAAA,MAAA,MAAAN,SAAA,EACEa,EAAAA,EAAAA,KAAA,MAAAb,SAAI,aACJa,EAAAA,EAAAA,KAAA,MAAAb,SAAI,cACJa,EAAAA,EAAAA,KAAA,MAAAb,SAAI,cACJa,EAAAA,EAAAA,KAAA,MAAAb,SAAI,oBAGRa,EAAAA,EAAAA,KAAA,SAAAb,SACGgC,EAAUV,KAAI,SAACkC,GACd,OACElD,EAAAA,EAAAA,MAAA,MAAAN,SAAA,EACEa,EAAAA,EAAAA,KAAA,MAAIE,UAAWI,IAAG,uBAAuBnB,SAAEwD,EAAIpC,SAC/CP,EAAAA,EAAAA,KAAA,MAAIE,UAAWI,IAAG,SAAU,kBAAmB,cAAcnB,SAC1DwD,EAAInC,OAAOC,KAAI,SAACC,EAAOkC,GACtB,OACE5C,EAAAA,EAAAA,KAAA,OACEW,IAAKD,EACLE,IAAG,SAAAb,OAAW4C,EAAIvB,MAAIrB,OAAG6C,EAAG,QAE5B3C,QAAS,WAA0B,EACnCC,UAAWI,IAAG,cAFTsC,EAKX,OAEFnD,EAAAA,EAAAA,MAAA,MAAAN,SAAA,CACGwD,EAAI7B,MACLd,EAAAA,EAAAA,KAAA,SAAM,SACc,IAAb2C,EAAI7B,KAAa,GAAK,QAE/BrB,EAAAA,EAAAA,MAAA,MAAAN,SAAA,CACGwD,EAAI5B,OACLf,EAAAA,EAAAA,KAAA,SAAM,SACe,IAAd2C,EAAI5B,MAAc,GAAK,QAEhCtB,EAAAA,EAAAA,MAAA,MAAAN,SAAA,CACGwD,EAAI3B,OACLhB,EAAAA,EAAAA,KAAA,SAAM,SACe,IAAd2C,EAAI3B,MAAc,GAAK,QAEhCvB,EAAAA,EAAAA,MAAA,MAAAN,SAAA,CACGwD,EAAI1B,OACLjB,EAAAA,EAAAA,KAAA,SAAM,SACe,IAAd2C,EAAI1B,MAAc,GAAK,SAjCzB0B,EAAIvB,KA0CjB,UAKNpB,EAAAA,EAAAA,KAAC6C,EAAAA,EAAY,CACXzD,KAAM6C,EACN5C,aA/Fe,WACnBiD,EAAY,MACZJ,GAAgB,EAClB,EA6FM1C,QAAO,OAAAO,OAAS6B,EAAW,OAAS,QAASzC,UAE7Ca,EAAAA,EAAAA,KAAA,OAAKW,IAAK0B,EAAUxB,MAAM,aAIlC,E,8BChJA,EA7Ba,SAACiC,GACZ,IAAQC,EAAkBD,EAAlBC,cAER,OACE/C,EAAAA,EAAAA,KAAA,OAAKE,UAAWI,IAAG,gBAAgBnB,UACjCM,EAAAA,EAAAA,MAAA,OAAKS,UAAWI,IAAG,cAAcnB,SAAA,EAC/BM,EAAAA,EAAAA,MAACuD,EAAAA,EAAS,CAAA7D,SAAA,CAAC,wBACWa,EAAAA,EAAAA,KAAA,QAAAb,SAAM,eAE5Ba,EAAAA,EAAAA,KAACiD,EAAAA,EAAW,CAAA9D,SAAC,6DAGba,EAAAA,EAAAA,KAACiD,EAAAA,EAAW,CAAA9D,SAAC,uCACba,EAAAA,EAAAA,KAACkD,EAAAA,EAAW,CACVC,QAAQ,UACRC,KAAK,iBACLC,WAAYN,QAWtB,E,m1QCeA,EAhD2B,SAAH7D,GAOjB,IANLoE,EAAGpE,EAAHoE,IACAC,EAAYrE,EAAZqE,aACAC,EAAetE,EAAfsE,gBACAC,EAAKvE,EAALuE,MACAC,EAAoBxE,EAApBwE,qBACAC,EAAuBzE,EAAvByE,wBAEA,OACElE,EAAAA,EAAAA,MAAA,OAAKS,UAAWI,IAAG,wBAAwBnB,SAAA,EACzCa,EAAAA,EAAAA,KAAA,OAAKE,UAAWI,IAAG,iBAAiBnB,UAClCa,EAAAA,EAAAA,KAAA,OAAKW,IAAK2C,EAAI5C,MAAOE,IAAG,GAAAb,OAAKuD,EAAI5C,OAASG,MAAM,YAElDpB,EAAAA,EAAAA,MAAA,OAAAN,SAAA,EACEM,EAAAA,EAAAA,MAAA,KAAGS,UAAWI,IAAG,iBAAkB,YAAa,QAAQnB,SAAA,CAAC,WAChDa,EAAAA,EAAAA,KAAA,UACPP,EAAAA,EAAAA,MAAA,QAAMS,UAAWI,IAAG,eAAgB,UAAUnB,SAAA,CAC3CmE,EAAIM,KAAK,KAAGN,EAAIO,UAGrBpE,EAAAA,EAAAA,MAAA,KAAGS,UAAWI,IAAG,iBAAkB,YAAa,QAAQnB,SAAA,CAAC,kBACvC,KAChBM,EAAAA,EAAAA,MAAA,QAAMS,UAAWI,IAAG,eAAgB,UAAUnB,SAAA,CAC3CoE,EAAaC,GAAiBM,OAAO,UAChC,QAEVrE,EAAAA,EAAAA,MAAA,KAAGS,UAAWI,IAAG,iBAAkB,YAAa,QAAQnB,SAAA,CAAC,qBAEvDa,EAAAA,EAAAA,KAAA,SAAO,KACPP,EAAAA,EAAAA,MAAA,QAAMS,UAAWI,IAAG,eAAgB,UAAUnB,SAAA,CAC3CmE,EAAIS,QAAQ,6BAInBtE,EAAAA,EAAAA,MAAA,OAAKS,UAAU,mBAAkBf,SAAA,EAC/Ba,EAAAA,EAAAA,KAAA,SACEoB,KAAK,WACLyC,GAAE,mBAAA9D,OAAqB0D,GACvBO,SAAyC,IAAhCN,EAAqBD,GAC9BQ,SAAU,kBAAMN,EAAwBF,EAAM,EAC9CS,MAAOR,EAAqBD,MAE9BzD,EAAAA,EAAAA,KAAA,SAAOmE,QAAO,mBAAApE,OAAqB0D,UAI3C,ECmBA,EA/D0B,SAAHvE,GAMhB,IALLoE,EAAGpE,EAAHoE,IACAc,EAAkBlF,EAAlBkF,mBACAX,EAAKvE,EAALuE,MACAY,EAAqBnF,EAArBmF,sBACAd,EAAYrE,EAAZqE,aAEA,OACE9D,EAAAA,EAAAA,MAAA,OAAKS,UAAWI,IAAG,uBAAuBnB,SAAA,EACxCa,EAAAA,EAAAA,KAAA,OAAKE,UAAWI,IAAG,iBAAiBnB,UAClCa,EAAAA,EAAAA,KAAA,OAAKW,IAAK2C,EAAI5C,MAAOE,IAAG,GAAAb,OAAKuD,EAAI5C,OAASG,MAAM,YAElDpB,EAAAA,EAAAA,MAAA,OAAAN,SAAA,EACEM,EAAAA,EAAAA,MAAA,KAAGS,UAAWI,IAAG,iBAAkB,YAAa,QAAQnB,SAAA,CAAC,WAChDa,EAAAA,EAAAA,KAAA,UACPP,EAAAA,EAAAA,MAAA,QAAMS,UAAWI,IAAG,eAAgB,UAAUnB,SAAA,CAC3CmE,EAAIM,KAAK,KAAGN,EAAIO,UAGrBpE,EAAAA,EAAAA,MAAA,KAAGS,UAAWI,IAAG,iBAAkB,YAAa,QAAQnB,SAAA,CAAC,gBACzC,KACda,EAAAA,EAAAA,KAAA,UAAQE,UAAWI,IAAG,oBAAoBnB,UACxCa,EAAAA,EAAAA,KAAA,OACEW,KAAyB,IAApB2C,EAAIgB,YAAuBC,EAAmBC,EACnD5D,IAAI,YACJC,MAAM,eAIZpB,EAAAA,EAAAA,MAAA,KAAGS,UAAWI,IAAG,iBAAkB,YAAa,QAAQnB,SAAA,CAAC,oBACrC,KAClBM,EAAAA,EAAAA,MAAA,QAAMS,UAAWI,IAAG,eAAgB,UAAUnB,SAAA,CAC3CmE,EAAImB,SAAS,cACdzE,EAAAA,EAAAA,KAAA,SAAM,IAAEuD,EAAaD,EAAIoB,UAAUZ,OAAO,0BAG9CrE,EAAAA,EAAAA,MAAA,KAAGS,UAAWI,IAAG,iBAAkB,YAAa,QAAQnB,SAAA,CAAC,eAC1C,KACbM,EAAAA,EAAAA,MAAA,QAAMS,UAAWI,IAAG,eAAgB,UAAUnB,SAAA,CAC3CmE,EAAIqB,WAAW,0BAGpBlF,EAAAA,EAAAA,MAAA,KAAGS,UAAWI,IAAG,iBAAkB,YAAa,QAAQnB,SAAA,CAAC,oBACrC,KAClBM,EAAAA,EAAAA,MAAA,QAAMS,UAAWI,IAAG,eAAgB,UAAUnB,SAAA,CAC3CmE,EAAIsB,gBAAgB,6BAI3BnF,EAAAA,EAAAA,MAAA,OAAKS,UAAU,mBAAkBf,SAAA,EAC/Ba,EAAAA,EAAAA,KAAA,SACEoB,KAAK,WACLyC,GAAE,mBAAA9D,OAAqB0D,GACvBO,SAAuC,IAA9BI,EAAmBX,GAC5BQ,SAAU,kBAAMI,EAAsBZ,EAAM,EAC5CS,MAAOE,EAAmBX,MAE5BzD,EAAAA,EAAAA,KAAA,SAAOmE,QAAO,mBAAApE,OAAqB0D,UAI3C,E,UCtCMF,EAAe,CACnB,CACEhD,MAAO,QACPsD,GAAI,QACJC,OAAQ,GAEV,CACEvD,MAAO,SACPsD,GAAI,SACJC,OAAQ,IAEV,CACEvD,MAAO,SACPsD,GAAI,QACJC,OAAQ,IAEV,CACEvD,MAAO,SACPsD,GAAI,SACJC,OAAQ,KA2HRe,EAAqB,GACrBC,EAAqB,GA4uBzB,EA1uBuB,SAAH5F,GAAsB,IAAhB0C,EAAQ1C,EAAR0C,SACxBmD,GAAqCC,EAAAA,EAAAA,MAA7BC,EAAMF,EAANE,OAAQC,EAAOH,EAAPG,QAASC,EAAOJ,EAAPI,QAEzBtD,GAA8CC,EAAAA,EAAAA,UAAS,GAAEC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAlD2B,EAAezB,EAAA,GAAEqD,EAAkBrD,EAAA,GAC1CI,GAAgDL,EAAAA,EAAAA,WAAS,GAAKM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAvDkD,EAAgBjD,EAAA,GAAEkD,EAAmBlD,EAAA,GAC5CmD,GAAoDzD,EAAAA,EAAAA,WAAS,GAAK0D,GAAAxD,EAAAA,EAAAA,GAAAuD,EAAA,GAA3DE,EAAkBD,EAAA,GAAEE,EAAqBF,EAAA,GAGhDG,GAAwD7D,EAAAA,EAAAA,UAAS,IAAG8D,GAAA5D,EAAAA,EAAAA,GAAA2D,EAAA,GAA7DjC,EAAoBkC,EAAA,GAAEC,EAAuBD,EAAA,GACpDE,GAAoDhE,EAAAA,EAAAA,UAAS,IAAGiE,GAAA/D,EAAAA,EAAAA,GAAA8D,EAAA,GAAzD1B,EAAkB2B,EAAA,GAAEC,EAAqBD,EAAA,GAChDE,GAAsCnE,EAAAA,EAAAA,WAAS,GAAMoE,GAAAlE,EAAAA,EAAAA,GAAAiE,EAAA,GAA9CE,GAAWD,EAAA,GAAEE,GAAcF,EAAA,GAClCG,IAAwDvE,EAAAA,EAAAA,WAAS,GAAMwE,IAAAtE,EAAAA,EAAAA,GAAAqE,GAAA,GAAhEE,GAAoBD,GAAA,GAAEE,GAAuBF,GAAA,GACpDG,IAAwC3E,EAAAA,EAAAA,WAAS,GAAM4E,IAAA1E,EAAAA,EAAAA,GAAAyE,GAAA,GAAhDE,GAAYD,GAAA,GAAEE,GAAeF,GAAA,GACpCG,IAAyD/E,EAAAA,EAAAA,UAASgF,EAAAA,GAAmB,IAA9EC,IAAiF/E,EAAAA,EAAAA,GAAA6E,GAAA,GAA/D,GAIjBG,IAAYC,EAAAA,EAAAA,KAAZD,QACFE,IAAwBC,EAAAA,EAAAA,GAAYH,GAAS,kBAM7CI,GAAeC,EAAAA,GAAa5G,KAAI,SAAC6G,GAAI,OAAKA,EAAKC,OAAO,IAE9CC,IAAeC,EAAAA,EAAAA,IAC3BxC,GACAiC,IAAyB,CACvBjC,EACA+B,GACAE,GACA,oBACAE,GACAjC,GAEF,CAAEuC,SAASC,EAAAA,EAAAA,IAAgBzC,EAAS0C,KAV9BxH,KAaJyH,GA3JiB,SAACL,EAAY9C,GAClC,YAAmBoD,IAAfN,GAEsB,IAAtBA,EAAWO,OAFsB,GAIzBP,EAAW/G,KAAI,SAAC6G,GAG1B,IAFA,IAAI7D,GAAS,EAEJuE,EAAI,EAAGA,EAAIX,EAAAA,GAAaU,OAAQC,IACvC,GACEX,EAAAA,GAAaW,GAAGT,QAAQU,gBAAkBX,EAAKY,cAAcD,cAC7D,CACAxE,EAAQuE,EACR,KACF,CAGF,IAAe,IAAXvE,EAAc,OAAO,KAEzB,IAAM0E,EAAUd,EAAAA,GAAa5D,GACzB2E,EAAW,GAEbA,EADmB,2BAAjBD,EAAQvE,KACF,GAAA7D,OAAMoI,EAAQE,WAAStI,OAAGuI,EAAAA,GAAiBC,OAAOjB,EAAKkB,SAASC,YAAc,GAAE,KAAA1I,OAClFoI,EAAQO,WAEN,GAAA3I,OAAMoI,EAAQE,WAAStI,OAAGwI,OAAOjB,EAAKkB,SAASC,YAAW,KAAA1I,OAAIoI,EAAQO,WAGhF,IAAMC,GAAmBR,EAAQZ,QAASD,EAAKkB,SAASC,WA/BnD,GAgCC1E,EAAU6E,EAAAA,GAAeD,GAAQjE,GACvC,MAAO,CACLb,GAAIyD,EAAKkB,SAASC,WAClB7E,KAAM0D,EAAK1D,KACX2D,QAASY,EAAQZ,QACjB7G,MAAO0H,EACPrE,QAASA,EAEb,IAEuB8E,QAAO,SAACvB,GAAI,OAAc,OAATA,CAAa,GAEvD,CAkHqBwB,CADQtB,GAAaA,GAAWqB,QAAO,SAACvB,GAAI,OAAKA,EAAKY,cAAcD,gBAAkBlB,GAAmBQ,QAAQU,aAAa,IAAI,GAC/FzE,GAExCuF,IAAiBtB,EAAAA,EAAAA,IAC7BxC,GACAiC,IAAyB,CACvBjC,EACA+B,GACAE,GACA,iBACAE,GACAjC,GAEF,CAAEuC,SAASC,EAAAA,EAAAA,IAAgBzC,EAAS0C,KAV9BxH,KAaF4I,GA/He,SAACD,GACtB,YAAqBjB,IAAjBiB,GAEwB,IAAxBA,EAAahB,OAFsB,GAI3BgB,EAAatI,KAAI,SAAC6G,GAG5B,IAFA,IAAI7D,GAAS,EAEJuE,EAAI,EAAGA,EAAIX,EAAAA,GAAaU,OAAQC,IACvC,GAAIX,EAAAA,GAAaW,GAAGT,QAAQU,gBAAkBX,EAAK,GAAGW,cAAe,CACnExE,EAAQuE,EACR,KACF,CAGF,IAAe,IAAXvE,EAAc,OAAO,KAEzB,IAAM0E,EAAUd,EAAAA,GAAa5D,GACvBwF,EAAUC,SAAS5B,EAAK,GAAGmB,YAC3B/D,EAAWwE,SAAS5B,EAAK,GAAGmB,YAC5BU,EAAYD,SAAS5B,EAAK,GAAGmB,YAC7BnE,EAAcgD,EAAK,GACnB8B,EAAY9B,EAAK,GACjB+B,EAAgBH,UAASI,EAAAA,EAAAA,IAAahC,EAAK,GAAI,GAAI,IAEnDqB,GAAmBR,EAAQZ,QAvE5B,GAwECgC,EAAUJ,EAA4C,GAAhC5F,EAAamB,GAAUZ,OAAc,KAC3D0F,GAAc,IAAIC,MAAOC,UAAY,IACvCjF,EAAW,EACXE,EAAa,EAEZL,GASHG,EACmC,GAAhClB,EAAamB,GAAUZ,OAAc,MAAU0F,EAAcL,IAA8C,GAAhC5F,EAAamB,GAAUZ,OAAc,MACnHa,EAAaiE,EAAAA,GAAeD,GAAQjE,IAVhC0E,GAAaI,EAAcD,GAC7B9E,EAAW,EACXE,EAAa,IAEbF,EAAW8E,EAAUC,EACrB7E,EAAaiE,EAAAA,GAAeD,GAAQjE,IAQxC,IAAI0D,EAAW,GAQf,OANEA,EADmB,2BAAjBD,EAAQvE,KACF,GAAA7D,OAAMoI,EAAQE,WAAStI,OAAGuI,EAAAA,GAAiBC,OAAOjB,EAAK,GAAGmB,YAAc,GAAE,KAAA1I,OAC5EoI,EAAQO,WAEN,GAAA3I,OAAMoI,EAAQE,WAAStI,OAAGwI,OAAOjB,EAAK,GAAGmB,YAAW,KAAA1I,OAAIoI,EAAQO,WAGnE,CACL9E,KAAMuE,EAAQvE,KACdlD,MAAO0H,EACPb,QAASY,EAAQZ,QACjB1D,GAAIoF,EACJvE,SAAUA,EACVD,SAAUyE,SAASzE,EAAQ,OAAkB,EAC7CH,YAAaA,EACbK,WAAYA,EACZC,gBAAiByE,EAErB,IAEuBR,QAAO,SAACvB,GAAI,OAAc,OAATA,CAAa,GAEvD,CA2DqBqC,CADUZ,GAAeA,GAAaF,QAAO,SAACvB,GAAI,OAAKA,EAAKsC,SAAS3B,gBAAkBlB,GAAmBQ,QAAQU,aAAa,IAAI,IAIxI4B,IAAwBpC,EAAAA,EAAAA,IACpCxC,GACAiC,IAAyB,CACvBjC,EACA+B,GACAE,GACA,oBACAE,GACAjC,GAEF,CAAEuC,SAASC,EAAAA,EAAAA,IAAgBzC,EAAS0C,KAV9BxH,KAaJ0J,IAAe,EACnB,GAAID,GAAqB,CACvB,IAAME,GAA8BF,GAAsBA,GAAoBhB,QAAO,SAACvB,GAAI,OAAKA,EAAKY,cAAcD,gBAAkBlB,GAAmBQ,QAAQU,aAAa,IAAI,GAChL6B,IAAgBC,GAA4B,GAAGC,UACjD,CAEA,IAAAC,IAAgDnI,EAAAA,EAAAA,WAAUgI,IAAaI,IAAAlI,EAAAA,EAAAA,GAAAiI,GAAA,GAAhEE,GAAgBD,GAAA,GAAEE,GAAmBF,GAAA,GAGtCvG,GAA0B,SAACF,GAC/B,IAAM4G,EAAWxC,GAAapE,GAExB6G,EAAezF,EAAmB0F,MACtC,SAACjD,GAAI,OACHA,EAAKzD,KAAOwG,EAASxG,IACrByD,EAAKC,UAAY8C,EAAS9C,QAAQU,aAAa,SAE9BH,IAAjBwC,EACFzF,EAAmB2F,KAAK,CACtB3G,GAAIwG,EAASxG,GACb0D,QAAS8C,EAAS9C,QAAQU,gBAG5BpD,EAAqBA,EAAmBgE,QACtC,SAACvB,GAAI,OAAKA,IAASgD,CAAY,IAInC,IADA,IAAIG,EAAQ,GAAGC,EAAA,WAEb,IAAML,EAAWxC,GAAaG,QAMVF,IALAjD,EAAmB0F,MACrC,SAACjD,GAAI,OACHA,EAAKzD,KAAOwG,EAASxG,IACrByD,EAAKC,UAAY8C,EAAS9C,QAAQU,aAAa,IAEpBwC,EAAMD,MAAK,GACrCC,EAAMD,MAAK,EAClB,EATSxC,EAAI,EAAGA,EAAIH,GAAaE,OAAQC,IAAG0C,IAU5C7E,EAAwB4E,GAEU,IAA9B5F,EAAmBkD,QAAiB+B,GAEnCM,IAAoB,GADvBA,IAAoB,EAExB,EAEM/F,GAAwB,SAACZ,GAC7B,IAAM4G,EAAWrB,GAAWvF,GAEtB6G,EAAexF,EAAmByF,MACtC,SAACjD,GAAI,OACHA,EAAKzD,KAAOwG,EAASxG,IACrByD,EAAKC,UAAY8C,EAAS9C,QAAQU,aAAa,SAE9BH,IAAjBwC,EACFxF,EAAmB0F,KAAK,CACtB3G,GAAIwG,EAASxG,GACb0D,QAAS8C,EAAS9C,QAAQU,gBAG5BnD,EAAqBA,EAAmB+D,QACtC,SAACvB,GAAI,OAAKA,IAASgD,CAAY,IAInC,IADA,IAAIG,EAAQ,GAAGE,EAAA,WAEb,IAAMN,EAAWrB,GAAWhB,QAMRF,IALAhD,EAAmByF,MACrC,SAACjD,GAAI,OACHA,EAAKzD,KAAOwG,EAASxG,IACrByD,EAAKC,UAAY8C,EAAS9C,QAAQU,aAAa,IAEpBwC,EAAMD,MAAK,GACrCC,EAAMD,MAAK,EAClB,EATSxC,EAAI,EAAGA,EAAIgB,GAAWjB,OAAQC,IAAG2C,IAU1C3E,EAAsByE,GAEY,IAA9B3F,EAAmBiD,QACrBzC,GAAoB,GACpBI,GAAsB,KAItBJ,GAAoB,GACpBI,GAAsB,GAI1B,EAkBMkF,GAA4B,WAEhC/F,EAAqB,GACrBgB,EAFY,IAGZuE,IAAoB,EACtB,EAqBMS,GAA0B,WAE9B/F,EAAqB,GACrBkB,EAFY,IAIZV,GAAoB,GACpBI,GAAsB,EAGxB,EA+OA,OATAoF,EAAAA,EAAAA,YAAU,WACJhB,IAActD,IAAwB,EAC5C,GAAG,CAACsD,GAAc7E,KAElB6F,EAAAA,EAAAA,YAAU,WACRF,KACAC,IACF,GAAG,CAAC9D,MAGFtH,EAAAA,EAAAA,MAAA,OAAKS,UAAWI,IAAG,mBAAmBnB,SAAA,EACpCM,EAAAA,EAAAA,MAAC8C,EAAAA,EAAY,CAAC/C,QAAQ,OAAML,SAAA,CAAC,wBACPa,EAAAA,EAAAA,KAAA,QAAAb,SAAM,eAG5BM,EAAAA,EAAAA,MAACsL,EAAAA,GAAI,CAAC7K,UAAWI,IAAG,wBAAwBnB,SAAA,EAC1CM,EAAAA,EAAAA,MAACuL,EAAAA,GAAO,CAAA7L,SAAA,EACNa,EAAAA,EAAAA,KAACiL,EAAAA,GAAG,CAAA9L,UAEFM,EAAAA,EAAAA,MAAA,KAAAN,SAAA,EACEa,EAAAA,EAAAA,KAAA,QAAAb,SAAO0I,GAAeA,GAAaE,OAAS,IAAS,mBAGzD/H,EAAAA,EAAAA,KAACiL,EAAAA,GAAG,CAAA9L,UAEFM,EAAAA,EAAAA,MAAA,KAAAN,SAAA,EACEa,EAAAA,EAAAA,KAAA,QAAAb,SAAO6J,GAAaA,GAAWjB,OAAS,IAAS,mBAKvDtI,EAAAA,EAAAA,MAACyL,EAAAA,GAAQ,CAAA/L,SAAA,CACNyC,GACC5B,EAAAA,EAAAA,KAAA,OAAKE,UAAWI,IAAG,gBAAiB,QAAQnB,SACzC0I,IAAgBA,GAAaE,OAC5BF,GAAapH,KAAI,SAAC6G,EAAM7D,GACtB,OACEzD,EAAAA,EAAAA,KAACmL,EAAkB,CACjB7H,IAAKgE,EAEL/D,aAAcA,EACdC,gBAAiBA,EACjBC,MAAOA,EACPC,qBAAsBA,EACtBC,wBAAyBA,IALpBF,EAQX,KAEAzD,EAAAA,EAAAA,KAAA,OAAKE,UAAWI,IAAG,MAAO,cAAe,eAAenB,SAAC,yBAM7Da,EAAAA,EAAAA,KAAA,OAAKE,UAAWI,IAAG,gBAAiB,QAAQnB,UAC1CM,EAAAA,EAAAA,MAAA,SAAAN,SAAA,EACEa,EAAAA,EAAAA,KAAA,SAAAb,UACEM,EAAAA,EAAAA,MAAA,MAAIiD,QAASmF,GAAeA,GAAaE,OAAS,EAAI,EAAE5I,SAAA,EACtDa,EAAAA,EAAAA,KAAA,MAAAb,SAAI,gBACJa,EAAAA,EAAAA,KAAA,MAAAb,SAAI,WACJa,EAAAA,EAAAA,KAAA,MAAAb,SAAI,cAEJa,EAAAA,EAAAA,KAAA,MAAAb,SAAI,oBACJa,EAAAA,EAAAA,KAAA,MAAAb,SAAI,2BAGRa,EAAAA,EAAAA,KAAA,SAAAb,SACG0I,IAAgBA,GAAaE,OAC5BF,GAAapH,KAAI,SAAC6G,EAAM7D,GACtB,OACEhE,EAAAA,EAAAA,MAAA,MAAAN,SAAA,EACEa,EAAAA,EAAAA,KAAA,MAAIE,UAAU,aAAYf,UACxBa,EAAAA,EAAAA,KAAA,OAAKW,IAAK2G,EAAK5G,MAAOE,IAAG,GAAAb,OAAKuH,EAAK5G,YAErCjB,EAAAA,EAAAA,MAAA,MAAIS,UAAU,OAAMf,SAAA,CACjBmI,EAAK1D,KAAK,KAAG0D,EAAKzD,OAErB7D,EAAAA,EAAAA,KAAA,MAAAb,UACEM,EAAAA,EAAAA,MAAA,OAAKS,UAAU,mBAAkBf,SAAA,EAC/Ba,EAAAA,EAAAA,KAAA,SACEoB,KAAK,WACLyC,GAAE,mBAAA9D,OAAqB0D,GACvBO,SAAyC,IAAhCN,EAAqBD,GAC9BQ,SAAU,kBAAMN,GAAwBF,EAAM,EAC9CS,MAAOR,EAAqBD,MAE9BzD,EAAAA,EAAAA,KAAA,SAAOmE,QAAO,mBAAApE,OAAqB0D,WAUvChE,EAAAA,EAAAA,MAAA,MAAIS,UAAU,OAAMf,SAAA,EAClBa,EAAAA,EAAAA,KAAA,QAAME,UAAU,eAAcf,SAC3BoE,EAAaC,GAAiBM,SACzB,IAAI,UAGdrE,EAAAA,EAAAA,MAAA,MAAAN,SAAA,EACEa,EAAAA,EAAAA,KAAA,QAAME,UAAU,eAAcf,SAAEmI,EAAKvD,UAAgB,IAAI,uBAjCpDuD,EAAKzD,GAsClB,KAEA7D,EAAAA,EAAAA,KAAA,MAAAb,UACEa,EAAAA,EAAAA,KAAA,MACEoL,QAAS,EACTlL,UAAWI,IAAG,cAAe,cAAe,OAAOnB,SACpD,gCASbM,EAAAA,EAAAA,MAAA,OAAKS,UAAU,YAAWf,SAAA,EACxBa,EAAAA,EAAAA,KAAA,UACEE,UAAWI,IAAG,kBACdL,QAxZoB,WAC9B,IAAIwK,EAAQ,GACZ5F,EAAqB,GACrB,IAAK,IAAImD,EAAI,EAAGA,EAAIH,GAAaE,OAAQC,IAAK,CAC5C,IAAMqC,EAAWxC,GAAaG,GAC9BnD,EAAmB2F,KAAK,CACtB3G,GAAIwG,EAASxG,GACb0D,QAAS8C,EAAS9C,QAAQU,gBAE5BwC,EAAMD,MAAK,EACb,CACA3E,EAAwB4E,GAExBL,IAAoB,EACtB,EA0Y6CjL,SAClC,gBAGDa,EAAAA,EAAAA,KAACkD,EAAAA,EAAW,CAEVE,KAtSN0G,IAAgBvD,GACX,0BAELJ,GACK,YAEL2D,GACK,UAGLnD,GACK,aAGF,QAyRGxD,QAAQ,UACRkI,SAAUlB,GACV9G,WAvVQ,WAClB,GAAIyG,GAjBAA,KACFwB,EAAAA,EAAAA,GAAW,CACTlF,eAAAA,GACAlB,QAAAA,EACAqG,aAAcxE,GAAmBQ,QACjCiE,QAAStE,GACTF,QAASA,GACTyE,mBAAoB,WAClBjF,IAAwB,EAC1B,QAQJ,CAKAI,IAAgB,GAEhB,IAAM8E,EAAa7G,EAAmBpE,KAAI,SAAC6G,GACzC,OAAOA,EAAKC,OACd,IAEM0B,EAAUpE,EAAmBpE,KAAI,SAAC6G,GACtC,OAAOA,EAAKzD,EACd,IAEMa,EAAWuE,EAAQxI,KAAI,SAAC6G,GAC5B,OAAO9D,CACT,IAEMmI,EAAW,IAAIC,EAAAA,GACnB1E,GACAU,EACA1C,EAAQ2G,cAEVC,EAAAA,EAAAA,IAAa9E,GAAS2E,EAAU,QAAS,CAACD,EAAYzC,EAASvE,GAAW,CACxEqH,QAAS,iCACTC,QAAS,gCAGRC,KAAI,eAAAC,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAC,SAAAC,EAAOC,GAAG,OAAAH,EAAAA,EAAAA,KAAAI,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,wBAAAF,EAAAG,OAAA,GAAAN,EAAA,KAIf,gBAAAO,GAAA,OAAAX,EAAAY,MAAA,KAAAC,UAAA,EAJI,IAKJC,SAAQ,WAIPpG,IAAgB,EAClB,IAEFgE,IAtCA,CAuCF,GAwSgB,SAMLrH,EAAa9C,KAAI,SAACwM,EAAKxJ,GAAK,OAC3BzD,EAAAA,EAAAA,KAACkD,EAAAA,EAAW,CAEVE,KAAM6J,EAAI1M,MACV4C,QAASK,IAAoBC,EAAQ,SAAW,cAChDJ,WAAY,kBAnXH,SAACI,GACtB2B,EAAmB3B,EACrB,CAiXgCyJ,CAAezJ,EAAM,GAHlCwJ,EAAIpJ,GAIT,WAIRpE,EAAAA,EAAAA,MAACyL,EAAAA,GAAQ,CAAA/L,SAAA,CACNyC,GACC5B,EAAAA,EAAAA,KAAA,OAAKE,UAAWI,IAAG,gBAAiB,QAAQnB,SACzC6J,IAAcA,GAAWjB,OACxBiB,GAAWvI,KAAI,SAAC6G,EAAM7D,GACpB,OACEzD,EAAAA,EAAAA,KAACmN,EAAiB,CAChB7J,IAAKgE,EACL7D,MAAOA,EACPW,mBAAoBA,EACpBC,sBAAuBA,GACvBd,aAAcA,GAGpB,KAEAvD,EAAAA,EAAAA,KAAA,OAAKE,UAAWI,IAAG,MAAO,cAAe,eAAenB,SAAC,yBAM7Da,EAAAA,EAAAA,KAAA,OAAKE,UAAWI,IAAG,gBAAiB,QAAQnB,UAC1CM,EAAAA,EAAAA,MAAA,SAAAN,SAAA,EACEa,EAAAA,EAAAA,KAAA,SAAAb,UACEM,EAAAA,EAAAA,MAAA,MAAIiD,QAASsG,GAAaA,GAAWjB,OAAS,EAAI,EAAE5I,SAAA,EAClDa,EAAAA,EAAAA,KAAA,MAAAb,SAAI,gBACJa,EAAAA,EAAAA,KAAA,MAAAb,SAAI,WACJa,EAAAA,EAAAA,KAAA,MAAAb,SAAI,cACJa,EAAAA,EAAAA,KAAA,MAAAb,SAAI,kBACJa,EAAAA,EAAAA,KAAA,MAAAb,SAAI,sBACJa,EAAAA,EAAAA,KAAA,MAAAb,SAAI,kBAGRa,EAAAA,EAAAA,KAAA,SAAAb,SACG6J,IAAcA,GAAWjB,OACxBiB,GAAWvI,KAAI,SAAC6C,EAAKG,GACnB,OACEhE,EAAAA,EAAAA,MAAA,MAAAN,SAAA,EACEa,EAAAA,EAAAA,KAAA,MAAIE,UAAU,aAAYf,UACxBa,EAAAA,EAAAA,KAAA,OAAKW,IAAK2C,EAAI5C,MAAOE,IAAG,GAAAb,OAAKuD,EAAI5C,YAEnCjB,EAAAA,EAAAA,MAAA,MAAIS,UAAU,OAAMf,SAAA,CACjBmE,EAAIM,KAAK,KAAGN,EAAIO,OAEnB7D,EAAAA,EAAAA,KAAA,MAAAb,UACEM,EAAAA,EAAAA,MAAA,OAAKS,UAAU,mBAAkBf,SAAA,EAC/Ba,EAAAA,EAAAA,KAAA,SACEoB,KAAK,WACLyC,GAAE,mBAAA9D,OAAqB0D,GACvBO,SAAuC,IAA9BI,EAAmBX,GAC5BxD,QAAS,kBAAMoE,GAAsBZ,EAAM,EAC3CS,MAAOE,EAAmBX,MAE5BzD,EAAAA,EAAAA,KAAA,SAAOmE,QAAO,mBAAApE,OAAqB0D,WAGvCzD,EAAAA,EAAAA,KAAA,MAAAb,UACEa,EAAAA,EAAAA,KAAA,UAAQE,UAAWI,IAAG,oBAAoBnB,UACxCa,EAAAA,EAAAA,KAAA,OACEW,KACsB,IAApB2C,EAAIgB,YACAC,EACAC,EAEN5D,IAAI,YACJC,MAAM,cAIZpB,EAAAA,EAAAA,MAAA,MAAIS,UAAU,OAAMf,SAAA,EAClBa,EAAAA,EAAAA,KAAA,QAAME,UAAU,eAAcf,SAAEmE,EAAImB,WAAiB,IAAI,aAEzDzE,EAAAA,EAAAA,KAAA,UACAP,EAAAA,EAAAA,MAAA,QAAMS,UAAU,cAAaf,SAAA,CAAC,IAC1BoE,EAAaD,EAAIoB,UAAUZ,OAAO,0BAIxCrE,EAAAA,EAAAA,MAAA,MAAAN,SAAA,EACEM,EAAAA,EAAAA,MAAA,OAAKS,UAAU,OAAMf,SAAA,EACnBa,EAAAA,EAAAA,KAAA,QAAME,UAAU,eAAcf,SAAC,kBAC/Ba,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,QAAME,UAAU,cAAaf,SAC1BmE,EAAIqB,aAEN,uBAEHlF,EAAAA,EAAAA,MAAA,OAAAN,SAAA,EACEa,EAAAA,EAAAA,KAAA,QAAME,UAAU,eAAcf,SAAC,uBAG/Ba,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,QAAME,UAAU,cAAaf,SAC1BmE,EAAIsB,kBAEN,2BA1DEtB,EAAIO,GA+DjB,KAEA7D,EAAAA,EAAAA,KAAA,MAAAb,UACEa,EAAAA,EAAAA,KAAA,MACEoL,QAAS,EACTlL,UAAWI,IAAG,cAAe,cAAe,OAAOnB,SACpD,6BASbM,EAAAA,EAAAA,MAAA,OAAKS,UAAU,YAAWf,SAAA,EACxBa,EAAAA,EAAAA,KAAA,UACEE,UAAWI,IAAG,kBACdL,QA7gBkB,WAC5B,IAAIwK,EAAQ,GACZ3F,EAAqB,GACrB,IAAK,IAAIkD,EAAI,EAAGA,EAAIgB,GAAWjB,OAAQC,IAAK,CAC1C,IAAMqC,EAAWrB,GAAWhB,GAC5BlD,EAAmB0F,KAAK,CACtB3G,GAAIwG,EAASxG,GACb0D,QAAS8C,EAAS9C,QAAQU,gBAE5BwC,EAAMD,MAAK,EACb,CACAxE,EAAsByE,GAEtBnF,GAAoB,GACpBI,GAAsB,EAGxB,EA4f2CvG,SAChC,gBAGDa,EAAAA,EAAAA,KAACkD,EAAAA,EAAW,CAEVE,KAAK,gBACLD,QAAQ,cACRkI,SAAUhG,EACVhC,WApaQ,WAClB,IAAM+J,EAAatI,EAAmBrE,KAAI,SAAC6G,GACzC,OAAOA,EAAKC,OACd,IAEM0B,EAAUnE,EAAmBrE,KAAI,SAAC6G,GACtC,OAAOA,EAAKzD,EACd,IAEM8H,EAAW,IAAIC,EAAAA,GACnB1E,GACAU,EACA1C,EAAQ2G,cAEVC,EAAAA,EAAAA,IAAa9E,GAAS2E,EAAU,eAAgB,CAACyB,EAAYnE,GAAU,CACrE8C,QAAS,kCACTC,QAAS,iCAGRC,KAAI,eAAAoB,GAAAlB,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAC,SAAAiB,EAAOf,GAAG,OAAAH,EAAAA,EAAAA,KAAAI,MAAA,SAAAe,GAAA,cAAAA,EAAAb,KAAAa,EAAAZ,MAAA,wBAAAY,EAAAX,OAAA,GAAAU,EAAA,KAIf,gBAAAE,GAAA,OAAAH,EAAAP,MAAA,KAAAC,UAAA,EAJI,IAKJC,SAAQ,WAGP,IAGJnC,IACF,GAiYgB,UAMN7K,EAAAA,EAAAA,KAACkD,EAAAA,EAAW,CAEVE,KAAK,UACLD,QAAQ,cACRkI,SAAU5F,EACVpC,WA1YU,WACpB,IAAMoK,EAAe3I,EAAmBrE,KAAI,SAAC6G,GAC3C,OAAOA,EAAKC,OACd,IAEM0B,EAAUnE,EAAmBrE,KAAI,SAAC6G,GACtC,OAAOA,EAAKzD,EACd,IAEM8H,EAAW,IAAIC,EAAAA,GACnB1E,GACAU,EACA1C,EAAQ2G,cAEVC,EAAAA,EAAAA,IAAa9E,GAAS2E,EAAU,UAAW,CAAC8B,EAAcxE,GAAU,CAClE8C,QAAS,iCACTC,QAAS,gCAGRC,KAAI,eAAAyB,GAAAvB,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAC,SAAAsB,EAAOpB,GAAG,OAAAH,EAAAA,EAAAA,KAAAI,MAAA,SAAAoB,GAAA,cAAAA,EAAAlB,KAAAkB,EAAAjB,MAAA,wBAAAiB,EAAAhB,OAAA,GAAAe,EAAA,KAIf,gBAAAE,GAAA,OAAAH,EAAAZ,MAAA,KAAAC,UAAA,EAJI,IAKJC,SAAQ,WAGP,IAGJnC,IACF,GAuWgB,sBAyBlB,E,gDC72BA,EAxBgB,SAAC/H,GACf,IAAQC,EAAkBD,EAAlBC,cAEAkC,GAAWD,EAAAA,EAAAA,MAAXC,OACFrD,GAAWkM,EAAAA,EAAAA,IAAc,sCAE/B,OACE9N,EAAAA,EAAAA,KAAC+N,EAAAA,EAAM,CAAA5O,UACLa,EAAAA,EAAAA,KAACgO,EAAAA,EAAgB,CAAA7O,SACb8F,GAQAjF,EAAAA,EAAAA,KAACiO,EAAc,CAACrM,SAAUA,KAP1BnC,EAAAA,EAAAA,MAAAyO,EAAAA,SAAA,CAAA/O,SAAA,EACEa,EAAAA,EAAAA,KAACmO,EAAI,CAACpL,cAAeA,KACrB/C,EAAAA,EAAAA,KAACoO,EAAAA,EAAW,CAACxM,SAAUA,KACvB5B,EAAAA,EAAAA,KAACqO,EAAa,CAACzM,SAAUA,UASrC,C","sources":["components/RaijinsModal/index.jsx","components/Staking/EarnedTicketCard.jsx","components/Staking/EarnedTickets.jsx","components/Staking/Ticket/Hero.jsx","components/Staking/Ticket/RaijinsStakingCard.jsx","components/Staking/Ticket/RaijinsStakedCard.jsx","components/Staking/Ticket/RaijinsStaking.jsx","pages/Staking/index.jsx"],"sourcesContent":["import \"react-responsive-modal/styles.css\";\r\nimport { Modal } from \"react-responsive-modal\";\r\nimport \"./index.scss\";\r\nimport { AiOutlineClose } from \"react-icons/ai\";\r\n// import XImage from \"assets/images/common/X.png\";\r\n\r\n// ================================================\r\n\r\nconst RaijinsModal = ({\r\n  children,\r\n  open,\r\n  setOpen,\r\n  onOpenModal,\r\n  onCloseModal,\r\n  classes,\r\n}) => {\r\n  return (\r\n    <Modal\r\n      open={open}\r\n      onClose={onCloseModal}\r\n      center\r\n      classNames={{ modal: `raijins-modal ${classes}` }}\r\n    >\r\n      <button onClick={onCloseModal} className=\"shut-btn\">\r\n        {/* <img src={XImage} alt=\"X.png\" /> */}\r\n        <AiOutlineClose />\r\n      </button>\r\n      {children}\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default RaijinsModal;\r\n","import cx from \"classnames\";\r\n\r\nconst EarnedTicketCard = ({ data, onNFTImgClick }) => {\r\n  return (\r\n    <div className={cx(\"earned-ticket-card\", \"mb-2\")}>\r\n      <h6 className={cx(\"nft-type\", \"mb-1\")}>\r\n        nft type: <span className={cx(\"italic\")}>{data.label}</span>\r\n      </h6>\r\n      <div className={cx(\"d-flex\", \"justify-center\", \"mb-1\")}>\r\n        {data.images.map((image) => (\r\n          <img\r\n            src={image}\r\n            key={image}\r\n            alt={image}\r\n            width=\"14%\"\r\n            className={cx(\"nft-image\")}\r\n            onClick={() => onNFTImgClick(image)}\r\n          />\r\n        ))}\r\n      </div>\r\n      <div className={cx(\"d-flex\", \"flex-column\", \"gap-1\")}>\r\n        <div className={cx(\"length-ticket\")}>\r\n          7 - day:{\" \"}\r\n          <span className={cx(\"italic\")}>\r\n            {data.day7} ticket{data.day7 === 1 ? \"\" : \"s\"}\r\n          </span>\r\n        </div>\r\n        <div className={cx(\"length-ticket\")}>\r\n          30 - day:{\" \"}\r\n          <span className={cx(\"italic\")}>\r\n            {data.day30} ticket{data.day30 === 1 ? \"\" : \"s\"}\r\n          </span>\r\n        </div>\r\n        <div className={cx(\"length-ticket\")}>\r\n          60 - day:{\" \"}\r\n          <span className={cx(\"italic\")}>\r\n            {data.day60} ticket{data.day60 === 1 ? \"\" : \"s\"}\r\n          </span>\r\n        </div>\r\n        <div className={cx(\"length-ticket\")}>\r\n          90 - day:{\" \"}\r\n          <span className={cx(\"italic\")}>\r\n            {data.day90} ticket{data.day790 === 1 ? \"\" : \"s\"}\r\n          </span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EarnedTicketCard;\r\n","import { useState } from \"react\";\r\nimport cx from \"classnames\";\r\nimport SectionTitle from \"../SectionTitle\";\r\nimport RaijinsModal from \"components/RaijinsModal\";\r\n// import RaijinsTicketImg from \"assets/images/common/RaijinsTicket.png\";\r\n// import Normal1smImg from \"assets/images/nfts/Normal1sm.jpg\";\r\n// import Normal2smImg from \"assets/images/nfts/Normal2sm.jpg\";\r\n// import Normal3smImg from \"assets/images/nfts/Normal3sm.jpg\";\r\n// import Normal4smImg from \"assets/images/nfts/Normal4sm.jpg\";\r\n// import Normal5smImg from \"assets/images/nfts/Normal5sm.jpg\";\r\n// import Normal6smImg from \"assets/images/nfts/Normal6sm.jpg\";\r\n// import Normal7smImg from \"assets/images/nfts/Normal7sm.jpg\";\r\n\r\n// import Deepblack1smImg from \"assets/images/nfts/Deepblack1sm.jpg\";\r\n// import Deepblack2smImg from \"assets/images/nfts/Deepblack2sm.jpg\";\r\n// import Deepblack3smImg from \"assets/images/nfts/Deepblack3sm.jpg\";\r\n// import Deepblack4smImg from \"assets/images/nfts/Deepblack4sm.jpg\";\r\n// import Deepblack5smImg from \"assets/images/nfts/Deepblack5sm.jpg\";\r\n// import Deepblack6smImg from \"assets/images/nfts/Deepblack6sm.jpg\";\r\n// import Deepblack7smImg from \"assets/images/nfts/Deepblack7sm.jpg\";\r\n\r\n// import Jade1smImg from \"assets/images/nfts/Jade1sm.jpg\";\r\n// import Jade2smImg from \"assets/images/nfts/Jade2sm.jpg\";\r\n// import Jade3smImg from \"assets/images/nfts/Jade3sm.jpg\";\r\n// import Jade4smImg from \"assets/images/nfts/Jade4sm.jpg\";\r\n// import Jade5smImg from \"assets/images/nfts/Jade5sm.jpg\";\r\n// import Jade6smImg from \"assets/images/nfts/Jade6sm.jpg\";\r\n// import Jade7smImg from \"assets/images/nfts/Jade7sm.jpg\";\r\n\r\n// import Ghost1smImg from \"assets/images/nfts/Ghost1sm.jpg\";\r\n// import Ghost2smImg from \"assets/images/nfts/Ghost2sm.jpg\";\r\n// import Ghost3smImg from \"assets/images/nfts/Ghost3sm.jpg\";\r\n// import Ghost4smImg from \"assets/images/nfts/Ghost4sm.jpg\";\r\n// import Ghost5smImg from \"assets/images/nfts/Ghost5sm.jpg\";\r\n// import Ghost6smImg from \"assets/images/nfts/Ghost6sm.jpg\";\r\n// import Ghost7smImg from \"assets/images/nfts/Ghost7sm.jpg\";\r\n\r\nimport Avatar0Img from \"assets/images/nfts/Avatar0.png\";\r\nimport Avatar1Img from \"assets/images/nfts/Avatar1.png\";\r\nimport Avatar2Img from \"assets/images/nfts/Avatar2.png\";\r\nimport Avatar3Img from \"assets/images/nfts/Avatar3.png\";\r\nimport Avatar4Img from \"assets/images/nfts/Avatar4.png\";\r\nimport Avatar5Img from \"assets/images/nfts/Avatar5.png\";\r\nimport EarnedTicketCard from \"./EarnedTicketCard\";\r\n\r\n// ================================================\r\n\r\nconst tableData = [\r\n  {\r\n    label: \"raijins\",\r\n    type: \"raijins\",\r\n    images: [\r\n      Avatar0Img,\r\n      Avatar1Img,\r\n      Avatar2Img, \r\n      Avatar3Img, \r\n      Avatar4Img, \r\n      Avatar5Img\r\n    ],\r\n    day7: 5,\r\n    day30: 21,\r\n    day60: 43,\r\n    day90: 70,\r\n    reward: 15,\r\n  },\r\n];\r\n\r\n// ================================================\r\n\r\nconst EarnedTickets = ({ isMobile }) => {\r\n  const [openImgModal, setOpenImgModal] = useState(false);\r\n  const [modalImg, setModalImg] = useState(null);\r\n\r\n  const onNFTImgClick = (image) => {\r\n    return;\r\n    // setModalImg(image);\r\n    // setOpenImgModal(true);\r\n  };\r\n\r\n  const onCloseModal = () => {\r\n    setModalImg(null);\r\n    setOpenImgModal(false);\r\n  };\r\n\r\n  return (\r\n    <div className={cx(\"earned-tickets\")}>\r\n      <SectionTitle classes=\"mb-3\">\r\n        {/* # <img src={RaijinsTicketImg} alt=\"raijins-ticket.png\" width=\"70px\" /> earned{\" \"}\r\n        <span>per staking period</span> */}\r\n        <span>Earned Per Staking Period</span>\r\n      </SectionTitle>\r\n      {isMobile ? (\r\n        tableData.map((datum) => (\r\n          <EarnedTicketCard\r\n            key={datum.type}\r\n            data={datum}\r\n            onNFTImgClick={onNFTImgClick}\r\n          />\r\n        ))\r\n      ) : (\r\n        <table className={cx(\"earned-tickets-table\")}>\r\n          <thead>\r\n            <tr>\r\n              <th rowSpan={2}>#</th>\r\n              <th rowSpan={2} className={cx(\"image-cell\")}>\r\n                nft type\r\n              </th>\r\n              {/* <th colSpan={4} className={cx(\"text-right\")}>\r\n                staking length\r\n              </th> */}\r\n              {/* <th rowSpan={2} className={cx(\"underline\")}>\r\n              staking <br />\r\n              reward boost\r\n            </th> */}\r\n            </tr>\r\n            <tr>\r\n              <th>7 - day</th>\r\n              <th>30 - day</th>\r\n              <th>60 - day</th>\r\n              <th>90 - day</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {tableData.map((row) => {\r\n              return (\r\n                <tr key={row.type}>\r\n                  <th className={cx(\"nft-type text-right\")}>{row.label}</th>\r\n                  <td className={cx(\"d-flex\", \"justify-between\", \"image-cell\")}>\r\n                    {row.images.map((image, idx) => {\r\n                      return (\r\n                        <img\r\n                          src={image}\r\n                          alt={`image-${row.type}${idx}.jpg`}\r\n                          key={idx}\r\n                          onClick={() => onNFTImgClick(image)}\r\n                          className={cx(\"nft-image\")}\r\n                        />\r\n                      );\r\n                    })}\r\n                  </td>\r\n                  <td>\r\n                    {row.day7}\r\n                    <br />\r\n                    ticket{row.day7 === 1 ? \"\" : \"s\"}\r\n                  </td>\r\n                  <td>\r\n                    {row.day30}\r\n                    <br />\r\n                    ticket{row.day30 === 1 ? \"\" : \"s\"}\r\n                  </td>\r\n                  <td>\r\n                    {row.day60}\r\n                    <br />\r\n                    ticket{row.day60 === 1 ? \"\" : \"s\"}\r\n                  </td>\r\n                  <td>\r\n                    {row.day90}\r\n                    <br />\r\n                    ticket{row.day90 === 1 ? \"\" : \"s\"}\r\n                  </td>\r\n                  {/* <td>\r\n                  {row.reward}\r\n                  <br />\r\n                  boost\r\n                </td> */}\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </table>\r\n      )}\r\n\r\n      <RaijinsModal\r\n        open={openImgModal}\r\n        onCloseModal={onCloseModal}\r\n        classes={`p-0 ${isMobile ? \"w-90\" : \"w-30\"}`}\r\n      >\r\n        <img src={modalImg} width=\"100%\" />\r\n      </RaijinsModal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EarnedTickets;\r\n","import cx from \"classnames\";\r\nimport Description from \"../../Description\";\r\nimport PageTitle from \"../../PageTitle\";\r\nimport RoundButton from \"../../RoundButton\";\r\n\r\n// import VitaImg from \"assets/images/staking/Vita.png\";\r\n// import ScrollButton from \"components/ScrollButton\";\r\n\r\nconst Hero = (props) => {\r\n  const { connectWallet } = props;\r\n\r\n  return (\r\n    <div className={cx(\"staking-hero\")}>\r\n      <div className={cx(\"page-intro\")}>\r\n        <PageTitle>\r\n          Raijins staking for <span>Ticket</span>\r\n        </PageTitle>\r\n        <Description>\r\n          Connect your wallet to start staking your Raijins NFTs.\r\n        </Description>\r\n        <Description>For more information, scroll down</Description>\r\n        <RoundButton\r\n          variant=\"primary\"\r\n          text=\"connect wallet\"\r\n          onBtnClick={connectWallet}\r\n        />\r\n      </div>\r\n      {/* <div className={cx(\"hero-img-container\")}>\r\n        <img src={VitaImg} alt=\"vita.png\" width=\"80%\" />\r\n      </div> */}\r\n      {/* <div className={cx(\"scrollbtn-wrapper\")}>\r\n        <ScrollButton />\r\n      </div> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Hero;\r\n","import cx from \"classnames\";\r\n\r\nconst RaijinsStakingCard = ({\r\n  nft,\r\n  timeTypeInfo,\r\n  currentTimeType,\r\n  index,\r\n  selectStatusInWallet,\r\n  handleSelectNFTInWallet,\r\n}) => {\r\n  return (\r\n    <div className={cx(\"raijins-staking-card\")}>\r\n      <div className={cx(\"img-container\")}>\r\n        <img src={nft.image} alt={`${nft.image}`} width=\"100%\" />\r\n      </div>\r\n      <div>\r\n        <p className={cx(\"text-secondary\", \"uppercase\", \"mb-1\")}>\r\n          NFT #: <br />\r\n          <span className={cx(\"text-primary\", \"italic\")}>\r\n            {nft.name} #{nft.id}\r\n          </span>\r\n        </p>\r\n        <p className={cx(\"text-secondary\", \"uppercase\", \"mb-1\")}>\r\n          staking period:{\" \"}\r\n          <span className={cx(\"text-primary\", \"italic\")}>\r\n            {timeTypeInfo[currentTimeType].period} day\r\n          </span>{\" \"}\r\n        </p>\r\n        <p className={cx(\"text-secondary\", \"uppercase\", \"mb-1\")}>\r\n          estimated reward:\r\n          <br />{\" \"}\r\n          <span className={cx(\"text-primary\", \"italic\")}>\r\n            {nft.rewards} raijins tickets\r\n          </span>\r\n        </p>\r\n      </div>\r\n      <div className=\"raijins-checkbox\">\r\n        <input\r\n          type=\"checkbox\"\r\n          id={`raijinsCheckbox-${index}`}\r\n          checked={selectStatusInWallet[index] === true}\r\n          onChange={() => handleSelectNFTInWallet(index)}\r\n          value={selectStatusInWallet[index]}\r\n        />\r\n        <label htmlFor={`raijinsCheckbox-${index}`}></label>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RaijinsStakingCard;\r\n","import cx from \"classnames\";\r\nimport CircularArrowImg from \"assets/images/common/Arrow.png\";\r\nimport XImage from \"assets/images/common/XLight.png\";\r\n\r\nconst RaijinsStakedCard = ({\r\n  nft,\r\n  selectStatusStaked,\r\n  index,\r\n  handleSelectNFTStaked,\r\n  timeTypeInfo,\r\n}) => {\r\n  return (\r\n    <div className={cx(\"raijins-staked-card\")}>\r\n      <div className={cx(\"img-container\")}>\r\n        <img src={nft.image} alt={`${nft.image}`} width=\"100%\" />\r\n      </div>\r\n      <div>\r\n        <p className={cx(\"text-secondary\", \"uppercase\", \"mb-1\")}>\r\n          NFT #: <br />\r\n          <span className={cx(\"text-primary\", \"italic\")}>\r\n            {nft.name} #{nft.id}\r\n          </span>\r\n        </p>\r\n        <p className={cx(\"text-secondary\", \"uppercase\", \"mb-1\")}>\r\n          auto restake:{\" \"}\r\n          <button className={cx(\"auto-restake-btn\")}>\r\n            <img\r\n              src={nft.autoRestake === true ? CircularArrowImg : XImage}\r\n              alt=\"arrow.png\"\r\n              width=\"100%\"\r\n            />\r\n          </button>\r\n        </p>\r\n        <p className={cx(\"text-secondary\", \"uppercase\", \"mb-1\")}>\r\n          remaining period:{\" \"}\r\n          <span className={cx(\"text-primary\", \"italic\")}>\r\n            {nft.leftTime} days left\r\n            <br />({timeTypeInfo[nft.timeType].period} days programme)\r\n          </span>\r\n        </p>\r\n        <p className={cx(\"text-secondary\", \"uppercase\", \"mb-1\")}>\r\n          next reward:{\" \"}\r\n          <span className={cx(\"text-primary\", \"italic\")}>\r\n            {nft.nextTicket} raijins tickets\r\n          </span>\r\n        </p>\r\n        <p className={cx(\"text-secondary\", \"uppercase\", \"mb-1\")}>\r\n          claimable reward:{\" \"}\r\n          <span className={cx(\"text-primary\", \"italic\")}>\r\n            {nft.claimableTicket} raijins tickets\r\n          </span>\r\n        </p>\r\n      </div>\r\n      <div className=\"raijins-checkbox\">\r\n        <input\r\n          type=\"checkbox\"\r\n          id={`raijinsCheckbox-${index}`}\r\n          checked={selectStatusStaked[index] === true}\r\n          onChange={() => handleSelectNFTStaked(index)}\r\n          value={selectStatusStaked[index]}\r\n        />\r\n        <label htmlFor={`raijinsCheckbox-${index}`}></label>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RaijinsStakedCard;\r\n","import { useWeb3React } from \"@web3-react/core\";\r\nimport cx from \"classnames\";\r\nimport useSWR from \"swr\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { ethers } from \"ethers\";\r\n\r\nimport SectionTitle from \"../../SectionTitle\";\r\nimport { Tab, Tabs, TabList, TabPanel } from \"react-tabs\";\r\nimport \"react-tabs/style/react-tabs.css\";\r\n// import TableDecoImg from \"assets/images/staking/tableDeco.png\";\r\nimport CircularArrowImg from \"assets/images/common/Arrow.png\";\r\nimport XImage from \"assets/images/common/XLight.png\";\r\nimport RoundButton from \"../../RoundButton\";\r\nimport { getContract } from \"config/contracts\";\r\nimport { RAIJINS_NFTS, REWARD_AMOUNTS, VOLUME1_METADATA, COLLECTION_OPTIONS } from \"config/staking\";\r\nimport { callContract, contractFetcher } from \"lib/contracts\";\r\nimport { useChainId } from \"lib/chains\";\r\nimport { approveNFT } from \"lib/approveNFT\";\r\nimport StakingRaijins from \"abis/StakingRaijins.json\";\r\n// import Raijins from \"abis/Raijins.json\";\r\nimport RaijinsStakingCard from \"./RaijinsStakingCard\";\r\nimport RaijinsStakedCard from \"./RaijinsStakedCard\";\r\n// import Combobox from '../Combobox/Combobox';\r\nimport {\r\n  formatAmount,\r\n} from \"lib/numbers\";\r\n\r\nconst timeTypeInfo = [\r\n  {\r\n    label: \"7-day\",\r\n    id: \"seven\",\r\n    period: 7,\r\n  },\r\n  {\r\n    label: \"30-day\",\r\n    id: \"thirty\",\r\n    period: 30,\r\n  },\r\n  {\r\n    label: \"60-day\",\r\n    id: \"sixty\",\r\n    period: 60,\r\n  },\r\n  {\r\n    label: \"90-day\",\r\n    id: \"ninety\",\r\n    period: 90,\r\n  },\r\n];\r\n\r\nconst getRarity = (collection, tokenId) => {\r\n  // add code\r\n\r\n  return 0;\r\n};\r\n\r\nconst loadWalletNFTs = (dataWallet, timeType) => {\r\n  if (dataWallet === undefined) return [];\r\n\r\n  if (dataWallet.length === 0) return [];\r\n\r\n  const ret = dataWallet.map((item) => {\r\n    let index = -1;\r\n\r\n    for (let i = 0; i < RAIJINS_NFTS.length; i++) {\r\n      if (\r\n        RAIJINS_NFTS[i].address.toLowerCase() === item.token_address.toLowerCase()\r\n      ) {\r\n        index = i;\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (index === -1) return null;\r\n\r\n    const nftInfo = RAIJINS_NFTS[index];\r\n    let imageURL = \"\";\r\n    if (nftInfo.name === \"LIFE OF HEL - Volume 1\")\r\n      imageURL = `${nftInfo.imageHash}${VOLUME1_METADATA[Number(item.token_id.toString()) - 1]\r\n        }.${nftInfo.imageType}`;\r\n    else\r\n      imageURL = `${nftInfo.imageHash}${Number(item.token_id.toString())}.${nftInfo.imageType\r\n        }`;\r\n\r\n    const rarity = getRarity(nftInfo.address, item.token_id.toString());\r\n    const rewards = REWARD_AMOUNTS[rarity][timeType];\r\n    return {\r\n      id: item.token_id.toString(),\r\n      name: item.name,\r\n      address: nftInfo.address,\r\n      image: imageURL,\r\n      rewards: rewards,\r\n    };\r\n  });\r\n\r\n  const finalArray = ret.filter((item) => item !== null);\r\n  return finalArray;\r\n};\r\n\r\nconst loadStakedNFTs = (dataContract) => {\r\n  if (dataContract === undefined) return [];\r\n\r\n  if (dataContract.length === 0) return [];\r\n\r\n  const ret = dataContract.map((item) => {\r\n    let index = -1;\r\n\r\n    for (let i = 0; i < RAIJINS_NFTS.length; i++) {\r\n      if (RAIJINS_NFTS[i].address.toLowerCase() === item[0].toLowerCase()) {\r\n        index = i;\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (index === -1) return null;\r\n\r\n    const nftInfo = RAIJINS_NFTS[index];\r\n    const tokenId = parseInt(item[1].toString());\r\n    const timeType = parseInt(item[2].toString());\r\n    const startTime = parseInt(item[3].toString());\r\n    const autoRestake = item[4];\r\n    const isClaimed = item[5];\r\n    const pendingTicket = parseInt(formatAmount(item[6], 18, 0));\r\n\r\n    const rarity = getRarity(nftInfo.address, tokenId);\r\n    const endTime = startTime + timeTypeInfo[timeType].period * 24 * 3600;\r\n    const currentTime = new Date().getTime() / 1000;\r\n    let leftTime = 0;\r\n    let nextTicket = 0;\r\n\r\n    if (!autoRestake) {\r\n      if (isClaimed || currentTime > endTime) {\r\n        leftTime = 0;\r\n        nextTicket = 0;\r\n      } else {\r\n        leftTime = endTime - currentTime;\r\n        nextTicket = REWARD_AMOUNTS[rarity][timeType];\r\n      }\r\n    } else {\r\n      leftTime =\r\n        (timeTypeInfo[timeType].period * 24 * 3600) - ((currentTime - startTime) % (timeTypeInfo[timeType].period * 24 * 3600));\r\n      nextTicket = REWARD_AMOUNTS[rarity][timeType];\r\n    }\r\n\r\n    let imageURL = \"\";\r\n    if (nftInfo.name === \"LIFE OF HEL - Volume 1\")\r\n      imageURL = `${nftInfo.imageHash}${VOLUME1_METADATA[Number(item[1].toString()) - 1]\r\n        }.${nftInfo.imageType}`;\r\n    else\r\n      imageURL = `${nftInfo.imageHash}${Number(item[1].toString())}.${nftInfo.imageType\r\n        }`;\r\n\r\n    return {\r\n      name: nftInfo.name,\r\n      image: imageURL,\r\n      address: nftInfo.address,\r\n      id: tokenId,\r\n      timeType: timeType,\r\n      leftTime: parseInt(leftTime / (24 * 3600)) + 1,\r\n      autoRestake: autoRestake,\r\n      nextTicket: nextTicket,\r\n      claimableTicket: pendingTicket,\r\n    };\r\n  });\r\n\r\n  const finalArray = ret.filter((item) => item !== null);\r\n  return finalArray;\r\n};\r\n\r\nlet walletNFTSelection = [];\r\nlet stakedNFTSelection = [];\r\n\r\nconst RaijinsStaking = ({ isMobile }) => {\r\n  const { active, library, account } = useWeb3React();\r\n\r\n  const [currentTimeType, setCurrentTimeType] = useState(0);\r\n  const [disabledClaimBtn, setDisabledClaimBtn] = useState(true);\r\n  const [disabledUnStakeBtn, setDisabledUnStakeBtn] = useState(true);\r\n  // const [disabledAddRestakeBtn, setDisabledAddRestakeBtn] = useState(true);\r\n  // const [disabledCancelRestakeBtn, setDisabledCancelRestakeBtn] = useState(true);\r\n  const [selectStatusInWallet, setSelectStatusInWallet] = useState([]);\r\n  const [selectStatusStaked, setSelectStatusStaked] = useState([]);\r\n  const [isApproving, setIsApproving] = useState(false);\r\n  const [isWaitingForApproval, setIsWaitingForApproval] = useState(false);\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const [selectedCollection/*, setSelectedCollection */] = useState(COLLECTION_OPTIONS[0]);\r\n\r\n  // const regInputForCollectionId = React.useRef();\r\n\r\n  const { chainId } = useChainId();\r\n  const stakingRaijinsAddress = getContract(chainId, \"StakingRaijins\");\r\n\r\n  // const { data: dataMoralis } = useSWR(\r\n  //   [account],\r\n  //   { fetcher: moralisFetcher(account), }\r\n  // );\r\n  const nftAddresses = RAIJINS_NFTS.map((item) => item.address);\r\n  //////////Reading Wallet///////////////////////////////////////////////////////////////////////////////////////////////////\r\n  const { data: dataWallet } = useSWR(\r\n    active &&\r\n    stakingRaijinsAddress && [\r\n      active,\r\n      chainId,\r\n      stakingRaijinsAddress,\r\n      \"getTokensInWallet\",\r\n      nftAddresses,\r\n      account\r\n    ],\r\n    { fetcher: contractFetcher(library, StakingRaijins) }\r\n  );\r\n  const filteredDataWallet = dataWallet ? dataWallet.filter((item) => item.token_address.toLowerCase() === selectedCollection.address.toLowerCase()) : [];\r\n  let nftsInWallet = loadWalletNFTs(filteredDataWallet, currentTimeType);\r\n  //////////Reading Staking Contract////////////////////////////////////////////////////////////////////////////////////////////////////\r\n  const { data: dataContract } = useSWR(\r\n    active &&\r\n    stakingRaijinsAddress && [\r\n      active,\r\n      chainId,\r\n      stakingRaijinsAddress,\r\n      \"getStakingInfo\",\r\n      nftAddresses,\r\n      account,\r\n    ],\r\n    { fetcher: contractFetcher(library, StakingRaijins) }\r\n  );\r\n  const filteredDataContract = dataContract ? dataContract.filter((item) => item._address.toLowerCase() === selectedCollection.address.toLowerCase()) : [];\r\n  const nftsStaked = loadStakedNFTs(filteredDataContract);\r\n\r\n  /////////Approval Status/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n  const { data: collectionApprovals } = useSWR(\r\n    active &&\r\n    stakingRaijinsAddress && [\r\n      active,\r\n      chainId,\r\n      stakingRaijinsAddress,\r\n      \"getApprovalStatus\",\r\n      nftAddresses,\r\n      account,\r\n    ],\r\n    { fetcher: contractFetcher(library, StakingRaijins) }\r\n  );\r\n\r\n  let needApproval = true;\r\n  if (collectionApprovals) {\r\n    const filteredCollectionApprovals = collectionApprovals ? collectionApprovals.filter((item) => item.token_address.toLowerCase() === selectedCollection.address.toLowerCase()) : [];\r\n    needApproval = !filteredCollectionApprovals[0].isApproval;\r\n  }\r\n\r\n  const [disabledStakeBtn, setDisabledStakeBtn] = useState(!needApproval);\r\n\r\n  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n  const handleSelectNFTInWallet = (index) => {\r\n    const itemInfo = nftsInWallet[index];\r\n\r\n    const selectedItem = walletNFTSelection.find(\r\n      (item) =>\r\n        item.id === itemInfo.id &&\r\n        item.address === itemInfo.address.toLowerCase()\r\n    );\r\n    if (selectedItem === undefined)\r\n      walletNFTSelection.push({\r\n        id: itemInfo.id,\r\n        address: itemInfo.address.toLowerCase(),\r\n      });\r\n    else\r\n      walletNFTSelection = walletNFTSelection.filter(\r\n        (item) => item !== selectedItem\r\n      );\r\n\r\n    let items = [];\r\n    for (let i = 0; i < nftsInWallet.length; i++) {\r\n      const itemInfo = nftsInWallet[i];\r\n      const currentItem = walletNFTSelection.find(\r\n        (item) =>\r\n          item.id === itemInfo.id &&\r\n          item.address === itemInfo.address.toLowerCase()\r\n      );\r\n      if (currentItem === undefined) items.push(false);\r\n      else items.push(true);\r\n    }\r\n    setSelectStatusInWallet(items);\r\n\r\n    if (walletNFTSelection.length === 0 && !needApproval)\r\n      setDisabledStakeBtn(true);\r\n    else setDisabledStakeBtn(false);\r\n  };\r\n\r\n  const handleSelectNFTStaked = (index) => {\r\n    const itemInfo = nftsStaked[index];\r\n\r\n    const selectedItem = stakedNFTSelection.find(\r\n      (item) =>\r\n        item.id === itemInfo.id &&\r\n        item.address === itemInfo.address.toLowerCase()\r\n    );\r\n    if (selectedItem === undefined)\r\n      stakedNFTSelection.push({\r\n        id: itemInfo.id,\r\n        address: itemInfo.address.toLowerCase(),\r\n      });\r\n    else\r\n      stakedNFTSelection = stakedNFTSelection.filter(\r\n        (item) => item !== selectedItem\r\n      );\r\n\r\n    let items = [];\r\n    for (let i = 0; i < nftsStaked.length; i++) {\r\n      const itemInfo = nftsStaked[i];\r\n      const currentItem = stakedNFTSelection.find(\r\n        (item) =>\r\n          item.id === itemInfo.id &&\r\n          item.address === itemInfo.address.toLowerCase()\r\n      );\r\n      if (currentItem === undefined) items.push(false);\r\n      else items.push(true);\r\n    }\r\n    setSelectStatusStaked(items);\r\n\r\n    if (stakedNFTSelection.length === 0) {\r\n      setDisabledClaimBtn(true);\r\n      setDisabledUnStakeBtn(true);\r\n      // setDisabledAddRestakeBtn(true);\r\n      // setDisabledCancelRestakeBtn(true);\r\n    } else {\r\n      setDisabledClaimBtn(false);\r\n      setDisabledUnStakeBtn(false);\r\n      // setDisabledAddRestakeBtn(false);\r\n      // setDisabledCancelRestakeBtn(false);\r\n    }\r\n  };\r\n\r\n  const handleSelectAllInWallet = () => {\r\n    let items = [];\r\n    walletNFTSelection = [];\r\n    for (let i = 0; i < nftsInWallet.length; i++) {\r\n      const itemInfo = nftsInWallet[i];\r\n      walletNFTSelection.push({\r\n        id: itemInfo.id,\r\n        address: itemInfo.address.toLowerCase(),\r\n      });\r\n      items.push(true);\r\n    }\r\n    setSelectStatusInWallet(items);\r\n\r\n    setDisabledStakeBtn(false);\r\n  };\r\n\r\n  const handleUnselectAllInWallet = () => {\r\n    let items = [];\r\n    walletNFTSelection = [];\r\n    setSelectStatusInWallet(items);\r\n    setDisabledStakeBtn(true);\r\n  };\r\n\r\n  const handleSelectAllStaked = () => {\r\n    let items = [];\r\n    stakedNFTSelection = [];\r\n    for (let i = 0; i < nftsStaked.length; i++) {\r\n      const itemInfo = nftsStaked[i];\r\n      stakedNFTSelection.push({\r\n        id: itemInfo.id,\r\n        address: itemInfo.address.toLowerCase(),\r\n      });\r\n      items.push(true);\r\n    }\r\n    setSelectStatusStaked(items);\r\n\r\n    setDisabledClaimBtn(false);\r\n    setDisabledUnStakeBtn(false);\r\n    // setDisabledAddRestakeBtn(false);\r\n    // setDisabledCancelRestakeBtn(false);\r\n  };\r\n\r\n  const handleUnselectAllStaked = () => {\r\n    let items = [];\r\n    stakedNFTSelection = [];\r\n    setSelectStatusStaked(items);\r\n\r\n    setDisabledClaimBtn(true);\r\n    setDisabledUnStakeBtn(true);\r\n    // setDisabledAddRestakeBtn(true);\r\n    // setDisabledCancelRestakeBtn(true);\r\n  };\r\n\r\n  const handleTimeType = (index) => {\r\n    setCurrentTimeType(index);\r\n  };\r\n\r\n  const approveFromNFT = () => {\r\n    if (needApproval) {\r\n      approveNFT({\r\n        setIsApproving,\r\n        library,\r\n        tokenAddress: selectedCollection.address,\r\n        spender: stakingRaijinsAddress,\r\n        chainId: chainId,\r\n        onApproveSubmitted: () => {\r\n          setIsWaitingForApproval(true);\r\n        },\r\n      });\r\n\r\n      return;\r\n    }\r\n  };\r\n\r\n  const handleStake = () => {\r\n    if (needApproval) {\r\n      approveFromNFT();\r\n      return;\r\n    }\r\n\r\n    setIsSubmitting(true);\r\n\r\n    const nftToStake = walletNFTSelection.map((item) => {\r\n      return item.address;\r\n    });\r\n\r\n    const tokenId = walletNFTSelection.map((item) => {\r\n      return item.id;\r\n    });\r\n\r\n    const timeType = tokenId.map((item) => {\r\n      return currentTimeType;\r\n    });\r\n\r\n    const contract = new ethers.Contract(\r\n      stakingRaijinsAddress,\r\n      StakingRaijins,\r\n      library.getSigner()\r\n    );\r\n    callContract(chainId, contract, \"stake\", [nftToStake, tokenId, timeType], {\r\n      sentMsg: \"Staking Raijins NFT submitted!\",\r\n      failMsg: \"Staking Raijins NFT failed.\",\r\n      // setPendingTxns,\r\n    })\r\n      .then(async (res) => {\r\n        // setIsVisible(false);\r\n        // setOpenBuyModal(true);\r\n        // setOpenBoughtModal(false);\r\n      })\r\n      .finally(() => {\r\n        // setIsStaking(false);\r\n        // setOpenBuyModal(false);\r\n        // setOpenBoughtModal(true);\r\n        setIsSubmitting(false);\r\n      });\r\n\r\n    handleUnselectAllInWallet();\r\n  };\r\n\r\n  const getTextStake = () => {\r\n    if (needApproval && isWaitingForApproval) {\r\n      return \"Waiting for Approval...\";\r\n    }\r\n    if (isApproving) {\r\n      return \"Approving\";\r\n    }\r\n    if (needApproval) {\r\n      return \"Approve\";\r\n    }\r\n\r\n    if (isSubmitting) {\r\n      return \"Staking...\";\r\n    }\r\n\r\n    return \"Stake\";\r\n  };\r\n\r\n  const handleClaim = () => {\r\n    const nftToClaim = stakedNFTSelection.map((item) => {\r\n      return item.address;\r\n    });\r\n\r\n    const tokenId = stakedNFTSelection.map((item) => {\r\n      return item.id;\r\n    });\r\n\r\n    const contract = new ethers.Contract(\r\n      stakingRaijinsAddress,\r\n      StakingRaijins,\r\n      library.getSigner()\r\n    );\r\n    callContract(chainId, contract, \"claimRewards\", [nftToClaim, tokenId], {\r\n      sentMsg: \"Claim Raijins Ticket submitted!\",\r\n      failMsg: \"Claim Raijins Ticket failed.\",\r\n      // setPendingTxns,\r\n    })\r\n      .then(async (res) => {\r\n        // setIsVisible(false);\r\n        // setOpenBuyModal(true);\r\n        // setOpenBoughtModal(false);\r\n      })\r\n      .finally(() => {\r\n        // setIsStaking(false);\r\n        // setOpenBuyModal(false);\r\n        // setOpenBoughtModal(true);\r\n      });\r\n\r\n    handleUnselectAllStaked();\r\n  };\r\n\r\n  const handleUnStake = () => {\r\n    const nftToUnStake = stakedNFTSelection.map((item) => {\r\n      return item.address;\r\n    });\r\n\r\n    const tokenId = stakedNFTSelection.map((item) => {\r\n      return item.id;\r\n    });\r\n\r\n    const contract = new ethers.Contract(\r\n      stakingRaijinsAddress,\r\n      StakingRaijins,\r\n      library.getSigner()\r\n    );\r\n    callContract(chainId, contract, \"unStake\", [nftToUnStake, tokenId], {\r\n      sentMsg: \"Unstake Raijins NFT submitted!\",\r\n      failMsg: \"Unstake Raijins NFT failed.\",\r\n      // setPendingTxns,\r\n    })\r\n      .then(async (res) => {\r\n        // setIsVisible(false);\r\n        // setOpenBuyModal(true);\r\n        // setOpenBoughtModal(false);\r\n      })\r\n      .finally(() => {\r\n        // setIsStaking(false);\r\n        // setOpenBuyModal(false);\r\n        // setOpenBoughtModal(true);\r\n      });\r\n\r\n    handleUnselectAllStaked();\r\n  };\r\n\r\n  // const handleAddRestake = () => {\r\n  //   const nftToAddRestake = stakedNFTSelection.map((item) => {\r\n  //     return item.address;\r\n  //   });\r\n\r\n  //   const tokenId = stakedNFTSelection.map((item) => {\r\n  //     return item.id;\r\n  //   });\r\n\r\n  //   const contract = new ethers.Contract(\r\n  //     stakingRaijinsAddress,\r\n  //     StakingRaijins,\r\n  //     library.getSigner()\r\n  //   );\r\n  //   callContract(\r\n  //     chainId,\r\n  //     contract,\r\n  //     \"addAutoRestake\",\r\n  //     [nftToAddRestake, tokenId],\r\n  //     {\r\n  //       sentMsg: \"Add AutoRestake Raijins NFT submitted!\",\r\n  //       failMsg: \"Add AutoRestake Raijins NFT failed.\",\r\n  //       // setPendingTxns,\r\n  //     }\r\n  //   )\r\n  //     .then(async (res) => {\r\n  //       // setIsVisible(false);\r\n  //       // setOpenBuyModal(true);\r\n  //       // setOpenBoughtModal(false);\r\n  //     })\r\n  //     .finally(() => {\r\n  //       // setIsStaking(false);\r\n  //       // setOpenBuyModal(false);\r\n  //       // setOpenBoughtModal(true);\r\n  //     });\r\n\r\n  //   handleUnselectAllStaked();\r\n  // };\r\n\r\n  // const handleCancelRestake = () => {\r\n  //   const nftToCancelRestake = stakedNFTSelection.map((item) => {\r\n  //     return item.address;\r\n  //   });\r\n\r\n  //   const tokenId = stakedNFTSelection.map((item) => {\r\n  //     return item.id;\r\n  //   });\r\n\r\n  //   const contract = new ethers.Contract(\r\n  //     stakingRaijinsAddress,\r\n  //     StakingRaijins,\r\n  //     library.getSigner()\r\n  //   );\r\n  //   callContract(\r\n  //     chainId,\r\n  //     contract,\r\n  //     \"removeAutoRestake\",\r\n  //     [nftToCancelRestake, tokenId],\r\n  //     {\r\n  //       sentMsg: \"Cancel AutoRestake Raijins NFT submitted!\",\r\n  //       failMsg: \"Cancel AutoRestake Raijins NFT failed.\",\r\n  //       // setPendingTxns,\r\n  //     }\r\n  //   )\r\n  //     .then(async (res) => {\r\n  //       // setIsVisible(false);\r\n  //       // setOpenBuyModal(true);\r\n  //       // setOpenBoughtModal(false);\r\n  //     })\r\n  //     .finally(() => {\r\n  //       // setIsStaking(false);\r\n  //       // setOpenBuyModal(false);\r\n  //       // setOpenBoughtModal(true);\r\n  //     });\r\n\r\n  //   handleUnselectAllStaked();\r\n  // };\r\n\r\n  useEffect(() => {\r\n    if (needApproval) setIsWaitingForApproval(false);\r\n  }, [needApproval, active]);\r\n\r\n  useEffect(() => {\r\n    handleUnselectAllInWallet();\r\n    handleUnselectAllStaked();\r\n  }, [selectedCollection]);\r\n\r\n  return (\r\n    <div className={cx(\"raijins-staking\")}>\r\n      <SectionTitle classes=\"mb-5\">\r\n        Raijins staking for <span>Ticket</span>\r\n      </SectionTitle>\r\n      {/* <Combobox ref={regInputForCollectionId} options={COLLECTION_OPTIONS} value={selectedCollection} onChange={(selectedOption) => setSelectedCollection(selectedOption)} /> */}\r\n      <Tabs className={cx(\"raijins-staking-tabs\")}>\r\n        <TabList>\r\n          <Tab>\r\n            {/* <h6>Volumes</h6> */}\r\n            <p>\r\n              <span>{nftsInWallet ? nftsInWallet.length : 0}</span> in wallet\r\n            </p>\r\n          </Tab>\r\n          <Tab>\r\n            {/* <h6>Avatars</h6> */}\r\n            <p>\r\n              <span>{nftsStaked ? nftsStaked.length : 0}</span> staked\r\n            </p>\r\n          </Tab>\r\n        </TabList>\r\n\r\n        <TabPanel>\r\n          {isMobile ? (\r\n            <div className={cx(\"cards-wrapper\", \"mb-5\")}>\r\n              {nftsInWallet && nftsInWallet.length ? (\r\n                nftsInWallet.map((item, index) => {\r\n                  return (\r\n                    <RaijinsStakingCard\r\n                      nft={item}\r\n                      key={index}\r\n                      timeTypeInfo={timeTypeInfo}\r\n                      currentTimeType={currentTimeType}\r\n                      index={index}\r\n                      selectStatusInWallet={selectStatusInWallet}\r\n                      handleSelectNFTInWallet={handleSelectNFTInWallet}\r\n                    />\r\n                  );\r\n                })\r\n              ) : (\r\n                <div className={cx(\"p-1\", \"text-center\", \"text-danger\")}>\r\n                  No NFTs in wallet\r\n                </div>\r\n              )}\r\n            </div>\r\n          ) : (\r\n            <div className={cx(\"table-wrapper\", \"mb-5\")}>\r\n              <table>\r\n                <thead>\r\n                  <tr rowSpan={nftsInWallet ? nftsInWallet.length + 1 : 0}>\r\n                    <th>nft visual</th>\r\n                    <th>nft #</th>\r\n                    <th>selected</th>\r\n                    {/* <th>boost</th> */}\r\n                    <th>staking period</th>\r\n                    <th>estimated reward</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {nftsInWallet && nftsInWallet.length ? (\r\n                    nftsInWallet.map((item, index) => {\r\n                      return (\r\n                        <tr key={item.id}>\r\n                          <td className=\"nft-visual\">\r\n                            <img src={item.image} alt={`${item.image}`} />\r\n                          </td>\r\n                          <td className=\"w-20\">\r\n                            {item.name} #{item.id}\r\n                          </td>\r\n                          <td>\r\n                            <div className=\"raijins-checkbox\">\r\n                              <input\r\n                                type=\"checkbox\"\r\n                                id={`raijinsCheckbox-${index}`}\r\n                                checked={selectStatusInWallet[index] === true}\r\n                                onChange={() => handleSelectNFTInWallet(index)}\r\n                                value={selectStatusInWallet[index]}\r\n                              />\r\n                              <label htmlFor={`raijinsCheckbox-${index}`}></label>\r\n                            </div>\r\n                          </td>\r\n                          {/* <td className=\"percent text-success\">\r\n                        15%\r\n                        <br />\r\n                        <span className=\"text-danger\">\r\n                          ({item.days} days unlisted)\r\n                        </span>\r\n                      </td> */}\r\n                          <td className=\"days\">\r\n                            <span className=\"text-primary\">\r\n                              {timeTypeInfo[currentTimeType].period}\r\n                            </span>{\" \"}\r\n                            day\r\n                          </td>\r\n                          <td>\r\n                            <span className=\"text-primary\">{item.rewards}</span>{\" \"}\r\n                            raijins tickets\r\n                          </td>\r\n                        </tr>\r\n                      );\r\n                    })\r\n                  ) : (\r\n                    <tr>\r\n                      <td\r\n                        colSpan={6}\r\n                        className={cx(\"text-danger\", \"text-center\", \"p-1\")}\r\n                      >\r\n                        No NFTs in wallet\r\n                      </td>\r\n                    </tr>\r\n                  )}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          )}\r\n          <div className=\"btn-group\">\r\n            <button\r\n              className={cx(\"select-all-btn\")}\r\n              onClick={handleSelectAllInWallet}\r\n            >\r\n              select all\r\n            </button>\r\n            <RoundButton\r\n              key=\"stake\"\r\n              text={getTextStake()}\r\n              variant=\"primary\"\r\n              disabled={disabledStakeBtn}\r\n              onBtnClick={handleStake}\r\n            />\r\n            {timeTypeInfo.map((btn, index) => (\r\n              <RoundButton\r\n                key={btn.id}\r\n                text={btn.label}\r\n                variant={currentTimeType === index ? \"danger\" : \"transparent\"}\r\n                onBtnClick={() => handleTimeType(index)}\r\n              />\r\n            ))}\r\n          </div>\r\n        </TabPanel>\r\n        <TabPanel>\r\n          {isMobile ? (\r\n            <div className={cx(\"cards-wrapper\", \"mb-5\")}>\r\n              {nftsStaked && nftsStaked.length ? (\r\n                nftsStaked.map((item, index) => {\r\n                  return (\r\n                    <RaijinsStakedCard\r\n                      nft={item}\r\n                      index={index}\r\n                      selectStatusStaked={selectStatusStaked}\r\n                      handleSelectNFTStaked={handleSelectNFTStaked}\r\n                      timeTypeInfo={timeTypeInfo}\r\n                    />\r\n                  );\r\n                })\r\n              ) : (\r\n                <div className={cx(\"p-1\", \"text-center\", \"text-danger\")}>\r\n                  No NFTs in wallet\r\n                </div>\r\n              )}\r\n            </div>\r\n          ) : (\r\n            <div className={cx(\"table-wrapper\", \"mb-5\")}>\r\n              <table>\r\n                <thead>\r\n                  <tr rowSpan={nftsStaked ? nftsStaked.length + 1 : 0}>\r\n                    <th>nft visual</th>\r\n                    <th>nft #</th>\r\n                    <th>selected</th>\r\n                    <th>auto-restake</th>\r\n                    <th>remaining period</th>\r\n                    <th>rewards</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {nftsStaked && nftsStaked.length ? (\r\n                    nftsStaked.map((nft, index) => {\r\n                      return (\r\n                        <tr key={nft.id}>\r\n                          <td className=\"nft-visual\">\r\n                            <img src={nft.image} alt={`${nft.image}`} />\r\n                          </td>\r\n                          <td className=\"w-20\">\r\n                            {nft.name} #{nft.id}\r\n                          </td>\r\n                          <td>\r\n                            <div className=\"raijins-checkbox\">\r\n                              <input\r\n                                type=\"checkbox\"\r\n                                id={`raijinsCheckbox-${index}`}\r\n                                checked={selectStatusStaked[index] === true}\r\n                                onClick={() => handleSelectNFTStaked(index)}\r\n                                value={selectStatusStaked[index]}\r\n                              />\r\n                              <label htmlFor={`raijinsCheckbox-${index}`}></label>\r\n                            </div>\r\n                          </td>\r\n                          <td>\r\n                            <button className={cx(\"auto-restake-btn\")}>\r\n                              <img\r\n                                src={\r\n                                  nft.autoRestake === true\r\n                                    ? CircularArrowImg\r\n                                    : XImage\r\n                                }\r\n                                alt=\"arrow.png\"\r\n                                width=\"100%\"\r\n                              />\r\n                            </button>\r\n                          </td>\r\n                          <td className=\"days\">\r\n                            <span className=\"text-primary\">{nft.leftTime}</span>{\" \"}\r\n                            days left\r\n                            <br />\r\n                            <span className=\"text-danger\">\r\n                              ({timeTypeInfo[nft.timeType].period} days\r\n                              programme)\r\n                            </span>\r\n                          </td>\r\n                          <td>\r\n                            <div className=\"mb-2\">\r\n                              <span className=\"text-primary\">next reward:</span>\r\n                              <br />\r\n                              <span className=\"text-danger\">\r\n                                {nft.nextTicket}\r\n                              </span>\r\n                              {\" raijins tickets\"}\r\n                            </div>\r\n                            <div>\r\n                              <span className=\"text-primary\">\r\n                                claimable reward:\r\n                              </span>\r\n                              <br />\r\n                              <span className=\"text-danger\">\r\n                                {nft.claimableTicket}\r\n                              </span>\r\n                              {\" raijins tickets\"}\r\n                            </div>\r\n                          </td>\r\n                        </tr>\r\n                      );\r\n                    })\r\n                  ) : (\r\n                    <tr>\r\n                      <td\r\n                        colSpan={6}\r\n                        className={cx(\"text-danger\", \"text-center\", \"p-1\")}\r\n                      >\r\n                        No staked NFTs\r\n                      </td>\r\n                    </tr>\r\n                  )}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          )}\r\n          <div className=\"btn-group\">\r\n            <button\r\n              className={cx(\"select-all-btn\")}\r\n              onClick={handleSelectAllStaked}\r\n            >\r\n              select all\r\n            </button>\r\n            <RoundButton\r\n              key=\"claim\"\r\n              text=\"claim rewards\"\r\n              variant=\"transparent\"\r\n              disabled={disabledClaimBtn}\r\n              onBtnClick={handleClaim}\r\n            />\r\n            <RoundButton\r\n              key=\"unstake\"\r\n              text=\"unstake\"\r\n              variant=\"transparent\"\r\n              disabled={disabledUnStakeBtn}\r\n              onBtnClick={handleUnStake}\r\n            />\r\n            {/* <RoundButton\r\n              key=\"add_auto_restake\"\r\n              text=\"add auto restake\"\r\n              variant=\"transparent\"\r\n              disabled={disabledAddRestakeBtn}\r\n              onBtnClick={handleAddRestake}\r\n            />\r\n            <RoundButton\r\n              key=\"cancel_auto_restake\"\r\n              text=\"cancel auto restake\"\r\n              variant=\"transparent\"\r\n              disabled={disabledCancelRestakeBtn}\r\n              onBtnClick={handleCancelRestake}\r\n            /> */}\r\n          </div>\r\n        </TabPanel>\r\n      </Tabs>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RaijinsStaking;\r\n","import { useWeb3React } from \"@web3-react/core\";\r\n\r\nimport Layout from \"components/Layout\";\r\nimport EarnedTickets from \"components/Staking/EarnedTickets\";\r\nimport Hero from \"components/Staking/Ticket/Hero\";\r\nimport RaijinsStaking from \"components/Staking/Ticket/RaijinsStaking\";\r\nimport RewardCalculator from \"components/Staking/RewardCalculator\";\r\nimport StakingContainer from \"components/Staking/StakingContainer\";\r\nimport StakingDesc from \"components/Staking/StakingDesc\";\r\nimport { useMediaQuery } from \"@uidotdev/usehooks\";\r\n\r\nimport \"./index.scss\";\r\n\r\n// ================================================\r\n\r\nconst Staking = (props) => {\r\n  const { connectWallet } = props;\r\n\r\n  const { active } = useWeb3React();\r\n  const isMobile = useMediaQuery(\"only screen and (max-width: 640px)\");\r\n\r\n  return (\r\n    <Layout>\r\n      <StakingContainer>\r\n        {!active ? (\r\n          <>\r\n            <Hero connectWallet={connectWallet} />\r\n            <StakingDesc isMobile={isMobile} />\r\n            <EarnedTickets isMobile={isMobile} />\r\n            {/* <RewardCalculator isMobile={isMobile} /> */}\r\n          </>\r\n        ) : (\r\n          <RaijinsStaking isMobile={isMobile} />\r\n        )}\r\n      </StakingContainer>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default Staking;\r\n"],"names":["_ref","children","open","onCloseModal","setOpen","onOpenModal","classes","_jsxs","Modal","onClose","center","classNames","modal","concat","_jsx","onClick","className","AiOutlineClose","data","onNFTImgClick","cx","label","images","map","image","src","alt","width","day7","day30","day60","day90","day790","tableData","type","Avatar0Img","Avatar1Img","Avatar2Img","Avatar3Img","Avatar4Img","Avatar5Img","reward","isMobile","_useState","useState","_useState2","_slicedToArray","openImgModal","setOpenImgModal","_useState3","_useState4","modalImg","setModalImg","SectionTitle","datum","EarnedTicketCard","rowSpan","row","idx","RaijinsModal","props","connectWallet","PageTitle","Description","RoundButton","variant","text","onBtnClick","nft","timeTypeInfo","currentTimeType","index","selectStatusInWallet","handleSelectNFTInWallet","name","id","period","rewards","checked","onChange","value","htmlFor","selectStatusStaked","handleSelectNFTStaked","autoRestake","CircularArrowImg","XImage","leftTime","timeType","nextTicket","claimableTicket","walletNFTSelection","stakedNFTSelection","_useWeb3React","useWeb3React","active","library","account","setCurrentTimeType","disabledClaimBtn","setDisabledClaimBtn","_useState5","_useState6","disabledUnStakeBtn","setDisabledUnStakeBtn","_useState7","_useState8","setSelectStatusInWallet","_useState9","_useState10","setSelectStatusStaked","_useState11","_useState12","isApproving","setIsApproving","_useState13","_useState14","isWaitingForApproval","setIsWaitingForApproval","_useState15","_useState16","isSubmitting","setIsSubmitting","_useState17","COLLECTION_OPTIONS","selectedCollection","chainId","useChainId","stakingRaijinsAddress","getContract","nftAddresses","RAIJINS_NFTS","item","address","dataWallet","useSWR","fetcher","contractFetcher","StakingRaijins","nftsInWallet","undefined","length","i","toLowerCase","token_address","nftInfo","imageURL","imageHash","VOLUME1_METADATA","Number","token_id","toString","imageType","rarity","REWARD_AMOUNTS","filter","loadWalletNFTs","dataContract","nftsStaked","tokenId","parseInt","startTime","isClaimed","pendingTicket","formatAmount","endTime","currentTime","Date","getTime","loadStakedNFTs","_address","collectionApprovals","needApproval","filteredCollectionApprovals","isApproval","_useState19","_useState20","disabledStakeBtn","setDisabledStakeBtn","itemInfo","selectedItem","find","push","items","_loop","_loop2","handleUnselectAllInWallet","handleUnselectAllStaked","useEffect","Tabs","TabList","Tab","TabPanel","RaijinsStakingCard","colSpan","disabled","approveNFT","tokenAddress","spender","onApproveSubmitted","nftToStake","contract","ethers","getSigner","callContract","sentMsg","failMsg","then","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","res","wrap","_context","prev","next","stop","_x","apply","arguments","finally","btn","handleTimeType","RaijinsStakedCard","nftToClaim","_ref3","_callee2","_context2","_x2","nftToUnStake","_ref4","_callee3","_context3","_x3","useMediaQuery","Layout","StakingContainer","RaijinsStaking","_Fragment","Hero","StakingDesc","EarnedTickets"],"sourceRoot":""}