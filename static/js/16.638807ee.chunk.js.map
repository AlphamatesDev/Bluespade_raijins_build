{"version":3,"file":"static/js/16.638807ee.chunk.js","mappings":"sLASA,EAJqB,SAAHA,GAA+B,IAAzBC,EAAQD,EAARC,SAAUC,EAAOF,EAAPE,QAChC,OAAOC,EAAAA,EAAAA,KAAA,MAAIC,UAAWC,IAAG,gBAAiBH,GAASD,SAAEA,GACvD,C,uDCDA,IAJyB,SAAHD,GAAsB,IAAhBC,EAAQD,EAARC,SAC1B,OAAOE,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,IAAG,qBAAqBJ,SAAEA,GACnD,C,6HC+DA,EA3DoB,SAAHD,GAAcA,EAARM,SACrB,OACEH,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,IAAG,iBAuDvB,C,oJC9CO,SAASE,EAAUP,GAUd,IATVQ,EAAcR,EAAdQ,eACAC,EAAOT,EAAPS,QACAC,EAAYV,EAAZU,aACAC,EAAOX,EAAPW,QACAC,EAAOZ,EAAPY,QACAC,EAAkBb,EAAlBa,mBACAC,EAAWd,EAAXc,YACAC,EAAcf,EAAde,eACAC,EAAchB,EAAdgB,eAEAR,GAAe,GACE,IAAIS,EAAAA,GAAgBP,EAAcQ,EAAOT,EAAQU,aAE/DC,kBAAkBT,GAAS,GAC3BU,KAAI,eAAAC,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAC,SAAAC,EAAOC,GAAG,IAAAC,EAAAC,EAAA,OAAAL,EAAAA,EAAAA,KAAAM,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACRL,GAAQM,EAAAA,EAAAA,IAAetB,GAAW,MAAQe,EAAIQ,KACpDC,EAAAA,EAAYC,SACVC,EAAAA,EAAAA,MAAA,OAAArC,SAAA,CAAK,wBACiBE,EAAAA,EAAAA,KAACoC,EAAAA,EAAY,CAACC,KAAMZ,EAAM3B,SAAC,kBAC/CE,EAAAA,EAAAA,KAAA,aAGAU,GACFA,IAEEC,GAAeC,IACXc,EAAa,CACjBM,KAAMR,EAAIQ,KACVM,UAASzB,GAAc,yBAEzBD,EAAe,GAAD2B,QAAAC,EAAAA,EAAAA,GAAK7B,GAAW,CAAEe,MACjC,wBAAAE,EAAAa,OAAA,GAAAlB,EAAA,KACF,gBAAAmB,GAAA,OAAAvB,EAAAwB,MAAA,KAAAC,UAAA,EAlBI,IAmBJC,OAAM,SAACC,GAAO,IAADC,EAAAC,EAERC,EADJC,QAAQC,MAAML,GAOZG,EAJA,CAAC,2BAA4B,gEAAgEG,SACrF,QAD6FL,EACnGD,EAAEO,YAAI,IAAAN,OAAA,EAANA,EAAQT,UAIRH,EAAAA,EAAAA,MAAA,OAAArC,SAAA,CAAK,kFAEHE,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAACoC,EAAAA,EAAY,CAACC,KAAK,wBAAuBvC,SAAC,+BAG7B,QAAbkD,EAAIF,EAAER,eAAO,IAAAU,GAATA,EAAWI,SAAS,qCACtB,yBAEA,kBAETnB,EAAAA,EAAYkB,MAAMF,EACpB,IACCK,SAAQ,WACPjD,GAAe,EACjB,GACJ,C","sources":["components/SectionTitle/index.jsx","components/Staking/StakingContainer.jsx","components/Staking/StakingDesc.jsx","lib/approveNFT.tsx"],"sourcesContent":["import cx from \"classnames\";\r\nimport \"./index.scss\";\r\n\r\n// ================================================\r\n\r\nconst SectionTitle = ({ children, classes }) => {\r\n  return <h2 className={cx(\"section-title\", classes)}>{children}</h2>;\r\n};\r\n\r\nexport default SectionTitle;\r\n","import cx from \"classnames\";\r\n\r\nconst StakingContainer = ({ children }) => {\r\n  return <div className={cx(\"staking-container\")}>{children}</div>;\r\n};\r\n\r\nexport default StakingContainer;\r\n","import cx from \"classnames\";\r\n\r\nimport NiQuizImg from \"assets/images/staking/NiQuiz.png\";\r\nimport Arrow1Img from \"assets/images/common/Arrow1.png\";\r\nimport RaijinsTicketImg from \"assets/images/common/RaijinsTicket.png\";\r\nimport DangerKeepOutImg from \"assets/images/earn/DangerKeepOut.png\";\r\nimport Description from \"../Description\";\r\n\r\nconst StakingDesc = ({ isMobile }) => {\r\n  return (\r\n    <div className={cx(\"staking-desc\")}>\r\n      {/* <div className={cx(\"staking-desc-img-container\")}>\r\n        <img src={NiQuizImg} alt=\"NiQuiz.png\" width=\"100%\" />\r\n      </div> */}\r\n      {/* <div className={cx(\"staking-description-container\")}>\r\n        <Description classes=\"text-center mb-5\">\r\n          Once staked, each Raijins NFTs will provide you with Raijins Tickets. Amount\r\n          of Raijins Tickets earned will change based on the staking period length\r\n          and type of Raijins NFTs staked.\r\n        </Description>\r\n        <div\r\n          className={cx(\r\n            \"d-flex\",\r\n            \"justify-center\",\r\n            \"align-center\",\r\n            \"gap-2\",\r\n            \"mb-5\"\r\n          )}\r\n        >\r\n          <h5 className={cx(\"text-center\", \"section-title\")}>\r\n            raijins nfts <span className={cx(\"text-danger\")}>staking</span>\r\n          </h5>\r\n          <img\r\n            src={Arrow1Img}\r\n            alt=\"arrow.png\"\r\n            width={isMobile ? \"40px\" : \"80px\"}\r\n          />\r\n          <img\r\n            src={RaijinsTicketImg}\r\n            alt=\"raijins-ticket.png\"\r\n            width={isMobile ? \"100px\" : \"200px\"}\r\n          />\r\n        </div>\r\n        <div\r\n          className={cx(\"d-flex\", \"justify-between\", \"align-center\", \"gap-2\")}\r\n        >\r\n          <img\r\n            src={DangerKeepOutImg}\r\n            alt=\"danger-keep-out.png\"\r\n            width=\"40px\"\r\n            className={isMobile ? \"d-none\" : \"d-block\"}\r\n          />\r\n          <div>\r\n            <p className={cx(\"reward-boost-desc\", \"text-primary\")}>\r\n              Raijins Tickets will be awarded at the end of each staking period.\r\n              Awarded Raijins Tickets can be claimed at anytime by pressing either\r\n              the “CLAIM REWARDS” or the “UNSTAKE” buttons – the latter will\r\n              also unstake your Raijins NFTs. Staking can be undone at any moment;\r\n              however, pending Raijins Tickets will be automatically forfeit\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </div> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StakingDesc;\r\n","import { ethers } from \"ethers\";\r\nimport Token from \"abis/Raijins.json\";\r\nimport { getExplorerUrl } from \"config/chains\";\r\nimport { helperToast } from \"lib/helperToast\";\r\nimport { Web3ReactContextInterface } from \"@web3-react/core/dist/types\";\r\nimport ExternalLink from \"components/ExternalLink/ExternalLink\";\r\n\r\ntype Params = {\r\n  setIsApproving: (val: boolean) => void;\r\n  library: Web3ReactContextInterface[\"library\"];\r\n  tokenAddress: string;\r\n  spender: string;\r\n  chainId: number;\r\n  onApproveSubmitted: () => void;\r\n  pendingTxns: any[];\r\n  setPendingTxns: (txns: any[]) => void;\r\n  includeMessage?: boolean;\r\n};\r\n\r\nexport function approveNFT({\r\n  setIsApproving,\r\n  library,\r\n  tokenAddress,\r\n  spender,\r\n  chainId,\r\n  onApproveSubmitted,\r\n  pendingTxns,\r\n  setPendingTxns,\r\n  includeMessage,\r\n}: Params) {\r\n  setIsApproving(true);\r\n  const contract = new ethers.Contract(tokenAddress, Token, library.getSigner());\r\n  contract\r\n    .setApprovalForAll(spender, true)\r\n    .then(async (res) => {\r\n      const txUrl = getExplorerUrl(chainId) + \"tx/\" + res.hash;\r\n      helperToast.success(\r\n        <div>\r\n          Approval submitted! <ExternalLink href={txUrl}>View status.</ExternalLink>\r\n          <br />\r\n        </div>\r\n      );\r\n      if (onApproveSubmitted) {\r\n        onApproveSubmitted();\r\n      }\r\n      if (pendingTxns && setPendingTxns) {\r\n        const pendingTxn = {\r\n          hash: res.hash,\r\n          message: includeMessage ? `Raijins NFT Approved!` : false,\r\n        };\r\n        setPendingTxns([...pendingTxns, pendingTxn]);\r\n      }\r\n    })\r\n    .catch((e) => {\r\n      console.error(e);\r\n      let failMsg;\r\n      if (\r\n        [\"not enough funds for gas\", \"failed to execute call with revert code InsufficientGasFunds\"].includes(\r\n          e.data?.message\r\n        )\r\n      ) {\r\n        failMsg = (\r\n          <div>\r\n            There is not enough MATIC in your account on Polygon to send this transaction.\r\n            <br />\r\n            <br />\r\n            <ExternalLink href=\"https://www.mexc.com/\">Bridge MATIC to Polygon</ExternalLink>\r\n          </div>\r\n        );\r\n      } else if (e.message?.includes(\"User denied transaction signature\")) {\r\n        failMsg = `Approval was cancelled`;\r\n      } else {\r\n        failMsg = `Approval failed`;\r\n      }\r\n      helperToast.error(failMsg);\r\n    })\r\n    .finally(() => {\r\n      setIsApproving(false);\r\n    });\r\n}\r\n"],"names":["_ref","children","classes","_jsx","className","cx","isMobile","approveNFT","setIsApproving","library","tokenAddress","spender","chainId","onApproveSubmitted","pendingTxns","setPendingTxns","includeMessage","ethers","Token","getSigner","setApprovalForAll","then","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","res","txUrl","pendingTxn","wrap","_context","prev","next","getExplorerUrl","hash","helperToast","success","_jsxs","ExternalLink","href","message","concat","_toConsumableArray","stop","_x","apply","arguments","catch","e","_e$data","_e$message","failMsg","console","error","includes","data","finally"],"sourceRoot":""}