{"version":3,"file":"static/js/143.fa3b7e27.chunk.js","mappings":"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","sources":["components/Staking/Matic/HeroMatic.jsx","components/Staking/Matic/RaijinsStakingCardMatic.jsx","components/Staking/Matic/RaijinsStakedCardMatic.jsx","components/Staking/Matic/RaijinsStakingMatic.jsx","pages/StakingM/index.jsx"],"sourcesContent":["import cx from \"classnames\";\r\nimport Description from \"../../Description\";\r\nimport PageTitle from \"../../PageTitle\";\r\nimport RoundButton from \"../../RoundButton\";\r\n\r\n// import VitaImg from \"assets/images/staking/Vita.png\";\r\n// import ScrollButton from \"components/ScrollButton\";\r\n\r\nconst Hero = (props) => {\r\n  const { connectWallet } = props;\r\n\r\n  return (\r\n    <div className={cx(\"staking-hero\")}>\r\n      <div className={cx(\"page-intro\")}>\r\n        <PageTitle>\r\n          Raijins staking for <span>$MATIC</span>\r\n        </PageTitle>\r\n        <Description>\r\n          Connect your wallet to start staking your Raijins NFTs.\r\n        </Description>\r\n        <Description>For more information, scroll down</Description>\r\n        <RoundButton\r\n          variant=\"primary\"\r\n          text=\"connect wallet\"\r\n          onBtnClick={connectWallet}\r\n        />\r\n      </div>\r\n      {/* <div className={cx(\"hero-img-container\")}>\r\n        <img src={VitaImg} alt=\"vita.png\" width=\"80%\" />\r\n      </div> */}\r\n      {/* <div className={cx(\"scrollbtn-wrapper\")}>\r\n        <ScrollButton />\r\n      </div> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Hero;\r\n","import cx from \"classnames\";\r\n\r\nconst RaijinsStakingCard = ({\r\n  nft,\r\n  timeTypeInfo,\r\n  currentTimeType,\r\n  index,\r\n  selectStatusInWallet,\r\n  handleSelectNFTInWallet,\r\n}) => {\r\n  return (\r\n    <div className={cx(\"raijins-staking-card\")}>\r\n      <div className={cx(\"img-container\")}>\r\n        <img src={nft.image} alt={`${nft.image}`} width=\"100%\" />\r\n      </div>\r\n      <div>\r\n        <p className={cx(\"text-secondary\", \"uppercase\", \"mb-1\")}>\r\n          NFT #: <br />\r\n          <span className={cx(\"text-primary\", \"italic\")}>\r\n            {nft.name} #{nft.id}\r\n          </span>\r\n        </p>\r\n        {/* <p className={cx(\"text-secondary\", \"uppercase\", \"mb-1\")}>\r\n          staking period:{\" \"}\r\n          <span className={cx(\"text-primary\", \"italic\")}>\r\n            {timeTypeInfo[currentTimeType].period} day\r\n          </span>{\" \"}\r\n        </p>\r\n        <p className={cx(\"text-secondary\", \"uppercase\", \"mb-1\")}>\r\n          estimated reward:\r\n          <br />{\" \"}\r\n          <span className={cx(\"text-primary\", \"italic\")}>\r\n            {nft.rewards} raijins tickets\r\n          </span>\r\n        </p> */}\r\n      </div>\r\n      <div className=\"raijins-checkbox\">\r\n        <input\r\n          type=\"checkbox\"\r\n          id={`raijinsCheckbox-${index}`}\r\n          checked={selectStatusInWallet[index] === true}\r\n          onChange={() => handleSelectNFTInWallet(index)}\r\n          value={selectStatusInWallet[index]}\r\n        />\r\n        <label htmlFor={`raijinsCheckbox-${index}`}></label>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RaijinsStakingCard;\r\n","import cx from \"classnames\";\r\n// import CircularArrowImg from \"assets/images/common/Arrow.png\";\r\n// import XImage from \"assets/images/common/XLight.png\";\r\n\r\nconst RaijinsStakedCard = ({\r\n  nft,\r\n  selectStatusStaked,\r\n  index,\r\n  handleSelectNFTStaked,\r\n  timeTypeInfo,\r\n}) => {\r\n  return (\r\n    <div className={cx(\"raijins-staked-card\")}>\r\n      <div className={cx(\"img-container\")}>\r\n        <img src={nft.image} alt={`${nft.image}`} width=\"100%\" />\r\n      </div>\r\n      <div>\r\n        <p className={cx(\"text-secondary\", \"uppercase\", \"mb-1\")}>\r\n          NFT #: <br />\r\n          <span className={cx(\"text-primary\", \"italic\")}>\r\n            {nft.name} #{nft.id}\r\n          </span>\r\n        </p>\r\n        {/* <p className={cx(\"text-secondary\", \"uppercase\", \"mb-1\")}>\r\n          auto restake:{\" \"}\r\n          <button className={cx(\"auto-restake-btn\")}>\r\n            <img\r\n              src={nft.autoRestake === true ? CircularArrowImg : XImage}\r\n              alt=\"arrow.png\"\r\n              width=\"100%\"\r\n            />\r\n          </button>\r\n        </p>\r\n        <p className={cx(\"text-secondary\", \"uppercase\", \"mb-1\")}>\r\n          remaining period:{\" \"}\r\n          <span className={cx(\"text-primary\", \"italic\")}>\r\n            {nft.leftTime} days left\r\n            <br />({timeTypeInfo[nft.timeType].period} days programme)\r\n          </span>\r\n        </p>\r\n        <p className={cx(\"text-secondary\", \"uppercase\", \"mb-1\")}>\r\n          next reward:{\" \"}\r\n          <span className={cx(\"text-primary\", \"italic\")}>\r\n            {nft.nextTicket} raijins tickets\r\n          </span>\r\n        </p>\r\n        <p className={cx(\"text-secondary\", \"uppercase\", \"mb-1\")}>\r\n          claimable reward:{\" \"}\r\n          <span className={cx(\"text-primary\", \"italic\")}>\r\n            {nft.claimableTicket} raijins tickets\r\n          </span>\r\n        </p> */}\r\n      </div>\r\n      <div className=\"raijins-checkbox\">\r\n        <input\r\n          type=\"checkbox\"\r\n          id={`raijinsCheckbox-${index}`}\r\n          checked={selectStatusStaked[index] === true}\r\n          onChange={() => handleSelectNFTStaked(index)}\r\n          value={selectStatusStaked[index]}\r\n        />\r\n        <label htmlFor={`raijinsCheckbox-${index}`}></label>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RaijinsStakedCard;\r\n","import { useWeb3React } from \"@web3-react/core\";\r\nimport cx from \"classnames\";\r\nimport useSWR from \"swr\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { ethers } from \"ethers\";\r\n\r\nimport SectionTitle from \"../../SectionTitle\";\r\nimport { Tab, Tabs, TabList, TabPanel } from \"react-tabs\";\r\nimport \"react-tabs/style/react-tabs.css\";\r\n// import TableDecoImg from \"assets/images/staking/tableDeco.png\";\r\nimport CircularArrowImg from \"assets/images/common/Arrow.png\";\r\nimport XImage from \"assets/images/common/XLight.png\";\r\nimport RoundButton from \"../../RoundButton\";\r\nimport { getContract } from \"config/contracts\";\r\nimport { RAIJINS_NFTS, REWARD_AMOUNTS, VOLUME1_METADATA, COLLECTION_OPTIONS } from \"config/staking\";\r\nimport { callContract, contractFetcher } from \"lib/contracts\";\r\nimport { useChainId } from \"lib/chains\";\r\nimport { approveNFT } from \"lib/approveNFT\";\r\nimport StakingRaijinsMatic from \"abis/StakingRaijinsMatic.json\";\r\nimport Raijins from \"abis/Raijins.json\";\r\nimport RaijinsStakingCard from \"./RaijinsStakingCardMatic\";\r\nimport RaijinsStakedCard from \"./RaijinsStakedCardMatic\";\r\n// import Combobox from '../Combobox/Combobox';\r\nimport {\r\n  formatAmount,\r\n} from \"lib/numbers\";\r\n\r\nconst loadWalletNFTs = (dataWallet) => {\r\n  if (dataWallet === undefined) return [];\r\n\r\n  if (dataWallet.length === 0) return [];\r\n\r\n  const ret = dataWallet.map((item) => {\r\n    let index = -1;\r\n\r\n    for (let i = 0; i < RAIJINS_NFTS.length; i++) {\r\n      if (\r\n        RAIJINS_NFTS[i].address.toLowerCase() === item.token_address.toLowerCase()\r\n      ) {\r\n        index = i;\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (index === -1) return null;\r\n\r\n    const nftInfo = RAIJINS_NFTS[index];\r\n    let imageURL = \"\";\r\n    if (nftInfo.name === \"LIFE OF HEL - Volume 1\")\r\n      imageURL = `${nftInfo.imageHash}${VOLUME1_METADATA[Number(item.token_id.toString()) - 1]\r\n        }.${nftInfo.imageType}`;\r\n    else\r\n      imageURL = `${nftInfo.imageHash}${Number(item.token_id.toString())}.${nftInfo.imageType\r\n        }`;\r\n\r\n    return {\r\n      id: item.token_id.toString(),\r\n      name: item.name,\r\n      address: nftInfo.address,\r\n      image: imageURL\r\n    };\r\n  });\r\n\r\n  const finalArray = ret.filter((item) => item !== null);\r\n  return finalArray;\r\n};\r\n\r\nconst loadStakedNFTs = (dataContract) => {\r\n  if (dataContract === undefined) return [];\r\n\r\n  if (dataContract.length === 0) return [];\r\n\r\n  const ret = dataContract.map((item) => {\r\n    let index = -1;\r\n\r\n    for (let i = 0; i < RAIJINS_NFTS.length; i++) {\r\n      if (RAIJINS_NFTS[i].address.toLowerCase() === item[0].toLowerCase()) {\r\n        index = i;\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (index === -1) return null;\r\n\r\n    const nftInfo = RAIJINS_NFTS[index];\r\n    const tokenId = parseInt(item[1].toString());\r\n\r\n    let imageURL = \"\";\r\n    if (nftInfo.name === \"LIFE OF HEL - Volume 1\")\r\n      imageURL = `${nftInfo.imageHash}${VOLUME1_METADATA[Number(item[1].toString()) - 1]\r\n        }.${nftInfo.imageType}`;\r\n    else\r\n      imageURL = `${nftInfo.imageHash}${Number(item[1].toString())}.${nftInfo.imageType\r\n        }`;\r\n\r\n    return {\r\n      name: nftInfo.name,\r\n      image: imageURL,\r\n      address: nftInfo.address,\r\n      id: tokenId\r\n    };\r\n  });\r\n\r\n  const finalArray = ret.filter((item) => item !== null);\r\n  return finalArray;\r\n};\r\n\r\nlet walletNFTSelection = [];\r\nlet stakedNFTSelection = [];\r\n\r\nconst RaijinsStaking = ({ isMobile }) => {\r\n  const { active, library, account } = useWeb3React();\r\n\r\n  const [disabledClaimBtn, setDisabledClaimBtn] = useState(true);\r\n  const [disabledUnStakeBtn, setDisabledUnStakeBtn] = useState(true);\r\n  // const [disabledAddRestakeBtn, setDisabledAddRestakeBtn] = useState(true);\r\n  // const [disabledCancelRestakeBtn, setDisabledCancelRestakeBtn] = useState(true);\r\n  const [selectStatusInWallet, setSelectStatusInWallet] = useState([]);\r\n  const [selectStatusStaked, setSelectStatusStaked] = useState([]);\r\n  const [isApproving, setIsApproving] = useState(false);\r\n  const [isWaitingForApproval, setIsWaitingForApproval] = useState(false);\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const [selectedCollection/*, setSelectedCollection */] = useState(COLLECTION_OPTIONS[0]);\r\n\r\n  const { chainId } = useChainId();\r\n  const stakingRaijinsMaticAddress = getContract(chainId, \"StakingRaijinsMatic\");\r\n  const raijinsAddress = getContract(chainId, \"Raijins\");\r\n\r\n  const nftAddresses = RAIJINS_NFTS.map((item) => item.address);\r\n  //////////Reward Status/////////////////////////////////////////////////////////////////////////////////////\r\n  const { data: nftBalance } = useSWR(\r\n    active &&\r\n    raijinsAddress && [\r\n      active,\r\n      chainId,\r\n      raijinsAddress,\r\n      \"balanceOf\",\r\n      stakingRaijinsMaticAddress\r\n    ],\r\n    { fetcher: contractFetcher(library, Raijins) }\r\n  );\r\n\r\n  const { data: totalDistributedMatic } = useSWR(\r\n    active &&\r\n    stakingRaijinsMaticAddress && [\r\n      active,\r\n      chainId,\r\n      stakingRaijinsMaticAddress,\r\n      \"totalDistributed\"\r\n    ],\r\n    { fetcher: contractFetcher(library, StakingRaijinsMatic) }\r\n  );\r\n\r\n  const { data: userSatus } = useSWR(\r\n    active &&\r\n    stakingRaijinsMaticAddress && [\r\n      active,\r\n      chainId,\r\n      stakingRaijinsMaticAddress,\r\n      \"getUserStatus\",\r\n      raijinsAddress,\r\n      account\r\n    ],\r\n    { fetcher: contractFetcher(library, StakingRaijinsMatic) }\r\n  );\r\n\r\n  //////////Reading Wallet///////////////////////////////////////////////////////////////////////////////////////////////////\r\n  const { data: dataWallet } = useSWR(\r\n    active &&\r\n    stakingRaijinsMaticAddress && [\r\n      active,\r\n      chainId,\r\n      stakingRaijinsMaticAddress,\r\n      \"getTokensInWallet\",\r\n      nftAddresses,\r\n      account\r\n    ],\r\n    { fetcher: contractFetcher(library, StakingRaijinsMatic) }\r\n  );\r\n  const filteredDataWallet = dataWallet ? dataWallet.filter((item) => item.token_address.toLowerCase() === selectedCollection.address.toLowerCase()) : [];\r\n  let nftsInWallet = loadWalletNFTs(filteredDataWallet);\r\n  //////////Reading Staking Contract////////////////////////////////////////////////////////////////////////////////////////////////////\r\n  const { data: dataContract } = useSWR(\r\n    active &&\r\n    stakingRaijinsMaticAddress && [\r\n      active,\r\n      chainId,\r\n      stakingRaijinsMaticAddress,\r\n      \"getStakingInfo\",\r\n      nftAddresses,\r\n      account,\r\n    ],\r\n    { fetcher: contractFetcher(library, StakingRaijinsMatic) }\r\n  );\r\n  const filteredDataContract = dataContract ? dataContract.filter((item) => item._address.toLowerCase() === selectedCollection.address.toLowerCase()) : [];\r\n  const nftsStaked = loadStakedNFTs(filteredDataContract);\r\n\r\n  /////////Approval Status/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n  const { data: collectionApprovals } = useSWR(\r\n    active &&\r\n    stakingRaijinsMaticAddress && [\r\n      active,\r\n      chainId,\r\n      stakingRaijinsMaticAddress,\r\n      \"getApprovalStatus\",\r\n      nftAddresses,\r\n      account,\r\n    ],\r\n    { fetcher: contractFetcher(library, StakingRaijinsMatic) }\r\n  );\r\n\r\n  let needApproval = true;\r\n  if (collectionApprovals) {\r\n    const filteredCollectionApprovals = collectionApprovals ? collectionApprovals.filter((item) => item.token_address.toLowerCase() === selectedCollection.address.toLowerCase()) : [];\r\n    needApproval = !filteredCollectionApprovals[0].isApproval;\r\n  }\r\n\r\n  const [disabledStakeBtn, setDisabledStakeBtn] = useState(!needApproval);\r\n\r\n  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n  const handleSelectNFTInWallet = (index) => {\r\n    const itemInfo = nftsInWallet[index];\r\n\r\n    const selectedItem = walletNFTSelection.find(\r\n      (item) =>\r\n        item.id === itemInfo.id &&\r\n        item.address === itemInfo.address.toLowerCase()\r\n    );\r\n    if (selectedItem === undefined)\r\n      walletNFTSelection.push({\r\n        id: itemInfo.id,\r\n        address: itemInfo.address.toLowerCase(),\r\n      });\r\n    else\r\n      walletNFTSelection = walletNFTSelection.filter(\r\n        (item) => item !== selectedItem\r\n      );\r\n\r\n    let items = [];\r\n    for (let i = 0; i < nftsInWallet.length; i++) {\r\n      const itemInfo = nftsInWallet[i];\r\n      const currentItem = walletNFTSelection.find(\r\n        (item) =>\r\n          item.id === itemInfo.id &&\r\n          item.address === itemInfo.address.toLowerCase()\r\n      );\r\n      if (currentItem === undefined) items.push(false);\r\n      else items.push(true);\r\n    }\r\n    setSelectStatusInWallet(items);\r\n\r\n    if (walletNFTSelection.length === 0 && !needApproval)\r\n      setDisabledStakeBtn(true);\r\n    else setDisabledStakeBtn(false);\r\n  };\r\n\r\n  const handleSelectNFTStaked = (index) => {\r\n    const itemInfo = nftsStaked[index];\r\n\r\n    const selectedItem = stakedNFTSelection.find(\r\n      (item) =>\r\n        item.id === itemInfo.id &&\r\n        item.address === itemInfo.address.toLowerCase()\r\n    );\r\n    if (selectedItem === undefined)\r\n      stakedNFTSelection.push({\r\n        id: itemInfo.id,\r\n        address: itemInfo.address.toLowerCase(),\r\n      });\r\n    else\r\n      stakedNFTSelection = stakedNFTSelection.filter(\r\n        (item) => item !== selectedItem\r\n      );\r\n\r\n    let items = [];\r\n    for (let i = 0; i < nftsStaked.length; i++) {\r\n      const itemInfo = nftsStaked[i];\r\n      const currentItem = stakedNFTSelection.find(\r\n        (item) =>\r\n          item.id === itemInfo.id &&\r\n          item.address === itemInfo.address.toLowerCase()\r\n      );\r\n      if (currentItem === undefined) items.push(false);\r\n      else items.push(true);\r\n    }\r\n    setSelectStatusStaked(items);\r\n\r\n    if (stakedNFTSelection.length === 0) {\r\n      setDisabledUnStakeBtn(true);\r\n      // setDisabledAddRestakeBtn(true);\r\n      // setDisabledCancelRestakeBtn(true);\r\n    } else {\r\n      setDisabledUnStakeBtn(false);\r\n      // setDisabledAddRestakeBtn(false);\r\n      // setDisabledCancelRestakeBtn(false);\r\n    }\r\n  };\r\n\r\n  const handleSelectAllInWallet = () => {\r\n    let items = [];\r\n    walletNFTSelection = [];\r\n    for (let i = 0; i < nftsInWallet.length; i++) {\r\n      const itemInfo = nftsInWallet[i];\r\n      walletNFTSelection.push({\r\n        id: itemInfo.id,\r\n        address: itemInfo.address.toLowerCase(),\r\n      });\r\n      items.push(true);\r\n    }\r\n    setSelectStatusInWallet(items);\r\n\r\n    setDisabledStakeBtn(false);\r\n  };\r\n\r\n  const handleUnselectAllInWallet = () => {\r\n    let items = [];\r\n    walletNFTSelection = [];\r\n    setSelectStatusInWallet(items);\r\n    setDisabledStakeBtn(true);\r\n  };\r\n\r\n  const handleSelectAllStaked = () => {\r\n    let items = [];\r\n    stakedNFTSelection = [];\r\n    for (let i = 0; i < nftsStaked.length; i++) {\r\n      const itemInfo = nftsStaked[i];\r\n      stakedNFTSelection.push({\r\n        id: itemInfo.id,\r\n        address: itemInfo.address.toLowerCase(),\r\n      });\r\n      items.push(true);\r\n    }\r\n    setSelectStatusStaked(items);\r\n\r\n    setDisabledUnStakeBtn(false);\r\n    // setDisabledAddRestakeBtn(false);\r\n    // setDisabledCancelRestakeBtn(false);\r\n  };\r\n\r\n  const handleUnselectAllStaked = () => {\r\n    let items = [];\r\n    stakedNFTSelection = [];\r\n    setSelectStatusStaked(items);\r\n\r\n    setDisabledUnStakeBtn(true);\r\n    // setDisabledAddRestakeBtn(true);\r\n    // setDisabledCancelRestakeBtn(true);\r\n  };\r\n\r\n  const approveFromNFT = () => {\r\n    if (needApproval) {\r\n      approveNFT({\r\n        setIsApproving,\r\n        library,\r\n        tokenAddress: selectedCollection.address,\r\n        spender: stakingRaijinsMaticAddress,\r\n        chainId: chainId,\r\n        onApproveSubmitted: () => {\r\n          setIsWaitingForApproval(true);\r\n        },\r\n      });\r\n\r\n      return;\r\n    }\r\n  };\r\n\r\n  const handleStake = () => {\r\n    if (needApproval) {\r\n      approveFromNFT();\r\n      return;\r\n    }\r\n\r\n    setIsSubmitting(true);\r\n\r\n    const nftToStake = walletNFTSelection.map((item) => {\r\n      return item.address;\r\n    });\r\n\r\n    const tokenId = walletNFTSelection.map((item) => {\r\n      return item.id;\r\n    });\r\n\r\n    const contract = new ethers.Contract(\r\n      stakingRaijinsMaticAddress,\r\n      StakingRaijinsMatic,\r\n      library.getSigner()\r\n    );\r\n    callContract(chainId, contract, \"stake\", [nftToStake, tokenId], {\r\n      sentMsg: \"Staking Raijins NFT submitted!\",\r\n      failMsg: \"Staking Raijins NFT failed.\",\r\n      // setPendingTxns,\r\n    })\r\n      .then(async (res) => {\r\n        // setIsVisible(false);\r\n        // setOpenBuyModal(true);\r\n        // setOpenBoughtModal(false);\r\n      })\r\n      .finally(() => {\r\n        // setIsStaking(false);\r\n        // setOpenBuyModal(false);\r\n        // setOpenBoughtModal(true);\r\n        setIsSubmitting(false);\r\n      });\r\n\r\n    handleUnselectAllInWallet();\r\n  };\r\n\r\n  const getTextStake = () => {\r\n    if (needApproval && isWaitingForApproval) {\r\n      return \"Waiting for Approval...\";\r\n    }\r\n    if (isApproving) {\r\n      return \"Approving\";\r\n    }\r\n    if (needApproval) {\r\n      return \"Approve\";\r\n    }\r\n\r\n    if (isSubmitting) {\r\n      return \"Staking...\";\r\n    }\r\n\r\n    return \"Stake\";\r\n  };\r\n\r\n  const handleClaim = () => {\r\n    const contract = new ethers.Contract(\r\n      stakingRaijinsMaticAddress,\r\n      StakingRaijinsMatic,\r\n      library.getSigner()\r\n    );\r\n    callContract(chainId, contract, \"claimRewards\", [raijinsAddress], {\r\n      sentMsg: \"Claim Raijins Ticket submitted!\",\r\n      failMsg: \"Claim Raijins Ticket failed.\",\r\n      // setPendingTxns,\r\n    })\r\n      .then(async (res) => {\r\n        // setIsVisible(false);\r\n        // setOpenBuyModal(true);\r\n        // setOpenBoughtModal(false);\r\n      })\r\n      .finally(() => {\r\n        // setIsStaking(false);\r\n        // setOpenBuyModal(false);\r\n        // setOpenBoughtModal(true);\r\n      });\r\n\r\n    handleUnselectAllStaked();\r\n  };\r\n\r\n  const handleUnStake = () => {\r\n    const nftToUnStake = stakedNFTSelection.map((item) => {\r\n      return item.address;\r\n    });\r\n\r\n    const tokenId = stakedNFTSelection.map((item) => {\r\n      return item.id;\r\n    });\r\n\r\n    const contract = new ethers.Contract(\r\n      stakingRaijinsMaticAddress,\r\n      StakingRaijinsMatic,\r\n      library.getSigner()\r\n    );\r\n    callContract(chainId, contract, \"unStake\", [nftToUnStake, tokenId], {\r\n      sentMsg: \"Unstake Raijins NFT submitted!\",\r\n      failMsg: \"Unstake Raijins NFT failed.\",\r\n      // setPendingTxns,\r\n    })\r\n      .then(async (res) => {\r\n        // setIsVisible(false);\r\n        // setOpenBuyModal(true);\r\n        // setOpenBoughtModal(false);\r\n      })\r\n      .finally(() => {\r\n        // setIsStaking(false);\r\n        // setOpenBuyModal(false);\r\n        // setOpenBoughtModal(true);\r\n      });\r\n\r\n    handleUnselectAllStaked();\r\n  };\r\n\r\n  // const handleAddRestake = () => {\r\n  //   const nftToAddRestake = stakedNFTSelection.map((item) => {\r\n  //     return item.address;\r\n  //   });\r\n\r\n  //   const tokenId = stakedNFTSelection.map((item) => {\r\n  //     return item.id;\r\n  //   });\r\n\r\n  //   const contract = new ethers.Contract(\r\n  //     stakingRaijinsMaticAddress,\r\n  //     StakingRaijins,\r\n  //     library.getSigner()\r\n  //   );\r\n  //   callContract(\r\n  //     chainId,\r\n  //     contract,\r\n  //     \"addAutoRestake\",\r\n  //     [nftToAddRestake, tokenId],\r\n  //     {\r\n  //       sentMsg: \"Add AutoRestake Raijins NFT submitted!\",\r\n  //       failMsg: \"Add AutoRestake Raijins NFT failed.\",\r\n  //       // setPendingTxns,\r\n  //     }\r\n  //   )\r\n  //     .then(async (res) => {\r\n  //       // setIsVisible(false);\r\n  //       // setOpenBuyModal(true);\r\n  //       // setOpenBoughtModal(false);\r\n  //     })\r\n  //     .finally(() => {\r\n  //       // setIsStaking(false);\r\n  //       // setOpenBuyModal(false);\r\n  //       // setOpenBoughtModal(true);\r\n  //     });\r\n\r\n  //   handleUnselectAllStaked();\r\n  // };\r\n\r\n  // const handleCancelRestake = () => {\r\n  //   const nftToCancelRestake = stakedNFTSelection.map((item) => {\r\n  //     return item.address;\r\n  //   });\r\n\r\n  //   const tokenId = stakedNFTSelection.map((item) => {\r\n  //     return item.id;\r\n  //   });\r\n\r\n  //   const contract = new ethers.Contract(\r\n  //     stakingRaijinsMaticAddress,\r\n  //     StakingRaijins,\r\n  //     library.getSigner()\r\n  //   );\r\n  //   callContract(\r\n  //     chainId,\r\n  //     contract,\r\n  //     \"removeAutoRestake\",\r\n  //     [nftToCancelRestake, tokenId],\r\n  //     {\r\n  //       sentMsg: \"Cancel AutoRestake Raijins NFT submitted!\",\r\n  //       failMsg: \"Cancel AutoRestake Raijins NFT failed.\",\r\n  //       // setPendingTxns,\r\n  //     }\r\n  //   )\r\n  //     .then(async (res) => {\r\n  //       // setIsVisible(false);\r\n  //       // setOpenBuyModal(true);\r\n  //       // setOpenBoughtModal(false);\r\n  //     })\r\n  //     .finally(() => {\r\n  //       // setIsStaking(false);\r\n  //       // setOpenBuyModal(false);\r\n  //       // setOpenBoughtModal(true);\r\n  //     });\r\n\r\n  //   handleUnselectAllStaked();\r\n  // };\r\n\r\n  useEffect(() => {\r\n    if (needApproval) setIsWaitingForApproval(false);\r\n  }, [needApproval, active]);\r\n\r\n  useEffect(() => {\r\n    if (parseFloat(userSatus?._pendingReward?.toString()) > 0)\r\n      setDisabledClaimBtn(false);\r\n    else\r\n      setDisabledClaimBtn(true);\r\n  }, [userSatus?._pendingReward])\r\n\r\n  useEffect(() => {\r\n    handleUnselectAllInWallet();\r\n    handleUnselectAllStaked();\r\n  }, [selectedCollection]);\r\n\r\n  return (\r\n    <div className={cx(\"raijins-staking\")}>\r\n      <SectionTitle classes=\"mb-5\">\r\n        Raijins staking for <span>$MATIC</span>\r\n      </SectionTitle>\r\n      <div className={cx(\"raijins-staking-info\")}>\r\n        <div className={cx(\"raijins-staking-info-left\")}>Total Raijins Staked:</div>\r\n        <div className={cx(\"raijins-staking-info-right\")}>{nftBalance?.toString()}</div>\r\n      </div>\r\n      <div className={cx(\"raijins-staking-info\")}>\r\n        <div className={cx(\"raijins-staking-info-left\")}>Total Distributed Matic:</div>\r\n        <div className={cx(\"raijins-staking-info-right\")}>{formatAmount(totalDistributedMatic?.toString(), 18, 2)}</div>\r\n      </div>\r\n      <div className={cx(\"raijins-staking-info\")}>\r\n        <div className={cx(\"raijins-staking-info-left\")}>Your Claimed Amount:</div>\r\n        <div className={cx(\"raijins-staking-info-right\")}>{formatAmount(userSatus?._claimedReward?.toString(), 18, 2)}</div>\r\n      </div>\r\n      <div className={cx(\"raijins-staking-info\")}>\r\n        <div className={cx(\"raijins-staking-info-left\")}>Your Claimable Amount:</div>\r\n        <div className={cx(\"raijins-staking-info-right\")}>{formatAmount(userSatus?._pendingReward?.toString(), 18, 2)}</div>\r\n      </div>\r\n      <div className={cx(\"raijins-staking-info\")}>\r\n        <div className={cx(\"raijins-staking-info-claim\")}>\r\n          <RoundButton\r\n            key=\"claim\"\r\n            text=\"claim rewards\"\r\n            variant=\"transparent\"\r\n            disabled={disabledClaimBtn}\r\n            onBtnClick={handleClaim}\r\n          />\r\n        </div>\r\n      </div>\r\n      <Tabs className={cx(\"raijins-staking-tabs\")}>\r\n        <TabList>\r\n          <Tab>\r\n            {/* <h6>Volumes</h6> */}\r\n            <p>\r\n              <span>{nftsInWallet ? nftsInWallet.length : 0}</span> in wallet\r\n            </p>\r\n          </Tab>\r\n          <Tab>\r\n            {/* <h6>Avatars</h6> */}\r\n            <p>\r\n              <span>{nftsStaked ? nftsStaked.length : 0}</span> staked\r\n            </p>\r\n          </Tab>\r\n        </TabList>\r\n\r\n        <TabPanel>\r\n          {isMobile ? (\r\n            <div className={cx(\"cards-wrapper\", \"mb-5\")}>\r\n              {nftsInWallet && nftsInWallet.length ? (\r\n                nftsInWallet.map((item, index) => {\r\n                  return (\r\n                    <RaijinsStakingCard\r\n                      nft={item}\r\n                      key={index}\r\n                      index={index}\r\n                      selectStatusInWallet={selectStatusInWallet}\r\n                      handleSelectNFTInWallet={handleSelectNFTInWallet}\r\n                    />\r\n                  );\r\n                })\r\n              ) : (\r\n                <div className={cx(\"p-1\", \"text-center\", \"text-danger\")}>\r\n                  No NFTs in wallet\r\n                </div>\r\n              )}\r\n            </div>\r\n          ) : (\r\n            <div className={cx(\"table-wrapper\", \"mb-5\")}>\r\n              <table>\r\n                <thead>\r\n                  <tr rowSpan={nftsInWallet ? nftsInWallet.length + 1 : 0}>\r\n                    <th>nft visual</th>\r\n                    <th>nft #</th>\r\n                    <th>selected</th>\r\n                    {/* <th>boost</th> */}\r\n                    {/* <th>staking period</th>\r\n                    <th>estimated reward</th> */}\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {nftsInWallet && nftsInWallet.length ? (\r\n                    nftsInWallet.map((item, index) => {\r\n                      return (\r\n                        <tr key={item.id}>\r\n                          <td className=\"nft-visual\">\r\n                            <img src={item.image} alt={`${item.image}`} />\r\n                          </td>\r\n                          <td className=\"w-20\">\r\n                            {item.name} #{item.id}\r\n                          </td>\r\n                          <td>\r\n                            <div className=\"raijins-checkbox\">\r\n                              <input\r\n                                type=\"checkbox\"\r\n                                id={`raijinsCheckbox-${index}`}\r\n                                checked={selectStatusInWallet[index] === true}\r\n                                onChange={() => handleSelectNFTInWallet(index)}\r\n                                value={selectStatusInWallet[index]}\r\n                              />\r\n                              <label htmlFor={`raijinsCheckbox-${index}`}></label>\r\n                            </div>\r\n                          </td>\r\n                        </tr>\r\n                      );\r\n                    })\r\n                  ) : (\r\n                    <tr>\r\n                      <td\r\n                        colSpan={6}\r\n                        className={cx(\"text-danger\", \"text-center\", \"p-1\")}\r\n                      >\r\n                        No NFTs in wallet\r\n                      </td>\r\n                    </tr>\r\n                  )}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          )}\r\n          <div className=\"btn-group\">\r\n            <button\r\n              className={cx(\"select-all-btn\")}\r\n              onClick={handleSelectAllInWallet}\r\n            >\r\n              select all\r\n            </button>\r\n            <RoundButton\r\n              key=\"stake\"\r\n              text={getTextStake()}\r\n              variant=\"primary\"\r\n              disabled={disabledStakeBtn}\r\n              onBtnClick={handleStake}\r\n            />\r\n          </div>\r\n        </TabPanel>\r\n        <TabPanel>\r\n          {isMobile ? (\r\n            <div className={cx(\"cards-wrapper\", \"mb-5\")}>\r\n              {nftsStaked && nftsStaked.length ? (\r\n                nftsStaked.map((item, index) => {\r\n                  return (\r\n                    <RaijinsStakedCard\r\n                      nft={item}\r\n                      index={index}\r\n                      selectStatusStaked={selectStatusStaked}\r\n                      handleSelectNFTStaked={handleSelectNFTStaked}\r\n                    />\r\n                  );\r\n                })\r\n              ) : (\r\n                <div className={cx(\"p-1\", \"text-center\", \"text-danger\")}>\r\n                  No NFTs in wallet\r\n                </div>\r\n              )}\r\n            </div>\r\n          ) : (\r\n            <div className={cx(\"table-wrapper\", \"mb-5\")}>\r\n              <table>\r\n                <thead>\r\n                  <tr rowSpan={nftsStaked ? nftsStaked.length + 1 : 0}>\r\n                    <th>nft visual</th>\r\n                    <th>nft #</th>\r\n                    <th>selected</th>\r\n                    {/* <th>auto-restake</th>\r\n                    <th>remaining period</th>\r\n                    <th>rewards</th> */}\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {nftsStaked && nftsStaked.length ? (\r\n                    nftsStaked.map((nft, index) => {\r\n                      return (\r\n                        <tr key={nft.id}>\r\n                          <td className=\"nft-visual\">\r\n                            <img src={nft.image} alt={`${nft.image}`} />\r\n                          </td>\r\n                          <td className=\"w-20\">\r\n                            {nft.name} #{nft.id}\r\n                          </td>\r\n                          <td>\r\n                            <div className=\"raijins-checkbox\">\r\n                              <input\r\n                                type=\"checkbox\"\r\n                                id={`raijinsCheckbox-${index}`}\r\n                                checked={selectStatusStaked[index] === true}\r\n                                onClick={() => handleSelectNFTStaked(index)}\r\n                                value={selectStatusStaked[index]}\r\n                              />\r\n                              <label htmlFor={`raijinsCheckbox-${index}`}></label>\r\n                            </div>\r\n                          </td>\r\n                        </tr>\r\n                      );\r\n                    })\r\n                  ) : (\r\n                    <tr>\r\n                      <td\r\n                        colSpan={6}\r\n                        className={cx(\"text-danger\", \"text-center\", \"p-1\")}\r\n                      >\r\n                        No staked NFTs\r\n                      </td>\r\n                    </tr>\r\n                  )}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          )}\r\n          <div className=\"btn-group\">\r\n            <button\r\n              className={cx(\"select-all-btn\")}\r\n              onClick={handleSelectAllStaked}\r\n            >\r\n              select all\r\n            </button>\r\n            <RoundButton\r\n              key=\"unstake\"\r\n              text=\"unstake\"\r\n              variant=\"transparent\"\r\n              disabled={disabledUnStakeBtn}\r\n              onBtnClick={handleUnStake}\r\n            />\r\n            {/* <RoundButton\r\n              key=\"add_auto_restake\"\r\n              text=\"add auto restake\"\r\n              variant=\"transparent\"\r\n              disabled={disabledAddRestakeBtn}\r\n              onBtnClick={handleAddRestake}\r\n            />\r\n            <RoundButton\r\n              key=\"cancel_auto_restake\"\r\n              text=\"cancel auto restake\"\r\n              variant=\"transparent\"\r\n              disabled={disabledCancelRestakeBtn}\r\n              onBtnClick={handleCancelRestake}\r\n            /> */}\r\n          </div>\r\n        </TabPanel>\r\n      </Tabs>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RaijinsStaking;\r\n","import { useWeb3React } from \"@web3-react/core\";\r\n\r\nimport Layout from \"components/Layout\";\r\nimport Hero from \"components/Staking/Matic/HeroMatic\";\r\nimport RaijinsStaking from \"components/Staking/Matic/RaijinsStakingMatic\";\r\nimport StakingContainer from \"components/Staking/StakingContainer\";\r\nimport StakingDesc from \"components/Staking/StakingDesc\";\r\nimport { useMediaQuery } from \"@uidotdev/usehooks\";\r\n\r\nimport \"./index.scss\";\r\n\r\n// ================================================\r\n\r\nconst StakingM = (props) => {\r\n  const { connectWallet } = props;\r\n\r\n  const { active } = useWeb3React();\r\n  const isMobile = useMediaQuery(\"only screen and (max-width: 640px)\");\r\n\r\n  return (\r\n    <Layout>\r\n      <StakingContainer>\r\n        {!active ? (\r\n          <>\r\n            <Hero connectWallet={connectWallet} />\r\n            <StakingDesc isMobile={isMobile} />\r\n          </>\r\n        ) : (\r\n          <RaijinsStaking isMobile={isMobile} />\r\n        )}\r\n      </StakingContainer>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default StakingM;\r\n"],"names":["props","connectWallet","_jsx","className","cx","children","_jsxs","PageTitle","Description","RoundButton","variant","text","onBtnClick","_ref","nft","index","timeTypeInfo","currentTimeType","selectStatusInWallet","handleSelectNFTInWallet","src","image","alt","concat","width","name","id","type","checked","onChange","value","htmlFor","selectStatusStaked","handleSelectNFTStaked","walletNFTSelection","stakedNFTSelection","_userSatus$_claimedRe","_userSatus$_pendingRe2","isMobile","_useWeb3React","useWeb3React","active","library","account","_useState","useState","_useState2","_slicedToArray","disabledClaimBtn","setDisabledClaimBtn","_useState3","_useState4","disabledUnStakeBtn","setDisabledUnStakeBtn","_useState5","_useState6","setSelectStatusInWallet","_useState7","_useState8","setSelectStatusStaked","_useState9","_useState10","isApproving","setIsApproving","_useState11","_useState12","isWaitingForApproval","setIsWaitingForApproval","_useState13","_useState14","isSubmitting","setIsSubmitting","_useState15","COLLECTION_OPTIONS","selectedCollection","chainId","useChainId","stakingRaijinsMaticAddress","getContract","raijinsAddress","nftAddresses","RAIJINS_NFTS","map","item","address","nftBalance","useSWR","fetcher","contractFetcher","Raijins","data","totalDistributedMatic","StakingRaijinsMatic","userSatus","dataWallet","nftsInWallet","undefined","length","i","toLowerCase","token_address","nftInfo","imageURL","imageHash","VOLUME1_METADATA","Number","token_id","toString","imageType","filter","loadWalletNFTs","dataContract","nftsStaked","tokenId","parseInt","loadStakedNFTs","_address","collectionApprovals","needApproval","filteredCollectionApprovals","isApproval","_useState17","_useState18","disabledStakeBtn","setDisabledStakeBtn","itemInfo","selectedItem","find","push","items","_loop","_loop2","handleUnselectAllInWallet","handleUnselectAllStaked","useEffect","_userSatus$_pendingRe","parseFloat","_pendingReward","SectionTitle","classes","formatAmount","_claimedReward","disabled","contract","ethers","getSigner","callContract","sentMsg","failMsg","then","_ref3","_asyncToGenerator","_regeneratorRuntime","mark","_callee2","res","wrap","_context2","prev","next","stop","_x2","apply","arguments","finally","Tabs","TabList","Tab","TabPanel","RaijinsStakingCard","rowSpan","colSpan","onClick","approveNFT","tokenAddress","spender","onApproveSubmitted","nftToStake","_ref2","_callee","_context","_x","RaijinsStakedCard","nftToUnStake","_ref4","_callee3","_context3","_x3","useMediaQuery","Layout","StakingContainer","RaijinsStaking","_Fragment","Hero","StakingDesc"],"sourceRoot":""}