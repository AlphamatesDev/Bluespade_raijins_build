{"version":3,"file":"static/js/454.d8fdb588.chunk.js","mappings":"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","sources":["components/Combobox/Combobox.js","components/RaijinsModal/index.jsx","components/SectionTitle/index.jsx","components/Staking/EarnedTicketCard.jsx","components/Staking/EarnedTickets.jsx","components/Staking/Hero.jsx","components/Staking/RaijinsStakingCard.jsx","components/Staking/RaijinsStakedCard.jsx","components/Staking/RaijinsStaking.jsx","lib/approveNFT.tsx","components/RaijinsSelect/index.jsx","components/Staking/RewardCalculator.jsx","components/Staking/StakingContainer.jsx","components/Staking/StakingDesc.jsx","pages/Staking/index.jsx"],"sourcesContent":["import React from \"react\";\r\nimport Select from \"react-select\";\r\n\r\nconst customStyles = {\r\n  container: (provided) => ({\r\n    ...provided,\r\n    boxShadow: \"0px 0px 3px rgba(255, 255, 255)\",\r\n    fontFamily: \"mont\",\r\n    borderRadius: \"25px\",\r\n  }),\r\n  control: (provided) => ({\r\n    ...provided,\r\n    backgroundColor: \"#111111\",\r\n    boxShadow: \"0px 0px 3px rgba(255, 255, 255)\",\r\n    borderRadius: \"25px\",\r\n    padding: \"0.5rem\",\r\n    border: \"none\",\r\n  }),\r\n  option: (provided, state) => ({\r\n    ...provided,\r\n    borderRadius: \"10px\",\r\n    backgroundColor: state.isFocused ? \"#222222\" : \"#111111\",\r\n    fontFamily: \"mont\",\r\n  }),\r\n  singleValue: (provided, state) => ({\r\n    ...provided,\r\n    color: \"#bbbbbb\",\r\n  }),\r\n  noOptionsMessage: (provided, state) => ({\r\n    ...provided,\r\n    backgroundColor: \"#111111\",\r\n  }),\r\n  menu: (provided, state) => ({\r\n    ...provided,\r\n    backgroundColor: \"#111111\",\r\n    borderRadius: \"10px\",\r\n    boxShadow: \"0px 0px 1.8px rgba(214, 214, 214, 0.12)\",\r\n  }),\r\n  input: (provided, state) => ({\r\n    ...provided,\r\n    color: \"#bbbbbb\",\r\n  }),\r\n};\r\n\r\nconst Combobox = ({ options, value, onChange }) => (\r\n  <Select\r\n    options={options}\r\n    styles={customStyles}\r\n    value={value}\r\n    onChange={onChange}\r\n  />\r\n);\r\n\r\nexport default Combobox;\r\n","import \"react-responsive-modal/styles.css\";\r\nimport { Modal } from \"react-responsive-modal\";\r\nimport \"./index.scss\";\r\nimport XImage from \"assets/images/common/X.png\";\r\n\r\n// ================================================\r\n\r\nconst RaijinsModal = ({\r\n  children,\r\n  open,\r\n  setOpen,\r\n  onOpenModal,\r\n  onCloseModal,\r\n  classes,\r\n}) => {\r\n  return (\r\n    <Modal\r\n      open={open}\r\n      onClose={onCloseModal}\r\n      center\r\n      classNames={{ modal: `raijins-modal ${classes}` }}\r\n    >\r\n      <button onClick={onCloseModal} className=\"shut-btn\">\r\n        <img src={XImage} alt=\"X.png\" />\r\n      </button>\r\n      {children}\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default RaijinsModal;\r\n","import cx from \"classnames\";\r\nimport \"./index.scss\";\r\n\r\n// ================================================\r\n\r\nconst SectionTitle = ({ children, classes }) => {\r\n  return <h2 className={cx(\"section-title\", classes)}>{children}</h2>;\r\n};\r\n\r\nexport default SectionTitle;\r\n","import cx from \"classnames\";\r\n\r\nconst EarnedTicketCard = ({ data, onNFTImgClick }) => {\r\n  return (\r\n    <div className={cx(\"earned-ticket-card\", \"mb-2\")}>\r\n      <h6 className={cx(\"nft-type\", \"mb-1\")}>\r\n        nft type: <span className={cx(\"italic\")}>{data.label}</span>\r\n      </h6>\r\n      <div className={cx(\"d-flex\", \"justify-center\", \"mb-1\")}>\r\n        {data.images.map((image) => (\r\n          <img\r\n            src={image}\r\n            key={image}\r\n            alt={image}\r\n            width=\"14%\"\r\n            className={cx(\"nft-image\")}\r\n            onClick={() => onNFTImgClick(image)}\r\n          />\r\n        ))}\r\n      </div>\r\n      <div className={cx(\"d-flex\", \"flex-column\", \"gap-1\")}>\r\n        <div className={cx(\"length-ticket\")}>\r\n          7 - day:{\" \"}\r\n          <span className={cx(\"italic\")}>\r\n            {data.day7} ticket{data.day7 === 1 ? \"\" : \"s\"}\r\n          </span>\r\n        </div>\r\n        <div className={cx(\"length-ticket\")}>\r\n          30 - day:{\" \"}\r\n          <span className={cx(\"italic\")}>\r\n            {data.day30} ticket{data.day30 === 1 ? \"\" : \"s\"}\r\n          </span>\r\n        </div>\r\n        <div className={cx(\"length-ticket\")}>\r\n          60 - day:{\" \"}\r\n          <span className={cx(\"italic\")}>\r\n            {data.day60} ticket{data.day60 === 1 ? \"\" : \"s\"}\r\n          </span>\r\n        </div>\r\n        <div className={cx(\"length-ticket\")}>\r\n          90 - day:{\" \"}\r\n          <span className={cx(\"italic\")}>\r\n            {data.day90} ticket{data.day790 === 1 ? \"\" : \"s\"}\r\n          </span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EarnedTicketCard;\r\n","import { useState } from \"react\";\r\nimport cx from \"classnames\";\r\nimport SectionTitle from \"../SectionTitle\";\r\nimport RaijinsModal from \"components/RaijinsModal\";\r\nimport RaijinsTicketImg from \"assets/images/common/RaijinsTicket.png\";\r\n// import Normal1smImg from \"assets/images/nfts/Normal1sm.jpg\";\r\n// import Normal2smImg from \"assets/images/nfts/Normal2sm.jpg\";\r\n// import Normal3smImg from \"assets/images/nfts/Normal3sm.jpg\";\r\n// import Normal4smImg from \"assets/images/nfts/Normal4sm.jpg\";\r\n// import Normal5smImg from \"assets/images/nfts/Normal5sm.jpg\";\r\n// import Normal6smImg from \"assets/images/nfts/Normal6sm.jpg\";\r\n// import Normal7smImg from \"assets/images/nfts/Normal7sm.jpg\";\r\n\r\n// import Deepblack1smImg from \"assets/images/nfts/Deepblack1sm.jpg\";\r\n// import Deepblack2smImg from \"assets/images/nfts/Deepblack2sm.jpg\";\r\n// import Deepblack3smImg from \"assets/images/nfts/Deepblack3sm.jpg\";\r\n// import Deepblack4smImg from \"assets/images/nfts/Deepblack4sm.jpg\";\r\n// import Deepblack5smImg from \"assets/images/nfts/Deepblack5sm.jpg\";\r\n// import Deepblack6smImg from \"assets/images/nfts/Deepblack6sm.jpg\";\r\n// import Deepblack7smImg from \"assets/images/nfts/Deepblack7sm.jpg\";\r\n\r\n// import Jade1smImg from \"assets/images/nfts/Jade1sm.jpg\";\r\n// import Jade2smImg from \"assets/images/nfts/Jade2sm.jpg\";\r\n// import Jade3smImg from \"assets/images/nfts/Jade3sm.jpg\";\r\n// import Jade4smImg from \"assets/images/nfts/Jade4sm.jpg\";\r\n// import Jade5smImg from \"assets/images/nfts/Jade5sm.jpg\";\r\n// import Jade6smImg from \"assets/images/nfts/Jade6sm.jpg\";\r\n// import Jade7smImg from \"assets/images/nfts/Jade7sm.jpg\";\r\n\r\n// import Ghost1smImg from \"assets/images/nfts/Ghost1sm.jpg\";\r\n// import Ghost2smImg from \"assets/images/nfts/Ghost2sm.jpg\";\r\n// import Ghost3smImg from \"assets/images/nfts/Ghost3sm.jpg\";\r\n// import Ghost4smImg from \"assets/images/nfts/Ghost4sm.jpg\";\r\n// import Ghost5smImg from \"assets/images/nfts/Ghost5sm.jpg\";\r\n// import Ghost6smImg from \"assets/images/nfts/Ghost6sm.jpg\";\r\n// import Ghost7smImg from \"assets/images/nfts/Ghost7sm.jpg\";\r\n\r\nimport Avatar0Img from \"assets/images/nfts/Avatar0.png\";\r\nimport Avatar1Img from \"assets/images/nfts/Avatar1.png\";\r\nimport Avatar2Img from \"assets/images/nfts/Avatar2.png\";\r\nimport Avatar3Img from \"assets/images/nfts/Avatar3.png\";\r\nimport Avatar4Img from \"assets/images/nfts/Avatar4.png\";\r\nimport Avatar5Img from \"assets/images/nfts/Avatar5.png\";\r\nimport EarnedTicketCard from \"./EarnedTicketCard\";\r\n\r\n// ================================================\r\n\r\nconst tableData = [\r\n  {\r\n    label: \"raijins\",\r\n    type: \"raijins\",\r\n    images: [\r\n      Avatar0Img,\r\n      Avatar1Img,\r\n      Avatar2Img, \r\n      Avatar3Img, \r\n      Avatar4Img, \r\n      Avatar5Img\r\n    ],\r\n    day7: 5,\r\n    day30: 21,\r\n    day60: 43,\r\n    day90: 70,\r\n    reward: 15,\r\n  },\r\n];\r\n\r\n// ================================================\r\n\r\nconst EarnedTickets = ({ isMobile }) => {\r\n  const [openImgModal, setOpenImgModal] = useState(false);\r\n  const [modalImg, setModalImg] = useState(null);\r\n\r\n  const onNFTImgClick = (image) => {\r\n    return;\r\n    // setModalImg(image);\r\n    // setOpenImgModal(true);\r\n  };\r\n\r\n  const onCloseModal = () => {\r\n    setModalImg(null);\r\n    setOpenImgModal(false);\r\n  };\r\n\r\n  return (\r\n    <div className={cx(\"earned-tickets\")}>\r\n      <SectionTitle classes=\"mb-3\">\r\n        # <img src={RaijinsTicketImg} alt=\"raijins-ticket.png\" width=\"70px\" /> earned{\" \"}\r\n        <span>per staking period</span>\r\n      </SectionTitle>\r\n      {isMobile ? (\r\n        tableData.map((datum) => (\r\n          <EarnedTicketCard\r\n            key={datum.type}\r\n            data={datum}\r\n            onNFTImgClick={onNFTImgClick}\r\n          />\r\n        ))\r\n      ) : (\r\n        <table className={cx(\"earned-tickets-table\")}>\r\n          <thead>\r\n            <tr>\r\n              <th rowSpan={2}></th>\r\n              <th rowSpan={2} className={cx(\"underline\", \"image-cell\")}>\r\n                nft type\r\n              </th>\r\n              <th colSpan={4} className={cx(\"text-right\")}>\r\n                staking length\r\n              </th>\r\n              {/* <th rowSpan={2} className={cx(\"underline\")}>\r\n              staking <br />\r\n              reward boost\r\n            </th> */}\r\n            </tr>\r\n            <tr>\r\n              <th>7 - day</th>\r\n              <th>30 - day</th>\r\n              <th>60 - day</th>\r\n              <th>90 - day</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {tableData.map((row) => {\r\n              return (\r\n                <tr key={row.type}>\r\n                  <th className={cx(\"nft-type text-right\")}>{row.label}</th>\r\n                  <td className={cx(\"d-flex\", \"justify-between\", \"image-cell\")}>\r\n                    {row.images.map((image, idx) => {\r\n                      return (\r\n                        <img\r\n                          src={image}\r\n                          alt={`image-${row.type}${idx}.jpg`}\r\n                          key={idx}\r\n                          onClick={() => onNFTImgClick(image)}\r\n                          className={cx(\"nft-image\")}\r\n                        />\r\n                      );\r\n                    })}\r\n                  </td>\r\n                  <td>\r\n                    {row.day7}\r\n                    <br />\r\n                    ticket{row.day7 === 1 ? \"\" : \"s\"}\r\n                  </td>\r\n                  <td>\r\n                    {row.day30}\r\n                    <br />\r\n                    ticket{row.day30 === 1 ? \"\" : \"s\"}\r\n                  </td>\r\n                  <td>\r\n                    {row.day60}\r\n                    <br />\r\n                    ticket{row.day60 === 1 ? \"\" : \"s\"}\r\n                  </td>\r\n                  <td>\r\n                    {row.day90}\r\n                    <br />\r\n                    ticket{row.day90 === 1 ? \"\" : \"s\"}\r\n                  </td>\r\n                  {/* <td>\r\n                  {row.reward}\r\n                  <br />\r\n                  boost\r\n                </td> */}\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </table>\r\n      )}\r\n\r\n      <RaijinsModal\r\n        open={openImgModal}\r\n        onCloseModal={onCloseModal}\r\n        classes={`p-0 ${isMobile ? \"w-90\" : \"w-30\"}`}\r\n      >\r\n        <img src={modalImg} width=\"100%\" />\r\n      </RaijinsModal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EarnedTickets;\r\n","import cx from \"classnames\";\r\nimport Description from \"../Description\";\r\nimport PageTitle from \"../PageTitle\";\r\nimport RoundButton from \"../RoundButton\";\r\n\r\nimport VitaImg from \"assets/images/staking/Vita.png\";\r\n// import ScrollButton from \"components/ScrollButton\";\r\n\r\nconst Hero = (props) => {\r\n  const { connectWallet } = props;\r\n\r\n  return (\r\n    <div className={cx(\"staking-hero\")}>\r\n      <div className={cx(\"page-intro\")}>\r\n        <PageTitle>\r\n          raijins <span>staking</span>\r\n        </PageTitle>\r\n        <Description>\r\n          Connect your wallet to start staking your Raijins NFTs.\r\n        </Description>\r\n        <Description>For more information, scroll down</Description>\r\n        <RoundButton\r\n          variant=\"primary\"\r\n          text=\"connect wallet\"\r\n          onBtnClick={connectWallet}\r\n        />\r\n      </div>\r\n      <div className={cx(\"hero-img-container\")}>\r\n        <img src={VitaImg} alt=\"vita.png\" width=\"100%\" />\r\n      </div>\r\n      {/* <div className={cx(\"scrollbtn-wrapper\")}>\r\n        <ScrollButton />\r\n      </div> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Hero;\r\n","import cx from \"classnames\";\r\n\r\nconst RaijinsStakingCard = ({\r\n  nft,\r\n  timeTypeInfo,\r\n  currentTimeType,\r\n  index,\r\n  selectStatusInWallet,\r\n  handleSelectNFTInWallet,\r\n}) => {\r\n  return (\r\n    <div className={cx(\"raijins-staking-card\")}>\r\n      <div className={cx(\"img-container\")}>\r\n        <img src={nft.image} alt={`${nft.image}`} width=\"100%\" />\r\n      </div>\r\n      <div>\r\n        <p className={cx(\"text-secondary\", \"uppercase\", \"mb-1\")}>\r\n          NFT #: <br />\r\n          <span className={cx(\"text-primary\", \"italic\")}>\r\n            {nft.name} #{nft.id}\r\n          </span>\r\n        </p>\r\n        <p className={cx(\"text-secondary\", \"uppercase\", \"mb-1\")}>\r\n          staking period:{\" \"}\r\n          <span className={cx(\"text-primary\", \"italic\")}>\r\n            {timeTypeInfo[currentTimeType].period} day\r\n          </span>{\" \"}\r\n        </p>\r\n        <p className={cx(\"text-secondary\", \"uppercase\", \"mb-1\")}>\r\n          estimated reward:\r\n          <br />{\" \"}\r\n          <span className={cx(\"text-primary\", \"italic\")}>\r\n            {nft.rewards} raijins tickets\r\n          </span>\r\n        </p>\r\n      </div>\r\n      <div className=\"raijins-checkbox\">\r\n        <input\r\n          type=\"checkbox\"\r\n          id={`raijinsCheckbox-${index}`}\r\n          checked={selectStatusInWallet[index] === true}\r\n          onChange={() => handleSelectNFTInWallet(index)}\r\n          value={selectStatusInWallet[index]}\r\n        />\r\n        <label htmlFor={`raijinsCheckbox-${index}`}></label>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RaijinsStakingCard;\r\n","import cx from \"classnames\";\r\nimport CircularArrowImg from \"assets/images/common/Arrow.png\";\r\nimport XImage from \"assets/images/common/XLight.png\";\r\n\r\nconst RaijinsStakedCard = ({\r\n  nft,\r\n  selectStatusStaked,\r\n  index,\r\n  handleSelectNFTStaked,\r\n  timeTypeInfo,\r\n}) => {\r\n  return (\r\n    <div className={cx(\"raijins-staked-card\")}>\r\n      <div className={cx(\"img-container\")}>\r\n        <img src={nft.image} alt={`${nft.image}`} width=\"100%\" />\r\n      </div>\r\n      <div>\r\n        <p className={cx(\"text-secondary\", \"uppercase\", \"mb-1\")}>\r\n          NFT #: <br />\r\n          <span className={cx(\"text-primary\", \"italic\")}>\r\n            {nft.name} #{nft.id}\r\n          </span>\r\n        </p>\r\n        <p className={cx(\"text-secondary\", \"uppercase\", \"mb-1\")}>\r\n          auto restake:{\" \"}\r\n          <button className={cx(\"auto-restake-btn\")}>\r\n            <img\r\n              src={nft.autoRestake === true ? CircularArrowImg : XImage}\r\n              alt=\"arrow.png\"\r\n              width=\"100%\"\r\n            />\r\n          </button>\r\n        </p>\r\n        <p className={cx(\"text-secondary\", \"uppercase\", \"mb-1\")}>\r\n          remaining period:{\" \"}\r\n          <span className={cx(\"text-primary\", \"italic\")}>\r\n            {nft.leftTime} days left\r\n            <br />({timeTypeInfo[nft.timeType].period} days programme)\r\n          </span>\r\n        </p>\r\n        <p className={cx(\"text-secondary\", \"uppercase\", \"mb-1\")}>\r\n          next reward:{\" \"}\r\n          <span className={cx(\"text-primary\", \"italic\")}>\r\n            {nft.nextTicket} raijins tickets\r\n          </span>\r\n        </p>\r\n        <p className={cx(\"text-secondary\", \"uppercase\", \"mb-1\")}>\r\n          claimable reward:{\" \"}\r\n          <span className={cx(\"text-primary\", \"italic\")}>\r\n            {nft.claimableTicket} raijins tickets\r\n          </span>\r\n        </p>\r\n      </div>\r\n      <div className=\"raijins-checkbox\">\r\n        <input\r\n          type=\"checkbox\"\r\n          id={`raijinsCheckbox-${index}`}\r\n          checked={selectStatusStaked[index] === true}\r\n          onChange={() => handleSelectNFTStaked(index)}\r\n          value={selectStatusStaked[index]}\r\n        />\r\n        <label htmlFor={`raijinsCheckbox-${index}`}></label>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RaijinsStakedCard;\r\n","import { useWeb3React } from \"@web3-react/core\";\r\nimport cx from \"classnames\";\r\nimport useSWR from \"swr\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { ethers } from \"ethers\";\r\n\r\nimport SectionTitle from \"../SectionTitle\";\r\nimport { Tab, Tabs, TabList, TabPanel } from \"react-tabs\";\r\nimport \"react-tabs/style/react-tabs.css\";\r\n// import TableDecoImg from \"assets/images/staking/tableDeco.png\";\r\nimport CircularArrowImg from \"assets/images/common/Arrow.png\";\r\nimport XImage from \"assets/images/common/XLight.png\";\r\nimport RoundButton from \"../RoundButton\";\r\nimport { getContract } from \"config/contracts\";\r\nimport { RAIJINS_NFTS, REWARD_AMOUNTS, VOLUME1_METADATA, COLLECTION_OPTIONS } from \"config/staking\";\r\nimport { callContract, contractFetcher } from \"lib/contracts\";\r\nimport { useChainId } from \"lib/chains\";\r\nimport { approveNFT } from \"lib/approveNFT\";\r\nimport StakingRaijins from \"abis/StakingRaijins.json\";\r\n// import Raijins from \"abis/Raijins.json\";\r\nimport RaijinsStakingCard from \"./RaijinsStakingCard\";\r\nimport RaijinsStakedCard from \"./RaijinsStakedCard\";\r\nimport Combobox from '../Combobox/Combobox';\r\nimport {\r\n  formatAmount,\r\n} from \"lib/numbers\";\r\n\r\nconst timeTypeInfo = [\r\n  {\r\n    label: \"7-day\",\r\n    id: \"seven\",\r\n    period: 7,\r\n  },\r\n  {\r\n    label: \"30-day\",\r\n    id: \"thirty\",\r\n    period: 30,\r\n  },\r\n  {\r\n    label: \"60-day\",\r\n    id: \"sixty\",\r\n    period: 60,\r\n  },\r\n  {\r\n    label: \"90-day\",\r\n    id: \"ninety\",\r\n    period: 90,\r\n  },\r\n];\r\n\r\nconst getRarity = (collection, tokenId) => {\r\n  // add code\r\n\r\n  return 0;\r\n};\r\n\r\nconst loadWalletNFTs = (dataWallet, timeType) => {\r\n  if (dataWallet === undefined) return [];\r\n\r\n  if (dataWallet.length === 0) return [];\r\n\r\n  const ret = dataWallet.map((item) => {\r\n    let index = -1;\r\n\r\n    for (let i = 0; i < RAIJINS_NFTS.length; i++) {\r\n      if (\r\n        RAIJINS_NFTS[i].address.toLowerCase() === item.token_address.toLowerCase()\r\n      ) {\r\n        index = i;\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (index === -1) return null;\r\n\r\n    const nftInfo = RAIJINS_NFTS[index];\r\n    let imageURL = \"\";\r\n    if (nftInfo.name === \"LIFE OF HEL - Volume 1\")\r\n      imageURL = `${nftInfo.imageHash}${VOLUME1_METADATA[Number(item.token_id.toString()) - 1]\r\n        }.${nftInfo.imageType}`;\r\n    else\r\n      imageURL = `${nftInfo.imageHash}${Number(item.token_id.toString())}.${nftInfo.imageType\r\n        }`;\r\n\r\n    const rarity = getRarity(nftInfo.address, item.token_id.toString());\r\n    const rewards = REWARD_AMOUNTS[rarity][timeType];\r\n    return {\r\n      id: item.token_id.toString(),\r\n      name: item.name,\r\n      address: nftInfo.address,\r\n      image: imageURL,\r\n      rewards: rewards,\r\n    };\r\n  });\r\n\r\n  const finalArray = ret.filter((item) => item !== null);\r\n  return finalArray;\r\n};\r\n\r\nconst loadStakedNFTs = (dataContract) => {\r\n  if (dataContract === undefined) return [];\r\n\r\n  if (dataContract.length === 0) return [];\r\n\r\n  const ret = dataContract.map((item) => {\r\n    let index = -1;\r\n\r\n    for (let i = 0; i < RAIJINS_NFTS.length; i++) {\r\n      if (RAIJINS_NFTS[i].address.toLowerCase() === item[0].toLowerCase()) {\r\n        index = i;\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (index === -1) return null;\r\n\r\n    const nftInfo = RAIJINS_NFTS[index];\r\n    const tokenId = parseInt(item[1].toString());\r\n    const timeType = parseInt(item[2].toString());\r\n    const startTime = parseInt(item[3].toString());\r\n    const autoRestake = item[4];\r\n    const isClaimed = item[5];\r\n    const pendingTicket = parseInt(formatAmount(item[6], 18, 0));\r\n\r\n    const rarity = getRarity(nftInfo.address, tokenId);\r\n    const endTime = startTime + timeTypeInfo[timeType].period * 24 * 3600;\r\n    const currentTime = new Date().getTime() / 1000;\r\n    let leftTime = 0;\r\n    let nextTicket = 0;\r\n\r\n    if (!autoRestake) {\r\n      if (isClaimed || currentTime > endTime) {\r\n        leftTime = 0;\r\n        nextTicket = 0;\r\n      } else {\r\n        leftTime = endTime - currentTime;\r\n        nextTicket = REWARD_AMOUNTS[rarity][timeType];\r\n      }\r\n    } else {\r\n      leftTime =\r\n        (timeTypeInfo[timeType].period * 24 * 3600) - ((currentTime - startTime) % (timeTypeInfo[timeType].period * 24 * 3600));\r\n      nextTicket = REWARD_AMOUNTS[rarity][timeType];\r\n    }\r\n\r\n    let imageURL = \"\";\r\n    if (nftInfo.name === \"LIFE OF HEL - Volume 1\")\r\n      imageURL = `${nftInfo.imageHash}${VOLUME1_METADATA[Number(item[1].toString()) - 1]\r\n        }.${nftInfo.imageType}`;\r\n    else\r\n      imageURL = `${nftInfo.imageHash}${Number(item[1].toString())}.${nftInfo.imageType\r\n        }`;\r\n\r\n    return {\r\n      name: nftInfo.name,\r\n      image: imageURL,\r\n      address: nftInfo.address,\r\n      id: tokenId,\r\n      timeType: timeType,\r\n      leftTime: parseInt(leftTime / (24 * 3600)) + 1,\r\n      autoRestake: autoRestake,\r\n      nextTicket: nextTicket,\r\n      claimableTicket: pendingTicket,\r\n    };\r\n  });\r\n\r\n  const finalArray = ret.filter((item) => item !== null);\r\n  return finalArray;\r\n};\r\n\r\nlet walletNFTSelection = [];\r\nlet stakedNFTSelection = [];\r\n\r\nconst RaijinsStaking = ({ isMobile }) => {\r\n  const { active, library, account } = useWeb3React();\r\n\r\n  const [currentTimeType, setCurrentTimeType] = useState(0);\r\n  const [disabledClaimBtn, setDisabledClaimBtn] = useState(true);\r\n  const [disabledUnStakeBtn, setDisabledUnStakeBtn] = useState(true);\r\n  // const [disabledAddRestakeBtn, setDisabledAddRestakeBtn] = useState(true);\r\n  // const [disabledCancelRestakeBtn, setDisabledCancelRestakeBtn] = useState(true);\r\n  const [selectStatusInWallet, setSelectStatusInWallet] = useState([]);\r\n  const [selectStatusStaked, setSelectStatusStaked] = useState([]);\r\n  const [isApproving, setIsApproving] = useState(false);\r\n  const [isWaitingForApproval, setIsWaitingForApproval] = useState(false);\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const [selectedCollection, setSelectedCollection] = useState(COLLECTION_OPTIONS[0]);\r\n\r\n  const regInputForCollectionId = React.useRef();\r\n\r\n  const { chainId } = useChainId();\r\n  const stakingRaijinsAddress = getContract(chainId, \"StakingRaijins\");\r\n\r\n  // const { data: dataMoralis } = useSWR(\r\n  //   [account],\r\n  //   { fetcher: moralisFetcher(account), }\r\n  // );\r\n  const nftAddresses = RAIJINS_NFTS.map((item) => item.address);\r\n  //////////Reading Wallet///////////////////////////////////////////////////////////////////////////////////////////////////\r\n  const { data: dataWallet } = useSWR(\r\n    active &&\r\n    stakingRaijinsAddress && [\r\n      active,\r\n      chainId,\r\n      stakingRaijinsAddress,\r\n      \"getTokensInWallet\",\r\n      nftAddresses,\r\n      account\r\n    ],\r\n    { fetcher: contractFetcher(library, StakingRaijins) }\r\n  );\r\n  const filteredDataWallet = dataWallet ? dataWallet.filter((item) => item.token_address.toLowerCase() === selectedCollection.address.toLowerCase()) : [];\r\n  let nftsInWallet = loadWalletNFTs(filteredDataWallet, currentTimeType);\r\n  //////////Reading Staking Contract////////////////////////////////////////////////////////////////////////////////////////////////////\r\n  const { data: dataContract } = useSWR(\r\n    active &&\r\n    stakingRaijinsAddress && [\r\n      active,\r\n      chainId,\r\n      stakingRaijinsAddress,\r\n      \"getStakingInfo\",\r\n      nftAddresses,\r\n      account,\r\n    ],\r\n    { fetcher: contractFetcher(library, StakingRaijins) }\r\n  );\r\n  const filteredDataContract = dataContract ? dataContract.filter((item) => item._address.toLowerCase() === selectedCollection.address.toLowerCase()) : [];\r\n  const nftsStaked = loadStakedNFTs(filteredDataContract);\r\n\r\n  /////////Approval Status/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n  const { data: collectionApprovals } = useSWR(\r\n    active &&\r\n    stakingRaijinsAddress && [\r\n      active,\r\n      chainId,\r\n      stakingRaijinsAddress,\r\n      \"getApprovalStatus\",\r\n      nftAddresses,\r\n      account,\r\n    ],\r\n    { fetcher: contractFetcher(library, StakingRaijins) }\r\n  );\r\n\r\n  let needApproval = true;\r\n  if (collectionApprovals) {\r\n    const filteredCollectionApprovals = collectionApprovals ? collectionApprovals.filter((item) => item.token_address.toLowerCase() === selectedCollection.address.toLowerCase()) : [];\r\n    needApproval = !filteredCollectionApprovals[0].isApproval;\r\n  }\r\n\r\n  const [disabledStakeBtn, setDisabledStakeBtn] = useState(!needApproval);\r\n\r\n  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n  const handleSelectNFTInWallet = (index) => {\r\n    const itemInfo = nftsInWallet[index];\r\n\r\n    const selectedItem = walletNFTSelection.find(\r\n      (item) =>\r\n        item.id === itemInfo.id &&\r\n        item.address === itemInfo.address.toLowerCase()\r\n    );\r\n    if (selectedItem === undefined)\r\n      walletNFTSelection.push({\r\n        id: itemInfo.id,\r\n        address: itemInfo.address.toLowerCase(),\r\n      });\r\n    else\r\n      walletNFTSelection = walletNFTSelection.filter(\r\n        (item) => item !== selectedItem\r\n      );\r\n\r\n    let items = [];\r\n    for (let i = 0; i < nftsInWallet.length; i++) {\r\n      const itemInfo = nftsInWallet[i];\r\n      const currentItem = walletNFTSelection.find(\r\n        (item) =>\r\n          item.id === itemInfo.id &&\r\n          item.address === itemInfo.address.toLowerCase()\r\n      );\r\n      if (currentItem === undefined) items.push(false);\r\n      else items.push(true);\r\n    }\r\n    setSelectStatusInWallet(items);\r\n\r\n    if (walletNFTSelection.length === 0 && !needApproval)\r\n      setDisabledStakeBtn(true);\r\n    else setDisabledStakeBtn(false);\r\n  };\r\n\r\n  const handleSelectNFTStaked = (index) => {\r\n    const itemInfo = nftsStaked[index];\r\n\r\n    const selectedItem = stakedNFTSelection.find(\r\n      (item) =>\r\n        item.id === itemInfo.id &&\r\n        item.address === itemInfo.address.toLowerCase()\r\n    );\r\n    if (selectedItem === undefined)\r\n      stakedNFTSelection.push({\r\n        id: itemInfo.id,\r\n        address: itemInfo.address.toLowerCase(),\r\n      });\r\n    else\r\n      stakedNFTSelection = stakedNFTSelection.filter(\r\n        (item) => item !== selectedItem\r\n      );\r\n\r\n    let items = [];\r\n    for (let i = 0; i < nftsStaked.length; i++) {\r\n      const itemInfo = nftsStaked[i];\r\n      const currentItem = stakedNFTSelection.find(\r\n        (item) =>\r\n          item.id === itemInfo.id &&\r\n          item.address === itemInfo.address.toLowerCase()\r\n      );\r\n      if (currentItem === undefined) items.push(false);\r\n      else items.push(true);\r\n    }\r\n    setSelectStatusStaked(items);\r\n\r\n    if (stakedNFTSelection.length === 0) {\r\n      setDisabledClaimBtn(true);\r\n      setDisabledUnStakeBtn(true);\r\n      // setDisabledAddRestakeBtn(true);\r\n      // setDisabledCancelRestakeBtn(true);\r\n    } else {\r\n      setDisabledClaimBtn(false);\r\n      setDisabledUnStakeBtn(false);\r\n      // setDisabledAddRestakeBtn(false);\r\n      // setDisabledCancelRestakeBtn(false);\r\n    }\r\n  };\r\n\r\n  const handleSelectAllInWallet = () => {\r\n    let items = [];\r\n    walletNFTSelection = [];\r\n    for (let i = 0; i < nftsInWallet.length; i++) {\r\n      const itemInfo = nftsInWallet[i];\r\n      walletNFTSelection.push({\r\n        id: itemInfo.id,\r\n        address: itemInfo.address.toLowerCase(),\r\n      });\r\n      items.push(true);\r\n    }\r\n    setSelectStatusInWallet(items);\r\n\r\n    setDisabledStakeBtn(false);\r\n  };\r\n\r\n  const handleUnselectAllInWallet = () => {\r\n    let items = [];\r\n    walletNFTSelection = [];\r\n    setSelectStatusInWallet(items);\r\n    setDisabledStakeBtn(true);\r\n  };\r\n\r\n  const handleSelectAllStaked = () => {\r\n    let items = [];\r\n    stakedNFTSelection = [];\r\n    for (let i = 0; i < nftsStaked.length; i++) {\r\n      const itemInfo = nftsStaked[i];\r\n      stakedNFTSelection.push({\r\n        id: itemInfo.id,\r\n        address: itemInfo.address.toLowerCase(),\r\n      });\r\n      items.push(true);\r\n    }\r\n    setSelectStatusStaked(items);\r\n\r\n    setDisabledClaimBtn(false);\r\n    setDisabledUnStakeBtn(false);\r\n    // setDisabledAddRestakeBtn(false);\r\n    // setDisabledCancelRestakeBtn(false);\r\n  };\r\n\r\n  const handleUnselectAllStaked = () => {\r\n    let items = [];\r\n    stakedNFTSelection = [];\r\n    setSelectStatusStaked(items);\r\n\r\n    setDisabledClaimBtn(true);\r\n    setDisabledUnStakeBtn(true);\r\n    // setDisabledAddRestakeBtn(true);\r\n    // setDisabledCancelRestakeBtn(true);\r\n  };\r\n\r\n  const handleTimeType = (index) => {\r\n    setCurrentTimeType(index);\r\n  };\r\n\r\n  const approveFromNFT = () => {\r\n    if (needApproval) {\r\n      approveNFT({\r\n        setIsApproving,\r\n        library,\r\n        tokenAddress: selectedCollection.address,\r\n        spender: stakingRaijinsAddress,\r\n        chainId: chainId,\r\n        onApproveSubmitted: () => {\r\n          setIsWaitingForApproval(true);\r\n        },\r\n      });\r\n\r\n      return;\r\n    }\r\n  };\r\n\r\n  const handleStake = () => {\r\n    if (needApproval) {\r\n      approveFromNFT();\r\n      return;\r\n    }\r\n\r\n    setIsSubmitting(true);\r\n\r\n    const nftToStake = walletNFTSelection.map((item) => {\r\n      return item.address;\r\n    });\r\n\r\n    const tokenId = walletNFTSelection.map((item) => {\r\n      return item.id;\r\n    });\r\n\r\n    const timeType = tokenId.map((item) => {\r\n      return currentTimeType;\r\n    });\r\n\r\n    const contract = new ethers.Contract(\r\n      stakingRaijinsAddress,\r\n      StakingRaijins,\r\n      library.getSigner()\r\n    );\r\n    callContract(chainId, contract, \"stake\", [nftToStake, tokenId, timeType], {\r\n      sentMsg: \"Staking Raijins NFT submitted!\",\r\n      failMsg: \"Staking Raijins NFT failed.\",\r\n      // setPendingTxns,\r\n    })\r\n      .then(async (res) => {\r\n        // setIsVisible(false);\r\n        // setOpenBuyModal(true);\r\n        // setOpenBoughtModal(false);\r\n      })\r\n      .finally(() => {\r\n        // setIsStaking(false);\r\n        // setOpenBuyModal(false);\r\n        // setOpenBoughtModal(true);\r\n        setIsSubmitting(false);\r\n      });\r\n\r\n    handleUnselectAllInWallet();\r\n  };\r\n\r\n  const getTextStake = () => {\r\n    if (needApproval && isWaitingForApproval) {\r\n      return \"Waiting for Approval...\";\r\n    }\r\n    if (isApproving) {\r\n      return \"Approving\";\r\n    }\r\n    if (needApproval) {\r\n      return \"Approve\";\r\n    }\r\n\r\n    if (isSubmitting) {\r\n      return \"Staking...\";\r\n    }\r\n\r\n    return \"Stake\";\r\n  };\r\n\r\n  const handleClaim = () => {\r\n    const nftToClaim = stakedNFTSelection.map((item) => {\r\n      return item.address;\r\n    });\r\n\r\n    const tokenId = stakedNFTSelection.map((item) => {\r\n      return item.id;\r\n    });\r\n\r\n    const contract = new ethers.Contract(\r\n      stakingRaijinsAddress,\r\n      StakingRaijins,\r\n      library.getSigner()\r\n    );\r\n    callContract(chainId, contract, \"claimRewards\", [nftToClaim, tokenId], {\r\n      sentMsg: \"Claim Raijins Ticket submitted!\",\r\n      failMsg: \"Claim Raijins Ticket failed.\",\r\n      // setPendingTxns,\r\n    })\r\n      .then(async (res) => {\r\n        // setIsVisible(false);\r\n        // setOpenBuyModal(true);\r\n        // setOpenBoughtModal(false);\r\n      })\r\n      .finally(() => {\r\n        // setIsStaking(false);\r\n        // setOpenBuyModal(false);\r\n        // setOpenBoughtModal(true);\r\n      });\r\n\r\n    handleUnselectAllStaked();\r\n  };\r\n\r\n  const handleUnStake = () => {\r\n    const nftToUnStake = stakedNFTSelection.map((item) => {\r\n      return item.address;\r\n    });\r\n\r\n    const tokenId = stakedNFTSelection.map((item) => {\r\n      return item.id;\r\n    });\r\n\r\n    const contract = new ethers.Contract(\r\n      stakingRaijinsAddress,\r\n      StakingRaijins,\r\n      library.getSigner()\r\n    );\r\n    callContract(chainId, contract, \"unStake\", [nftToUnStake, tokenId], {\r\n      sentMsg: \"Unstake Raijins NFT submitted!\",\r\n      failMsg: \"Unstake Raijins NFT failed.\",\r\n      // setPendingTxns,\r\n    })\r\n      .then(async (res) => {\r\n        // setIsVisible(false);\r\n        // setOpenBuyModal(true);\r\n        // setOpenBoughtModal(false);\r\n      })\r\n      .finally(() => {\r\n        // setIsStaking(false);\r\n        // setOpenBuyModal(false);\r\n        // setOpenBoughtModal(true);\r\n      });\r\n\r\n    handleUnselectAllStaked();\r\n  };\r\n\r\n  // const handleAddRestake = () => {\r\n  //   const nftToAddRestake = stakedNFTSelection.map((item) => {\r\n  //     return item.address;\r\n  //   });\r\n\r\n  //   const tokenId = stakedNFTSelection.map((item) => {\r\n  //     return item.id;\r\n  //   });\r\n\r\n  //   const contract = new ethers.Contract(\r\n  //     stakingRaijinsAddress,\r\n  //     StakingRaijins,\r\n  //     library.getSigner()\r\n  //   );\r\n  //   callContract(\r\n  //     chainId,\r\n  //     contract,\r\n  //     \"addAutoRestake\",\r\n  //     [nftToAddRestake, tokenId],\r\n  //     {\r\n  //       sentMsg: \"Add AutoRestake Raijins NFT submitted!\",\r\n  //       failMsg: \"Add AutoRestake Raijins NFT failed.\",\r\n  //       // setPendingTxns,\r\n  //     }\r\n  //   )\r\n  //     .then(async (res) => {\r\n  //       // setIsVisible(false);\r\n  //       // setOpenBuyModal(true);\r\n  //       // setOpenBoughtModal(false);\r\n  //     })\r\n  //     .finally(() => {\r\n  //       // setIsStaking(false);\r\n  //       // setOpenBuyModal(false);\r\n  //       // setOpenBoughtModal(true);\r\n  //     });\r\n\r\n  //   handleUnselectAllStaked();\r\n  // };\r\n\r\n  // const handleCancelRestake = () => {\r\n  //   const nftToCancelRestake = stakedNFTSelection.map((item) => {\r\n  //     return item.address;\r\n  //   });\r\n\r\n  //   const tokenId = stakedNFTSelection.map((item) => {\r\n  //     return item.id;\r\n  //   });\r\n\r\n  //   const contract = new ethers.Contract(\r\n  //     stakingRaijinsAddress,\r\n  //     StakingRaijins,\r\n  //     library.getSigner()\r\n  //   );\r\n  //   callContract(\r\n  //     chainId,\r\n  //     contract,\r\n  //     \"removeAutoRestake\",\r\n  //     [nftToCancelRestake, tokenId],\r\n  //     {\r\n  //       sentMsg: \"Cancel AutoRestake Raijins NFT submitted!\",\r\n  //       failMsg: \"Cancel AutoRestake Raijins NFT failed.\",\r\n  //       // setPendingTxns,\r\n  //     }\r\n  //   )\r\n  //     .then(async (res) => {\r\n  //       // setIsVisible(false);\r\n  //       // setOpenBuyModal(true);\r\n  //       // setOpenBoughtModal(false);\r\n  //     })\r\n  //     .finally(() => {\r\n  //       // setIsStaking(false);\r\n  //       // setOpenBuyModal(false);\r\n  //       // setOpenBoughtModal(true);\r\n  //     });\r\n\r\n  //   handleUnselectAllStaked();\r\n  // };\r\n\r\n  useEffect(() => {\r\n    if (needApproval) setIsWaitingForApproval(false);\r\n  }, [needApproval, active]);\r\n\r\n  useEffect(() => {\r\n    handleUnselectAllInWallet();\r\n    handleUnselectAllStaked();\r\n  }, [selectedCollection]);\r\n\r\n  return (\r\n    <div className={cx(\"raijins-staking\")}>\r\n      <SectionTitle classes=\"mb-3\">\r\n        Raijins <span>staking</span>\r\n      </SectionTitle>\r\n      <Combobox ref={regInputForCollectionId} options={COLLECTION_OPTIONS} value={selectedCollection} onChange={(selectedOption) => setSelectedCollection(selectedOption)} />\r\n      <Tabs className={cx(\"raijins-staking-tabs\")}>\r\n        <TabList>\r\n          <Tab>\r\n            {/* <h6>Volumes</h6> */}\r\n            <p>\r\n              <span>{nftsInWallet ? nftsInWallet.length : 0}</span> in wallet\r\n            </p>\r\n          </Tab>\r\n          <Tab>\r\n            {/* <h6>Avatars</h6> */}\r\n            <p>\r\n              <span>{nftsStaked ? nftsStaked.length : 0}</span> staked\r\n            </p>\r\n          </Tab>\r\n        </TabList>\r\n\r\n        <TabPanel>\r\n          {isMobile ? (\r\n            <div className={cx(\"cards-wrapper\", \"mb-5\")}>\r\n              {nftsInWallet && nftsInWallet.length ? (\r\n                nftsInWallet.map((item, index) => {\r\n                  return (\r\n                    <RaijinsStakingCard\r\n                      nft={item}\r\n                      key={index}\r\n                      timeTypeInfo={timeTypeInfo}\r\n                      currentTimeType={currentTimeType}\r\n                      index={index}\r\n                      selectStatusInWallet={selectStatusInWallet}\r\n                      handleSelectNFTInWallet={handleSelectNFTInWallet}\r\n                    />\r\n                  );\r\n                })\r\n              ) : (\r\n                <div className={cx(\"p-1\", \"text-center\", \"text-danger\")}>\r\n                  No NFTs in wallet\r\n                </div>\r\n              )}\r\n            </div>\r\n          ) : (\r\n            <div className={cx(\"table-wrapper\", \"mb-5\")}>\r\n              <table>\r\n                <thead>\r\n                  <tr rowSpan={nftsInWallet ? nftsInWallet.length + 1 : 0}>\r\n                    <th>nft visual</th>\r\n                    <th>nft #</th>\r\n                    <th>selected</th>\r\n                    {/* <th>boost</th> */}\r\n                    <th>staking period</th>\r\n                    <th>estimated reward</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {nftsInWallet && nftsInWallet.length ? (\r\n                    nftsInWallet.map((item, index) => {\r\n                      return (\r\n                        <tr key={item.id}>\r\n                          <td className=\"nft-visual\">\r\n                            <img src={item.image} alt={`${item.image}`} />\r\n                          </td>\r\n                          <td className=\"w-20\">\r\n                            {item.name} #{item.id}\r\n                          </td>\r\n                          <td>\r\n                            <div className=\"raijins-checkbox\">\r\n                              <input\r\n                                type=\"checkbox\"\r\n                                id={`raijinsCheckbox-${index}`}\r\n                                checked={selectStatusInWallet[index] === true}\r\n                                onChange={() => handleSelectNFTInWallet(index)}\r\n                                value={selectStatusInWallet[index]}\r\n                              />\r\n                              <label htmlFor={`raijinsCheckbox-${index}`}></label>\r\n                            </div>\r\n                          </td>\r\n                          {/* <td className=\"percent text-success\">\r\n                        15%\r\n                        <br />\r\n                        <span className=\"text-danger\">\r\n                          ({item.days} days unlisted)\r\n                        </span>\r\n                      </td> */}\r\n                          <td className=\"days\">\r\n                            <span className=\"text-primary\">\r\n                              {timeTypeInfo[currentTimeType].period}\r\n                            </span>{\" \"}\r\n                            day\r\n                          </td>\r\n                          <td>\r\n                            <span className=\"text-primary\">{item.rewards}</span>{\" \"}\r\n                            raijins tickets\r\n                          </td>\r\n                        </tr>\r\n                      );\r\n                    })\r\n                  ) : (\r\n                    <tr>\r\n                      <td\r\n                        colSpan={6}\r\n                        className={cx(\"text-danger\", \"text-center\", \"p-1\")}\r\n                      >\r\n                        No NFTs in wallet\r\n                      </td>\r\n                    </tr>\r\n                  )}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          )}\r\n          <div className=\"btn-group\">\r\n            <button\r\n              className={cx(\"select-all-btn\")}\r\n              onClick={handleSelectAllInWallet}\r\n            >\r\n              select all\r\n            </button>\r\n            <RoundButton\r\n              key=\"stake\"\r\n              text={getTextStake()}\r\n              variant=\"primary\"\r\n              disabled={disabledStakeBtn}\r\n              onBtnClick={handleStake}\r\n            />\r\n            {timeTypeInfo.map((btn, index) => (\r\n              <RoundButton\r\n                key={btn.id}\r\n                text={btn.label}\r\n                variant={currentTimeType === index ? \"danger\" : \"transparent\"}\r\n                onBtnClick={() => handleTimeType(index)}\r\n              />\r\n            ))}\r\n          </div>\r\n        </TabPanel>\r\n        <TabPanel>\r\n          {isMobile ? (\r\n            <div className={cx(\"cards-wrapper\", \"mb-5\")}>\r\n              {nftsStaked && nftsStaked.length ? (\r\n                nftsStaked.map((item, index) => {\r\n                  return (\r\n                    <RaijinsStakedCard\r\n                      nft={item}\r\n                      index={index}\r\n                      selectStatusStaked={selectStatusStaked}\r\n                      handleSelectNFTStaked={handleSelectNFTStaked}\r\n                      timeTypeInfo={timeTypeInfo}\r\n                    />\r\n                  );\r\n                })\r\n              ) : (\r\n                <div className={cx(\"p-1\", \"text-center\", \"text-danger\")}>\r\n                  No NFTs in wallet\r\n                </div>\r\n              )}\r\n            </div>\r\n          ) : (\r\n            <div className={cx(\"table-wrapper\", \"mb-5\")}>\r\n              <table>\r\n                <thead>\r\n                  <tr rowSpan={nftsStaked ? nftsStaked.length + 1 : 0}>\r\n                    <th>nft visual</th>\r\n                    <th>nft #</th>\r\n                    <th>selected</th>\r\n                    <th>auto-restake</th>\r\n                    <th>remaining period</th>\r\n                    <th>rewards</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {nftsStaked && nftsStaked.length ? (\r\n                    nftsStaked.map((nft, index) => {\r\n                      return (\r\n                        <tr key={nft.id}>\r\n                          <td className=\"nft-visual\">\r\n                            <img src={nft.image} alt={`${nft.image}`} />\r\n                          </td>\r\n                          <td className=\"w-20\">\r\n                            {nft.name} #{nft.id}\r\n                          </td>\r\n                          <td>\r\n                            <div className=\"raijins-checkbox\">\r\n                              <input\r\n                                type=\"checkbox\"\r\n                                id={`raijinsCheckbox-${index}`}\r\n                                checked={selectStatusStaked[index] === true}\r\n                                onClick={() => handleSelectNFTStaked(index)}\r\n                                value={selectStatusStaked[index]}\r\n                              />\r\n                              <label htmlFor={`raijinsCheckbox-${index}`}></label>\r\n                            </div>\r\n                          </td>\r\n                          <td>\r\n                            <button className={cx(\"auto-restake-btn\")}>\r\n                              <img\r\n                                src={\r\n                                  nft.autoRestake === true\r\n                                    ? CircularArrowImg\r\n                                    : XImage\r\n                                }\r\n                                alt=\"arrow.png\"\r\n                                width=\"100%\"\r\n                              />\r\n                            </button>\r\n                          </td>\r\n                          <td className=\"days\">\r\n                            <span className=\"text-primary\">{nft.leftTime}</span>{\" \"}\r\n                            days left\r\n                            <br />\r\n                            <span className=\"text-danger\">\r\n                              ({timeTypeInfo[nft.timeType].period} days\r\n                              programme)\r\n                            </span>\r\n                          </td>\r\n                          <td>\r\n                            <div className=\"mb-2\">\r\n                              <span className=\"text-primary\">next reward:</span>\r\n                              <br />\r\n                              <span className=\"text-danger\">\r\n                                {nft.nextTicket}\r\n                              </span>\r\n                              {\" raijins tickets\"}\r\n                            </div>\r\n                            <div>\r\n                              <span className=\"text-primary\">\r\n                                claimable reward:\r\n                              </span>\r\n                              <br />\r\n                              <span className=\"text-danger\">\r\n                                {nft.claimableTicket}\r\n                              </span>\r\n                              {\" raijins tickets\"}\r\n                            </div>\r\n                          </td>\r\n                        </tr>\r\n                      );\r\n                    })\r\n                  ) : (\r\n                    <tr>\r\n                      <td\r\n                        colSpan={6}\r\n                        className={cx(\"text-danger\", \"text-center\", \"p-1\")}\r\n                      >\r\n                        No staked NFTs\r\n                      </td>\r\n                    </tr>\r\n                  )}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          )}\r\n          <div className=\"btn-group\">\r\n            <button\r\n              className={cx(\"select-all-btn\")}\r\n              onClick={handleSelectAllStaked}\r\n            >\r\n              select all\r\n            </button>\r\n            <RoundButton\r\n              key=\"claim\"\r\n              text=\"claim rewards\"\r\n              variant=\"transparent\"\r\n              disabled={disabledClaimBtn}\r\n              onBtnClick={handleClaim}\r\n            />\r\n            <RoundButton\r\n              key=\"unstake\"\r\n              text=\"unstake\"\r\n              variant=\"transparent\"\r\n              disabled={disabledUnStakeBtn}\r\n              onBtnClick={handleUnStake}\r\n            />\r\n            {/* <RoundButton\r\n              key=\"add_auto_restake\"\r\n              text=\"add auto restake\"\r\n              variant=\"transparent\"\r\n              disabled={disabledAddRestakeBtn}\r\n              onBtnClick={handleAddRestake}\r\n            />\r\n            <RoundButton\r\n              key=\"cancel_auto_restake\"\r\n              text=\"cancel auto restake\"\r\n              variant=\"transparent\"\r\n              disabled={disabledCancelRestakeBtn}\r\n              onBtnClick={handleCancelRestake}\r\n            /> */}\r\n          </div>\r\n        </TabPanel>\r\n      </Tabs>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RaijinsStaking;\r\n","import { ethers } from \"ethers\";\r\nimport Token from \"abis/Raijins.json\";\r\nimport { getExplorerUrl } from \"config/chains\";\r\nimport { helperToast } from \"lib/helperToast\";\r\nimport { Web3ReactContextInterface } from \"@web3-react/core/dist/types\";\r\nimport ExternalLink from \"components/ExternalLink/ExternalLink\";\r\n\r\ntype Params = {\r\n  setIsApproving: (val: boolean) => void;\r\n  library: Web3ReactContextInterface[\"library\"];\r\n  tokenAddress: string;\r\n  spender: string;\r\n  chainId: number;\r\n  onApproveSubmitted: () => void;\r\n  pendingTxns: any[];\r\n  setPendingTxns: (txns: any[]) => void;\r\n  includeMessage?: boolean;\r\n};\r\n\r\nexport function approveNFT({\r\n  setIsApproving,\r\n  library,\r\n  tokenAddress,\r\n  spender,\r\n  chainId,\r\n  onApproveSubmitted,\r\n  pendingTxns,\r\n  setPendingTxns,\r\n  includeMessage,\r\n}: Params) {\r\n  setIsApproving(true);\r\n  const contract = new ethers.Contract(tokenAddress, Token, library.getSigner());\r\n  contract\r\n    .setApprovalForAll(spender, true)\r\n    .then(async (res) => {\r\n      const txUrl = getExplorerUrl(chainId) + \"tx/\" + res.hash;\r\n      helperToast.success(\r\n        <div>\r\n          Approval submitted! <ExternalLink href={txUrl}>View status.</ExternalLink>\r\n          <br />\r\n        </div>\r\n      );\r\n      if (onApproveSubmitted) {\r\n        onApproveSubmitted();\r\n      }\r\n      if (pendingTxns && setPendingTxns) {\r\n        const pendingTxn = {\r\n          hash: res.hash,\r\n          message: includeMessage ? `Raijins NFT Approved!` : false,\r\n        };\r\n        setPendingTxns([...pendingTxns, pendingTxn]);\r\n      }\r\n    })\r\n    .catch((e) => {\r\n      console.error(e);\r\n      let failMsg;\r\n      if (\r\n        [\"not enough funds for gas\", \"failed to execute call with revert code InsufficientGasFunds\"].includes(\r\n          e.data?.message\r\n        )\r\n      ) {\r\n        failMsg = (\r\n          <div>\r\n            There is not enough MATIC in your account on Polygon to send this transaction.\r\n            <br />\r\n            <br />\r\n            <ExternalLink href=\"https://www.mexc.com/\">Bridge MATIC to Polygon</ExternalLink>\r\n          </div>\r\n        );\r\n      } else if (e.message?.includes(\"User denied transaction signature\")) {\r\n        failMsg = `Approval was cancelled`;\r\n      } else {\r\n        failMsg = `Approval failed`;\r\n      }\r\n      helperToast.error(failMsg);\r\n    })\r\n    .finally(() => {\r\n      setIsApproving(false);\r\n    });\r\n}\r\n","import cx from \"classnames\";\r\nimport \"./index.scss\";\r\n\r\nconst RaijinsSelect = ({ options, handleChange }) => {\r\n  return (\r\n    <div className={cx(\"raijins-select-container\")}>\r\n      <label>\r\n        <select className={cx(\"raijins-select\")} onChange={handleChange}>\r\n          {options &&\r\n            options.length &&\r\n            options.map((option) => {\r\n              return (\r\n                <option key={option.value} value={option.value}>\r\n                  {option.text}\r\n                </option>\r\n              );\r\n            })}\r\n        </select>\r\n      </label>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RaijinsSelect;\r\n","import cx from \"classnames\";\r\nimport React, { useState } from \"react\";\r\nimport Description from \"../Description\";\r\nimport RaijinsSelect from \"../RaijinsSelect\";\r\nimport RoundButton from \"../RoundButton\";\r\nimport SectionTitle from \"../SectionTitle\";\r\nimport Arrow1Img from \"assets/images/common/Arrow1.png\";\r\nimport RaijinsTicketImg from \"assets/images/common/RaijinsTicket.png\";\r\nimport { REWARD_AMOUNTS } from \"config/staking\";\r\n\r\nconst calculatorOptions = [\r\n  {\r\n    key: \"raijins nft type\",\r\n    options: [\r\n      {\r\n        value: 0,\r\n        text: \"raijins\",\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    key: \"staking duration\",\r\n    options: [\r\n      {\r\n        value: 0,\r\n        text: \"7-day\",\r\n      },\r\n      {\r\n        value: 1,\r\n        text: \"30-day\",\r\n      },\r\n      {\r\n        value: 2,\r\n        text: \"60-day\",\r\n      },\r\n      {\r\n        value: 3,\r\n        text: \"90-day\",\r\n      },\r\n    ],\r\n  },\r\n  // {\r\n  //   key: \"reward boost\",\r\n  //   options: [\r\n  //     {\r\n  //       value: \"yes\",\r\n  //       text: \"yes\",\r\n  //     },\r\n  //     {\r\n  //       value: \"no\",\r\n  //       text: \"no\",\r\n  //     },\r\n  //   ],\r\n  // },\r\n];\r\n\r\nconst RewardCalculator = ({ isMobile }) => {\r\n  const [calculatorValue, setCalculatorValue] = useState(0);\r\n  const [rarity, setRarity] = useState(0);\r\n  const [timeType, setTimeType] = useState(0);\r\n\r\n  const handleCalculate = () => {\r\n    setCalculatorValue(REWARD_AMOUNTS[rarity][timeType]);\r\n  };\r\n\r\n  const handleRarity = (rarity) => {\r\n    setRarity(rarity);\r\n  };\r\n\r\n  const handleTimeType = (timeType) => {\r\n    setTimeType(timeType);\r\n  };\r\n\r\n  return (\r\n    <div className={cx(\"reward-calculator\", \"mb-7\")}>\r\n      <SectionTitle classes=\"mb-3\">\r\n        staking reward <span>calculator</span>\r\n      </SectionTitle>\r\n      <Description classes={cx(\"text-center\", \"mb-5\")}>\r\n        Please use the below tool to estimate the amount of Raijins Tickets awarded\r\n        based on your staking criteria\r\n      </Description>\r\n      <div\r\n        className={cx(\r\n          \"d-flex\",\r\n          \"justify-between\",\r\n          \"gap-1\",\r\n          \"mb-5\",\r\n          isMobile ? \"flex-column\" : \"flex-row\"\r\n        )}\r\n      >\r\n        {calculatorOptions.map((options, index) => (\r\n          <RaijinsSelect\r\n            key={options.key}\r\n            options={options.options}\r\n            handleChange={\r\n              index === 0\r\n                ? (e) => handleRarity(e.target.value)\r\n                : (e) => handleTimeType(e.target.value)\r\n            }\r\n          />\r\n        ))}\r\n      </div>\r\n      <div className={cx(\"text-center\", \"mb-6\")}>\r\n        <RoundButton\r\n          variant=\"primary\"\r\n          text=\"calculate rewards\"\r\n          onBtnClick={handleCalculate}\r\n        />\r\n      </div>\r\n      <div className={cx(\"result-container\", \"mb-3\")}>\r\n        <img src={Arrow1Img} alt=\"arrow.png\" />\r\n        <div className={cx(\"result\")}>{calculatorValue}</div>\r\n        <img src={Arrow1Img} alt=\"arrow.png\" />\r\n      </div>\r\n      <div className=\"raijins-tickets-container\">\r\n        <h5 className=\"title\">raijins tickets</h5>\r\n        <img src={RaijinsTicketImg} alt=\"raijins-ticket.png\" />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RewardCalculator;\r\n","import cx from \"classnames\";\r\n\r\nconst StakingContainer = ({ children }) => {\r\n  return <div className={cx(\"staking-container\")}>{children}</div>;\r\n};\r\n\r\nexport default StakingContainer;\r\n","import cx from \"classnames\";\r\n\r\nimport NiQuizImg from \"assets/images/staking/NiQuiz.png\";\r\nimport Arrow1Img from \"assets/images/common/Arrow1.png\";\r\nimport RaijinsTicketImg from \"assets/images/common/RaijinsTicket.png\";\r\nimport DangerKeepOutImg from \"assets/images/earn/DangerKeepOut.png\";\r\nimport Description from \"../Description\";\r\n\r\nconst StakingDesc = ({ isMobile }) => {\r\n  return (\r\n    <div className={cx(\"staking-desc\")}>\r\n      <div className={cx(\"staking-desc-img-container\")}>\r\n        <img src={NiQuizImg} alt=\"NiQuiz.png\" width=\"100%\" />\r\n      </div>\r\n      <div className={cx(\"staking-description-container\")}>\r\n        <Description classes=\"text-center mb-5\">\r\n          Once staked, each Raijins NFTs will provide you with Raijins Tickets. Amount\r\n          of Raijins Tickets earned will change based on the staking period length\r\n          and type of Raijins NFTs staked.\r\n        </Description>\r\n        <div\r\n          className={cx(\r\n            \"d-flex\",\r\n            \"justify-center\",\r\n            \"align-center\",\r\n            \"gap-2\",\r\n            \"mb-5\"\r\n          )}\r\n        >\r\n          <h5 className={cx(\"text-center\", \"section-title\")}>\r\n            raijins nfts <span className={cx(\"text-danger\")}>staking</span>\r\n          </h5>\r\n          <img\r\n            src={Arrow1Img}\r\n            alt=\"arrow.png\"\r\n            width={isMobile ? \"40px\" : \"80px\"}\r\n          />\r\n          <img\r\n            src={RaijinsTicketImg}\r\n            alt=\"raijins-ticket.png\"\r\n            width={isMobile ? \"100px\" : \"200px\"}\r\n          />\r\n        </div>\r\n        <div\r\n          className={cx(\"d-flex\", \"justify-between\", \"align-center\", \"gap-2\")}\r\n        >\r\n          <img\r\n            src={DangerKeepOutImg}\r\n            alt=\"danger-keep-out.png\"\r\n            width=\"40px\"\r\n            className={isMobile ? \"d-none\" : \"d-block\"}\r\n          />\r\n          <div>\r\n            <p className={cx(\"reward-boost-desc\", \"text-primary\")}>\r\n              Raijins Tickets will be awarded at the end of each staking period.\r\n              Awarded Raijins Tickets can be claimed at anytime by pressing either\r\n              the “CLAIM REWARDS” or the “UNSTAKE” buttons – the latter will\r\n              also unstake your Raijins NFTs. Staking can be undone at any moment;\r\n              however, pending Raijins Tickets will be automatically forfeit\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StakingDesc;\r\n","import { useWeb3React } from \"@web3-react/core\";\r\n\r\nimport Layout from \"components/Layout\";\r\nimport EarnedTickets from \"components/Staking/EarnedTickets\";\r\nimport Hero from \"components/Staking/Hero\";\r\nimport RaijinsStaking from \"components/Staking/RaijinsStaking\";\r\nimport RewardCalculator from \"components/Staking/RewardCalculator\";\r\nimport StakingContainer from \"components/Staking/StakingContainer\";\r\nimport StakingDesc from \"components/Staking/StakingDesc\";\r\nimport { useMediaQuery } from \"@uidotdev/usehooks\";\r\n\r\nimport \"./index.scss\";\r\n\r\n// ================================================\r\n\r\nconst Staking = (props) => {\r\n  const { connectWallet } = props;\r\n\r\n  const { active } = useWeb3React();\r\n  const isMobile = useMediaQuery(\"only screen and (max-width: 640px)\");\r\n\r\n  return (\r\n    <Layout>\r\n      <StakingContainer>\r\n        {!active ? (\r\n          <>\r\n            <Hero connectWallet={connectWallet} />\r\n            <StakingDesc isMobile={isMobile} />\r\n            <EarnedTickets isMobile={isMobile} />\r\n            <RewardCalculator isMobile={isMobile} />\r\n          </>\r\n        ) : (\r\n          <RaijinsStaking isMobile={isMobile} />\r\n        )}\r\n      </StakingContainer>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default Staking;\r\n"],"names":["customStyles","container","provided","_objectSpread","boxShadow","fontFamily","borderRadius","control","backgroundColor","padding","border","option","state","isFocused","singleValue","color","noOptionsMessage","menu","input","_ref","options","value","onChange","_jsx","Select","styles","children","open","onCloseModal","setOpen","onOpenModal","classes","_jsxs","Modal","onClose","center","classNames","modal","concat","onClick","className","src","XImage","alt","cx","data","onNFTImgClick","label","images","map","image","width","day7","day30","day60","day90","day790","tableData","type","Avatar0Img","Avatar1Img","Avatar2Img","Avatar3Img","Avatar4Img","Avatar5Img","reward","isMobile","_useState","useState","_useState2","_slicedToArray","openImgModal","setOpenImgModal","_useState3","_useState4","modalImg","setModalImg","SectionTitle","RaijinsTicketImg","datum","EarnedTicketCard","rowSpan","colSpan","row","idx","RaijinsModal","props","connectWallet","PageTitle","Description","RoundButton","variant","text","onBtnClick","VitaImg","nft","timeTypeInfo","currentTimeType","index","selectStatusInWallet","handleSelectNFTInWallet","name","id","period","rewards","checked","htmlFor","selectStatusStaked","handleSelectNFTStaked","autoRestake","CircularArrowImg","leftTime","timeType","nextTicket","claimableTicket","walletNFTSelection","stakedNFTSelection","_useWeb3React","useWeb3React","active","library","account","setCurrentTimeType","disabledClaimBtn","setDisabledClaimBtn","_useState5","_useState6","disabledUnStakeBtn","setDisabledUnStakeBtn","_useState7","_useState8","setSelectStatusInWallet","_useState9","_useState10","setSelectStatusStaked","_useState11","_useState12","isApproving","setIsApproving","_useState13","_useState14","isWaitingForApproval","setIsWaitingForApproval","_useState15","_useState16","isSubmitting","setIsSubmitting","_useState17","COLLECTION_OPTIONS","_useState18","selectedCollection","setSelectedCollection","regInputForCollectionId","React","chainId","useChainId","stakingRaijinsAddress","getContract","nftAddresses","RAIJINS_NFTS","item","address","dataWallet","useSWR","fetcher","contractFetcher","StakingRaijins","nftsInWallet","undefined","length","i","toLowerCase","token_address","nftInfo","imageURL","imageHash","VOLUME1_METADATA","Number","token_id","toString","imageType","rarity","REWARD_AMOUNTS","filter","loadWalletNFTs","dataContract","nftsStaked","tokenId","parseInt","startTime","isClaimed","pendingTicket","formatAmount","endTime","currentTime","Date","getTime","loadStakedNFTs","_address","collectionApprovals","needApproval","filteredCollectionApprovals","isApproval","_useState19","_useState20","disabledStakeBtn","setDisabledStakeBtn","itemInfo","selectedItem","find","push","items","_loop","_loop2","handleUnselectAllInWallet","handleUnselectAllStaked","approveFromNFT","tokenAddress","spender","onApproveSubmitted","pendingTxns","setPendingTxns","includeMessage","ethers","Token","getSigner","setApprovalForAll","then","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","res","txUrl","pendingTxn","wrap","_context","prev","next","getExplorerUrl","hash","helperToast","success","ExternalLink","href","message","_toConsumableArray","stop","_x","apply","arguments","catch","e","_e$data","_e$message","failMsg","console","error","includes","finally","approveNFT","useEffect","Combobox","ref","selectedOption","Tabs","TabList","Tab","TabPanel","RaijinsStakingCard","disabled","nftToStake","contract","callContract","sentMsg","btn","handleTimeType","RaijinsStakedCard","nftToClaim","_ref3","_callee2","_context2","_x2","nftToUnStake","_ref4","_callee3","_context3","_x3","handleChange","calculatorOptions","key","calculatorValue","setCalculatorValue","setRarity","setTimeType","RaijinsSelect","handleRarity","target","Arrow1Img","NiQuizImg","DangerKeepOutImg","useMediaQuery","Layout","StakingContainer","RaijinsStaking","_Fragment","Hero","StakingDesc","EarnedTickets","RewardCalculator"],"sourceRoot":""}