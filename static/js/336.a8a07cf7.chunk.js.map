{"version":3,"file":"static/js/336.a8a07cf7.chunk.js","mappings":"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","sources":["components/SectionTitle/index.jsx","components/Staking/StakingContainer.jsx","components/Staking/StakingDesc.jsx","lib/approveNFT.tsx","components/Staking/Matic/HeroMatic.jsx","components/Staking/Matic/RaijinsStakingCardMatic.jsx","components/Staking/Matic/RaijinsStakingMatic.jsx","pages/StakingM/index.jsx"],"sourcesContent":["import cx from \"classnames\";\r\nimport \"./index.scss\";\r\n\r\n// ================================================\r\n\r\nconst SectionTitle = ({ children, classes }) => {\r\n  return <h2 className={cx(\"section-title\", classes)}>{children}</h2>;\r\n};\r\n\r\nexport default SectionTitle;\r\n","import cx from \"classnames\";\r\n\r\nconst StakingContainer = ({ children }) => {\r\n  return <div className={cx(\"staking-container\")}>{children}</div>;\r\n};\r\n\r\nexport default StakingContainer;\r\n","import cx from \"classnames\";\r\n\r\nimport NiQuizImg from \"assets/images/staking/NiQuiz.png\";\r\nimport Arrow1Img from \"assets/images/common/Arrow1.png\";\r\nimport RaijinsTicketImg from \"assets/images/common/RaijinsTicket.png\";\r\nimport DangerKeepOutImg from \"assets/images/earn/DangerKeepOut.png\";\r\nimport Description from \"../Description\";\r\n\r\nconst StakingDesc = ({ isMobile }) => {\r\n  return (\r\n    <div className={cx(\"staking-desc\")}>\r\n      {/* <div className={cx(\"staking-desc-img-container\")}>\r\n        <img src={NiQuizImg} alt=\"NiQuiz.png\" width=\"100%\" />\r\n      </div> */}\r\n      {/* <div className={cx(\"staking-description-container\")}>\r\n        <Description classes=\"text-center mb-5\">\r\n          Once staked, each Raijins NFTs will provide you with Raijins Tickets. Amount\r\n          of Raijins Tickets earned will change based on the staking period length\r\n          and type of Raijins NFTs staked.\r\n        </Description>\r\n        <div\r\n          className={cx(\r\n            \"d-flex\",\r\n            \"justify-center\",\r\n            \"align-center\",\r\n            \"gap-2\",\r\n            \"mb-5\"\r\n          )}\r\n        >\r\n          <h5 className={cx(\"text-center\", \"section-title\")}>\r\n            raijins nfts <span className={cx(\"text-danger\")}>staking</span>\r\n          </h5>\r\n          <img\r\n            src={Arrow1Img}\r\n            alt=\"arrow.png\"\r\n            width={isMobile ? \"40px\" : \"80px\"}\r\n          />\r\n          <img\r\n            src={RaijinsTicketImg}\r\n            alt=\"raijins-ticket.png\"\r\n            width={isMobile ? \"100px\" : \"200px\"}\r\n          />\r\n        </div>\r\n        <div\r\n          className={cx(\"d-flex\", \"justify-between\", \"align-center\", \"gap-2\")}\r\n        >\r\n          <img\r\n            src={DangerKeepOutImg}\r\n            alt=\"danger-keep-out.png\"\r\n            width=\"40px\"\r\n            className={isMobile ? \"d-none\" : \"d-block\"}\r\n          />\r\n          <div>\r\n            <p className={cx(\"reward-boost-desc\", \"text-primary\")}>\r\n              Raijins Tickets will be awarded at the end of each staking period.\r\n              Awarded Raijins Tickets can be claimed at anytime by pressing either\r\n              the “CLAIM REWARDS” or the “UNSTAKE” buttons – the latter will\r\n              also unstake your Raijins NFTs. Staking can be undone at any moment;\r\n              however, pending Raijins Tickets will be automatically forfeit\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </div> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StakingDesc;\r\n","import { ethers } from \"ethers\";\r\nimport Token from \"abis/Raijins.json\";\r\nimport { getExplorerUrl } from \"config/chains\";\r\nimport { helperToast } from \"lib/helperToast\";\r\nimport { Web3ReactContextInterface } from \"@web3-react/core/dist/types\";\r\nimport ExternalLink from \"components/ExternalLink/ExternalLink\";\r\n\r\ntype Params = {\r\n  setIsApproving: (val: boolean) => void;\r\n  library: Web3ReactContextInterface[\"library\"];\r\n  tokenAddress: string;\r\n  spender: string;\r\n  chainId: number;\r\n  onApproveSubmitted: () => void;\r\n  pendingTxns: any[];\r\n  setPendingTxns: (txns: any[]) => void;\r\n  includeMessage?: boolean;\r\n};\r\n\r\nexport function approveNFT({\r\n  setIsApproving,\r\n  library,\r\n  tokenAddress,\r\n  spender,\r\n  chainId,\r\n  onApproveSubmitted,\r\n  pendingTxns,\r\n  setPendingTxns,\r\n  includeMessage,\r\n}: Params) {\r\n  setIsApproving(true);\r\n  const contract = new ethers.Contract(tokenAddress, Token, library.getSigner());\r\n  contract\r\n    .setApprovalForAll(spender, true)\r\n    .then(async (res) => {\r\n      const txUrl = getExplorerUrl(chainId) + \"tx/\" + res.hash;\r\n      helperToast.success(\r\n        <div>\r\n          Approval submitted! <ExternalLink href={txUrl}>View status.</ExternalLink>\r\n          <br />\r\n        </div>\r\n      );\r\n      if (onApproveSubmitted) {\r\n        onApproveSubmitted();\r\n      }\r\n      if (pendingTxns && setPendingTxns) {\r\n        const pendingTxn = {\r\n          hash: res.hash,\r\n          message: includeMessage ? `Raijins NFT Approved!` : false,\r\n        };\r\n        setPendingTxns([...pendingTxns, pendingTxn]);\r\n      }\r\n    })\r\n    .catch((e) => {\r\n      console.error(e);\r\n      let failMsg;\r\n      if (\r\n        [\"not enough funds for gas\", \"failed to execute call with revert code InsufficientGasFunds\"].includes(\r\n          e.data?.message\r\n        )\r\n      ) {\r\n        failMsg = (\r\n          <div>\r\n            There is not enough MATIC in your account on Polygon to send this transaction.\r\n            <br />\r\n            <br />\r\n            <ExternalLink href=\"https://www.mexc.com/\">Bridge MATIC to Polygon</ExternalLink>\r\n          </div>\r\n        );\r\n      } else if (e.message?.includes(\"User denied transaction signature\")) {\r\n        failMsg = `Approval was cancelled`;\r\n      } else {\r\n        failMsg = `Approval failed`;\r\n      }\r\n      helperToast.error(failMsg);\r\n    })\r\n    .finally(() => {\r\n      setIsApproving(false);\r\n    });\r\n}\r\n","import cx from \"classnames\";\r\nimport Description from \"../../Description\";\r\nimport PageTitle from \"../../PageTitle\";\r\nimport RoundButton from \"../../RoundButton\";\r\n\r\n// import VitaImg from \"assets/images/staking/Vita.png\";\r\n// import ScrollButton from \"components/ScrollButton\";\r\n\r\nconst Hero = (props) => {\r\n  const { connectWallet } = props;\r\n\r\n  return (\r\n    <div className={cx(\"staking-hero\")}>\r\n      <div className={cx(\"page-intro\")}>\r\n        <PageTitle>\r\n          Raijins staking for <span>$MATIC</span>\r\n        </PageTitle>\r\n        <Description>\r\n          Connect your wallet to start staking your Raijins NFTs.\r\n        </Description>\r\n        <Description>For more information, scroll down</Description>\r\n        <RoundButton\r\n          variant=\"primary\"\r\n          text=\"connect wallet\"\r\n          onBtnClick={connectWallet}\r\n        />\r\n      </div>\r\n      {/* <div className={cx(\"hero-img-container\")}>\r\n        <img src={VitaImg} alt=\"vita.png\" width=\"80%\" />\r\n      </div> */}\r\n      {/* <div className={cx(\"scrollbtn-wrapper\")}>\r\n        <ScrollButton />\r\n      </div> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Hero;\r\n","import cx from \"classnames\";\r\n\r\nconst RaijinsStakingCard = ({\r\n  nft,\r\n  timeTypeInfo,\r\n  currentTimeType,\r\n  index,\r\n  selectStatusInWallet,\r\n  handleSelectNFTInWallet,\r\n}) => {\r\n  return (\r\n    <div className={cx(\"raijins-staking-card\")}>\r\n      <p className={cx(\"text-secondary\", \"uppercase\", \"mb-1\")}>\r\n        <span className={cx(\"text-primary\", \"italic\")}>\r\n          {nft.name} #{nft.id}\r\n        </span>\r\n      </p>\r\n      <div className={cx(\"img-container\")}>\r\n        <img src={nft.image} alt={`${nft.image}`} width=\"100%\" />\r\n      </div>\r\n      <div className=\"raijins-checkbox\">\r\n        <input\r\n          type=\"checkbox\"\r\n          id={`raijinsCheckbox-${index}`}\r\n          checked={selectStatusInWallet[index] === true}\r\n          onChange={() => handleSelectNFTInWallet(index)}\r\n          value={selectStatusInWallet[index]}\r\n        />\r\n        <label htmlFor={`raijinsCheckbox-${index}`}></label>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RaijinsStakingCard;\r\n","import { useWeb3React } from \"@web3-react/core\";\r\nimport cx from \"classnames\";\r\nimport useSWR from \"swr\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { ethers } from \"ethers\";\r\n\r\nimport SectionTitle from \"../../SectionTitle\";\r\nimport { Tab, Tabs, TabList, TabPanel } from \"react-tabs\";\r\nimport \"react-tabs/style/react-tabs.css\";\r\n// import TableDecoImg from \"assets/images/staking/tableDeco.png\";\r\n// import CircularArrowImg from \"assets/images/common/Arrow.png\";\r\n// import XImage from \"assets/images/common/XLight.png\";\r\nimport RoundButton from \"../../RoundButton\";\r\nimport { getContract } from \"config/contracts\";\r\nimport { RAIJINS_NFTS, VOLUME1_METADATA, COLLECTION_OPTIONS } from \"config/staking\";\r\nimport { callContract, contractFetcher } from \"lib/contracts\";\r\nimport { useChainId } from \"lib/chains\";\r\nimport { approveNFT } from \"lib/approveNFT\";\r\nimport StakingRaijinsMatic from \"abis/StakingRaijinsMatic.json\";\r\nimport Raijins from \"abis/Raijins.json\";\r\nimport RaijinsStakingCard from \"./RaijinsStakingCardMatic\";\r\n// import Combobox from '../Combobox/Combobox';\r\nimport {\r\n  formatAmount,\r\n} from \"lib/numbers\";\r\n\r\nconst loadWalletNFTs = (dataWallet) => {\r\n  if (dataWallet === undefined) return [];\r\n\r\n  if (dataWallet.length === 0) return [];\r\n\r\n  const ret = dataWallet.map((item) => {\r\n    let index = -1;\r\n\r\n    for (let i = 0; i < RAIJINS_NFTS.length; i++) {\r\n      if (\r\n        RAIJINS_NFTS[i].address.toLowerCase() === item.token_address.toLowerCase()\r\n      ) {\r\n        index = i;\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (index === -1) return null;\r\n\r\n    const nftInfo = RAIJINS_NFTS[index];\r\n    let imageURL = \"\";\r\n    if (nftInfo.name === \"LIFE OF HEL - Volume 1\")\r\n      imageURL = `${nftInfo.imageHash}${VOLUME1_METADATA[Number(item.token_id.toString()) - 1]\r\n        }.${nftInfo.imageType}`;\r\n    else\r\n      imageURL = `${nftInfo.imageHash}${Number(item.token_id.toString())}.${nftInfo.imageType\r\n        }`;\r\n\r\n    return {\r\n      id: item.token_id.toString(),\r\n      name: item.name,\r\n      address: nftInfo.address,\r\n      image: imageURL\r\n    };\r\n  });\r\n\r\n  const finalArray = ret.filter((item) => item !== null);\r\n  return finalArray;\r\n};\r\n\r\nconst loadStakedNFTs = (dataContract) => {\r\n  if (dataContract === undefined) return [];\r\n\r\n  if (dataContract.length === 0) return [];\r\n\r\n  const ret = dataContract.map((item) => {\r\n    let index = -1;\r\n\r\n    for (let i = 0; i < RAIJINS_NFTS.length; i++) {\r\n      if (RAIJINS_NFTS[i].address.toLowerCase() === item[0].toLowerCase()) {\r\n        index = i;\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (index === -1) return null;\r\n\r\n    const nftInfo = RAIJINS_NFTS[index];\r\n    const tokenId = parseInt(item[1].toString());\r\n\r\n    let imageURL = \"\";\r\n    if (nftInfo.name === \"LIFE OF HEL - Volume 1\")\r\n      imageURL = `${nftInfo.imageHash}${VOLUME1_METADATA[Number(item[1].toString()) - 1]\r\n        }.${nftInfo.imageType}`;\r\n    else\r\n      imageURL = `${nftInfo.imageHash}${Number(item[1].toString())}.${nftInfo.imageType\r\n        }`;\r\n\r\n    return {\r\n      name: nftInfo.name,\r\n      image: imageURL,\r\n      address: nftInfo.address,\r\n      id: tokenId\r\n    };\r\n  });\r\n\r\n  const finalArray = ret.filter((item) => item !== null);\r\n  return finalArray;\r\n};\r\n\r\nlet walletNFTSelection = [];\r\nlet stakedNFTSelection = [];\r\n\r\nconst RaijinsStaking = ({ isMobile }) => {\r\n  const { active, library, account } = useWeb3React();\r\n\r\n  const [disabledClaimBtn, setDisabledClaimBtn] = useState(true);\r\n  const [disabledUnStakeBtn, setDisabledUnStakeBtn] = useState(true);\r\n  // const [disabledAddRestakeBtn, setDisabledAddRestakeBtn] = useState(true);\r\n  // const [disabledCancelRestakeBtn, setDisabledCancelRestakeBtn] = useState(true);\r\n  const [selectStatusInWallet, setSelectStatusInWallet] = useState([]);\r\n  const [selectStatusStaked, setSelectStatusStaked] = useState([]);\r\n  const [isApproving, setIsApproving] = useState(false);\r\n  const [isWaitingForApproval, setIsWaitingForApproval] = useState(false);\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const [selectedCollection/*, setSelectedCollection */] = useState(COLLECTION_OPTIONS[0]);\r\n\r\n  const { chainId } = useChainId();\r\n  const stakingRaijinsMaticAddress = getContract(chainId, \"StakingRaijinsMatic\");\r\n  const raijinsAddress = getContract(chainId, \"Raijins\");\r\n\r\n  const nftAddresses = RAIJINS_NFTS.map((item) => item.address);\r\n  //////////Reward Status/////////////////////////////////////////////////////////////////////////////////////\r\n  const { data: nftBalance } = useSWR(\r\n    active &&\r\n    raijinsAddress && [\r\n      active,\r\n      chainId,\r\n      raijinsAddress,\r\n      \"balanceOf\",\r\n      stakingRaijinsMaticAddress\r\n    ],\r\n    { fetcher: contractFetcher(library, Raijins) }\r\n  );\r\n\r\n  const { data: totalDistributedMatic } = useSWR(\r\n    active &&\r\n    stakingRaijinsMaticAddress && [\r\n      active,\r\n      chainId,\r\n      stakingRaijinsMaticAddress,\r\n      \"totalDistributed\"\r\n    ],\r\n    { fetcher: contractFetcher(library, StakingRaijinsMatic) }\r\n  );\r\n\r\n  const { data: userSatus } = useSWR(\r\n    active &&\r\n    stakingRaijinsMaticAddress && [\r\n      active,\r\n      chainId,\r\n      stakingRaijinsMaticAddress,\r\n      \"getUserStatus\",\r\n      raijinsAddress,\r\n      account\r\n    ],\r\n    { fetcher: contractFetcher(library, StakingRaijinsMatic) }\r\n  );\r\n\r\n  //////////Reading Wallet///////////////////////////////////////////////////////////////////////////////////////////////////\r\n  const { data: dataWallet } = useSWR(\r\n    active &&\r\n    stakingRaijinsMaticAddress && [\r\n      active,\r\n      chainId,\r\n      stakingRaijinsMaticAddress,\r\n      \"getTokensInWallet\",\r\n      nftAddresses,\r\n      account\r\n    ],\r\n    { fetcher: contractFetcher(library, StakingRaijinsMatic) }\r\n  );\r\n  const filteredDataWallet = dataWallet ? dataWallet.filter((item) => item.token_address.toLowerCase() === selectedCollection.address.toLowerCase()) : [];\r\n  let nftsInWallet = loadWalletNFTs(filteredDataWallet);\r\n  //////////Reading Staking Contract////////////////////////////////////////////////////////////////////////////////////////////////////\r\n  const { data: dataContract } = useSWR(\r\n    active &&\r\n    stakingRaijinsMaticAddress && [\r\n      active,\r\n      chainId,\r\n      stakingRaijinsMaticAddress,\r\n      \"getStakingInfo\",\r\n      nftAddresses,\r\n      account,\r\n    ],\r\n    { fetcher: contractFetcher(library, StakingRaijinsMatic) }\r\n  );\r\n  const filteredDataContract = dataContract ? dataContract.filter((item) => item._address.toLowerCase() === selectedCollection.address.toLowerCase()) : [];\r\n  const nftsStaked = loadStakedNFTs(filteredDataContract);\r\n\r\n  /////////Approval Status/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n  const { data: collectionApprovals } = useSWR(\r\n    active &&\r\n    stakingRaijinsMaticAddress && [\r\n      active,\r\n      chainId,\r\n      stakingRaijinsMaticAddress,\r\n      \"getApprovalStatus\",\r\n      nftAddresses,\r\n      account,\r\n    ],\r\n    { fetcher: contractFetcher(library, StakingRaijinsMatic) }\r\n  );\r\n\r\n  let needApproval = true;\r\n  if (collectionApprovals) {\r\n    const filteredCollectionApprovals = collectionApprovals ? collectionApprovals.filter((item) => item.token_address.toLowerCase() === selectedCollection.address.toLowerCase()) : [];\r\n    needApproval = !filteredCollectionApprovals[0].isApproval;\r\n  }\r\n\r\n  const [disabledStakeBtn, setDisabledStakeBtn] = useState(!needApproval);\r\n\r\n  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n  const handleSelectNFTInWallet = (index) => {\r\n    const itemInfo = nftsInWallet[index];\r\n\r\n    const selectedItem = walletNFTSelection.find(\r\n      (item) =>\r\n        item.id === itemInfo.id &&\r\n        item.address === itemInfo.address.toLowerCase()\r\n    );\r\n    if (selectedItem === undefined)\r\n      walletNFTSelection.push({\r\n        id: itemInfo.id,\r\n        address: itemInfo.address.toLowerCase(),\r\n      });\r\n    else\r\n      walletNFTSelection = walletNFTSelection.filter(\r\n        (item) => item !== selectedItem\r\n      );\r\n\r\n    let items = [];\r\n    for (let i = 0; i < nftsInWallet.length; i++) {\r\n      const itemInfo = nftsInWallet[i];\r\n      const currentItem = walletNFTSelection.find(\r\n        (item) =>\r\n          item.id === itemInfo.id &&\r\n          item.address === itemInfo.address.toLowerCase()\r\n      );\r\n      if (currentItem === undefined) items.push(false);\r\n      else items.push(true);\r\n    }\r\n    setSelectStatusInWallet(items);\r\n\r\n    if (walletNFTSelection.length === 0 && !needApproval)\r\n      setDisabledStakeBtn(true);\r\n    else setDisabledStakeBtn(false);\r\n  };\r\n\r\n  const handleSelectNFTStaked = (index) => {\r\n    const itemInfo = nftsStaked[index];\r\n\r\n    const selectedItem = stakedNFTSelection.find(\r\n      (item) =>\r\n        item.id === itemInfo.id &&\r\n        item.address === itemInfo.address.toLowerCase()\r\n    );\r\n    if (selectedItem === undefined)\r\n      stakedNFTSelection.push({\r\n        id: itemInfo.id,\r\n        address: itemInfo.address.toLowerCase(),\r\n      });\r\n    else\r\n      stakedNFTSelection = stakedNFTSelection.filter(\r\n        (item) => item !== selectedItem\r\n      );\r\n\r\n    let items = [];\r\n    for (let i = 0; i < nftsStaked.length; i++) {\r\n      const itemInfo = nftsStaked[i];\r\n      const currentItem = stakedNFTSelection.find(\r\n        (item) =>\r\n          item.id === itemInfo.id &&\r\n          item.address === itemInfo.address.toLowerCase()\r\n      );\r\n      if (currentItem === undefined) items.push(false);\r\n      else items.push(true);\r\n    }\r\n    setSelectStatusStaked(items);\r\n\r\n    if (stakedNFTSelection.length === 0) {\r\n      setDisabledUnStakeBtn(true);\r\n      // setDisabledAddRestakeBtn(true);\r\n      // setDisabledCancelRestakeBtn(true);\r\n    } else {\r\n      setDisabledUnStakeBtn(false);\r\n      // setDisabledAddRestakeBtn(false);\r\n      // setDisabledCancelRestakeBtn(false);\r\n    }\r\n  };\r\n\r\n  const handleSelectAllInWallet = () => {\r\n    let items = [];\r\n    walletNFTSelection = [];\r\n    for (let i = 0; i < nftsInWallet.length; i++) {\r\n      const itemInfo = nftsInWallet[i];\r\n      walletNFTSelection.push({\r\n        id: itemInfo.id,\r\n        address: itemInfo.address.toLowerCase(),\r\n      });\r\n      items.push(true);\r\n    }\r\n    setSelectStatusInWallet(items);\r\n\r\n    setDisabledStakeBtn(false);\r\n  };\r\n\r\n  const handleUnselectAllInWallet = () => {\r\n    let items = [];\r\n    walletNFTSelection = [];\r\n    setSelectStatusInWallet(items);\r\n    setDisabledStakeBtn(true);\r\n  };\r\n\r\n  const handleSelectAllStaked = () => {\r\n    let items = [];\r\n    stakedNFTSelection = [];\r\n    for (let i = 0; i < nftsStaked.length; i++) {\r\n      const itemInfo = nftsStaked[i];\r\n      stakedNFTSelection.push({\r\n        id: itemInfo.id,\r\n        address: itemInfo.address.toLowerCase(),\r\n      });\r\n      items.push(true);\r\n    }\r\n    setSelectStatusStaked(items);\r\n\r\n    setDisabledUnStakeBtn(false);\r\n    // setDisabledAddRestakeBtn(false);\r\n    // setDisabledCancelRestakeBtn(false);\r\n  };\r\n\r\n  const handleUnselectAllStaked = () => {\r\n    let items = [];\r\n    stakedNFTSelection = [];\r\n    setSelectStatusStaked(items);\r\n\r\n    setDisabledUnStakeBtn(true);\r\n    // setDisabledAddRestakeBtn(true);\r\n    // setDisabledCancelRestakeBtn(true);\r\n  };\r\n\r\n  const approveFromNFT = () => {\r\n    if (needApproval) {\r\n      approveNFT({\r\n        setIsApproving,\r\n        library,\r\n        tokenAddress: selectedCollection.address,\r\n        spender: stakingRaijinsMaticAddress,\r\n        chainId: chainId,\r\n        onApproveSubmitted: () => {\r\n          setIsWaitingForApproval(true);\r\n        },\r\n      });\r\n\r\n      return;\r\n    }\r\n  };\r\n\r\n  const handleStake = () => {\r\n    if (needApproval) {\r\n      approveFromNFT();\r\n      return;\r\n    }\r\n\r\n    setIsSubmitting(true);\r\n\r\n    const nftToStake = walletNFTSelection.map((item) => {\r\n      return item.address;\r\n    });\r\n\r\n    const tokenId = walletNFTSelection.map((item) => {\r\n      return item.id;\r\n    });\r\n\r\n    const contract = new ethers.Contract(\r\n      stakingRaijinsMaticAddress,\r\n      StakingRaijinsMatic,\r\n      library.getSigner()\r\n    );\r\n    callContract(chainId, contract, \"stake\", [nftToStake, tokenId], {\r\n      sentMsg: \"Staking Raijins NFT submitted!\",\r\n      failMsg: \"Staking Raijins NFT failed.\",\r\n      // setPendingTxns,\r\n    })\r\n      .then(async (res) => {\r\n        // setIsVisible(false);\r\n        // setOpenBuyModal(true);\r\n        // setOpenBoughtModal(false);\r\n      })\r\n      .finally(() => {\r\n        // setIsStaking(false);\r\n        // setOpenBuyModal(false);\r\n        // setOpenBoughtModal(true);\r\n        setIsSubmitting(false);\r\n      });\r\n\r\n    handleUnselectAllInWallet();\r\n  };\r\n\r\n  const getTextStake = () => {\r\n    if (needApproval && isWaitingForApproval) {\r\n      return \"Waiting for Approval...\";\r\n    }\r\n    if (isApproving) {\r\n      return \"Approving\";\r\n    }\r\n    if (needApproval) {\r\n      return \"Approve\";\r\n    }\r\n\r\n    if (isSubmitting) {\r\n      return \"Staking...\";\r\n    }\r\n\r\n    return \"Stake\";\r\n  };\r\n\r\n  const handleClaim = () => {\r\n    const contract = new ethers.Contract(\r\n      stakingRaijinsMaticAddress,\r\n      StakingRaijinsMatic,\r\n      library.getSigner()\r\n    );\r\n    callContract(chainId, contract, \"claimRewards\", [raijinsAddress], {\r\n      sentMsg: \"Claim Raijins Ticket submitted!\",\r\n      failMsg: \"Claim Raijins Ticket failed.\",\r\n      // setPendingTxns,\r\n    })\r\n      .then(async (res) => {\r\n        // setIsVisible(false);\r\n        // setOpenBuyModal(true);\r\n        // setOpenBoughtModal(false);\r\n      })\r\n      .finally(() => {\r\n        // setIsStaking(false);\r\n        // setOpenBuyModal(false);\r\n        // setOpenBoughtModal(true);\r\n      });\r\n\r\n    handleUnselectAllStaked();\r\n  };\r\n\r\n  const handleUnStake = () => {\r\n    const nftToUnStake = stakedNFTSelection.map((item) => {\r\n      return item.address;\r\n    });\r\n\r\n    const tokenId = stakedNFTSelection.map((item) => {\r\n      return item.id;\r\n    });\r\n\r\n    const contract = new ethers.Contract(\r\n      stakingRaijinsMaticAddress,\r\n      StakingRaijinsMatic,\r\n      library.getSigner()\r\n    );\r\n    callContract(chainId, contract, \"unStake\", [nftToUnStake, tokenId], {\r\n      sentMsg: \"Unstake Raijins NFT submitted!\",\r\n      failMsg: \"Unstake Raijins NFT failed.\",\r\n      // setPendingTxns,\r\n    })\r\n      .then(async (res) => {\r\n        // setIsVisible(false);\r\n        // setOpenBuyModal(true);\r\n        // setOpenBoughtModal(false);\r\n      })\r\n      .finally(() => {\r\n        // setIsStaking(false);\r\n        // setOpenBuyModal(false);\r\n        // setOpenBoughtModal(true);\r\n      });\r\n\r\n    handleUnselectAllStaked();\r\n  };\r\n\r\n  // const handleAddRestake = () => {\r\n  //   const nftToAddRestake = stakedNFTSelection.map((item) => {\r\n  //     return item.address;\r\n  //   });\r\n\r\n  //   const tokenId = stakedNFTSelection.map((item) => {\r\n  //     return item.id;\r\n  //   });\r\n\r\n  //   const contract = new ethers.Contract(\r\n  //     stakingRaijinsMaticAddress,\r\n  //     StakingRaijins,\r\n  //     library.getSigner()\r\n  //   );\r\n  //   callContract(\r\n  //     chainId,\r\n  //     contract,\r\n  //     \"addAutoRestake\",\r\n  //     [nftToAddRestake, tokenId],\r\n  //     {\r\n  //       sentMsg: \"Add AutoRestake Raijins NFT submitted!\",\r\n  //       failMsg: \"Add AutoRestake Raijins NFT failed.\",\r\n  //       // setPendingTxns,\r\n  //     }\r\n  //   )\r\n  //     .then(async (res) => {\r\n  //       // setIsVisible(false);\r\n  //       // setOpenBuyModal(true);\r\n  //       // setOpenBoughtModal(false);\r\n  //     })\r\n  //     .finally(() => {\r\n  //       // setIsStaking(false);\r\n  //       // setOpenBuyModal(false);\r\n  //       // setOpenBoughtModal(true);\r\n  //     });\r\n\r\n  //   handleUnselectAllStaked();\r\n  // };\r\n\r\n  // const handleCancelRestake = () => {\r\n  //   const nftToCancelRestake = stakedNFTSelection.map((item) => {\r\n  //     return item.address;\r\n  //   });\r\n\r\n  //   const tokenId = stakedNFTSelection.map((item) => {\r\n  //     return item.id;\r\n  //   });\r\n\r\n  //   const contract = new ethers.Contract(\r\n  //     stakingRaijinsMaticAddress,\r\n  //     StakingRaijins,\r\n  //     library.getSigner()\r\n  //   );\r\n  //   callContract(\r\n  //     chainId,\r\n  //     contract,\r\n  //     \"removeAutoRestake\",\r\n  //     [nftToCancelRestake, tokenId],\r\n  //     {\r\n  //       sentMsg: \"Cancel AutoRestake Raijins NFT submitted!\",\r\n  //       failMsg: \"Cancel AutoRestake Raijins NFT failed.\",\r\n  //       // setPendingTxns,\r\n  //     }\r\n  //   )\r\n  //     .then(async (res) => {\r\n  //       // setIsVisible(false);\r\n  //       // setOpenBuyModal(true);\r\n  //       // setOpenBoughtModal(false);\r\n  //     })\r\n  //     .finally(() => {\r\n  //       // setIsStaking(false);\r\n  //       // setOpenBuyModal(false);\r\n  //       // setOpenBoughtModal(true);\r\n  //     });\r\n\r\n  //   handleUnselectAllStaked();\r\n  // };\r\n\r\n  useEffect(() => {\r\n    if (needApproval) setIsWaitingForApproval(false);\r\n  }, [needApproval, active]);\r\n\r\n  useEffect(() => {\r\n    if (parseFloat(userSatus?._pendingReward?.toString()) > 0)\r\n      setDisabledClaimBtn(false);\r\n    else\r\n      setDisabledClaimBtn(true);\r\n  }, [userSatus?._pendingReward])\r\n\r\n  useEffect(() => {\r\n    handleUnselectAllInWallet();\r\n    handleUnselectAllStaked();\r\n  }, [selectedCollection]);\r\n\r\n  return (\r\n    <div className={cx(\"raijins-staking\")}>\r\n      <SectionTitle classes=\"mb-5\">\r\n        Raijins staking for <span>$MATIC</span>\r\n      </SectionTitle>\r\n      <div className={cx(\"table-wrapper\")}>\r\n        <table>\r\n          <tr>\r\n            <td className=\"text-right\">\r\n              Total Raijins Staked:\r\n            </td>\r\n            <td className=\"text-left text-danger\">{nftBalance?.toString()}</td>\r\n          </tr>\r\n          <tr>\r\n            <td className=\"text-right\">\r\n              Total Distributed Matic:\r\n            </td>\r\n            <td className=\"text-left text-danger\">{formatAmount(totalDistributedMatic?.toString(), 18, 2)}</td>\r\n          </tr>\r\n          <tr>\r\n            <td className=\"text-right\">\r\n              Your Claimed Amount:\r\n            </td>\r\n            <td className=\"text-left text-danger\">{formatAmount(userSatus?._claimedReward?.toString(), 18, 2)}</td>\r\n          </tr>\r\n          <tr>\r\n            <td className=\"text-right\">\r\n              Your Claimable Amount:\r\n            </td>\r\n            <td className=\"text-left text-danger\">{formatAmount(userSatus?._pendingReward?.toString(), 18, 2)}</td>\r\n          </tr>\r\n        </table>\r\n      </div>\r\n        <RoundButton\r\n          key=\"claim\"\r\n          text=\"claim rewards\"\r\n          variant=\"transparent\"\r\n          disabled={disabledClaimBtn}\r\n          onBtnClick={handleClaim}\r\n          classes=\"mb-5\"\r\n        />\r\n      <Tabs className={cx(\"raijins-staking-tabs-m\")}>\r\n        <TabList>\r\n          <Tab>\r\n            {/* <h6>Volumes</h6> */}\r\n            <p>\r\n              <span>{nftsInWallet ? nftsInWallet.length : 0}</span> in wallet\r\n            </p>\r\n          </Tab>\r\n          <Tab>\r\n            {/* <h6>Avatars</h6> */}\r\n            <p>\r\n              <span>{nftsStaked ? nftsStaked.length : 0}</span> staked\r\n            </p>\r\n          </Tab>\r\n        </TabList>\r\n\r\n        <TabPanel>\r\n          {isMobile ? (\r\n            <div className={cx(\"cards-wrapper\", \"mb-5\")}>\r\n              {nftsInWallet && nftsInWallet.length ? (\r\n                nftsInWallet.map((item, index) => {\r\n                  return (\r\n                    <RaijinsStakingCard\r\n                      nft={item}\r\n                      key={index}\r\n                      index={index}\r\n                      selectStatusInWallet={selectStatusInWallet}\r\n                      handleSelectNFTInWallet={handleSelectNFTInWallet}\r\n                    />\r\n                  );\r\n                })\r\n              ) : (\r\n                <div className={cx(\"p-1\", \"text-center\", \"text-danger\")}>\r\n                  No NFTs in wallet\r\n                </div>\r\n              )}\r\n            </div>\r\n          ) : (\r\n            <div className={cx(\"table-wrapper\", \"mb-5\")}>\r\n              {nftsInWallet && nftsInWallet.length ? (\r\n                nftsInWallet.map((item, index) => {\r\n                  return (\r\n                    <RaijinsStakingCard\r\n                      nft={item}\r\n                      key={index}\r\n                      index={index}\r\n                      selectStatusInWallet={selectStatusInWallet}\r\n                      handleSelectNFTInWallet={handleSelectNFTInWallet}\r\n                    />\r\n                  );\r\n                })\r\n              ) : (\r\n                <div className={cx(\"p-1\", \"text-center\", \"text-danger\")}>\r\n                  No NFTs in wallet\r\n                </div>\r\n              )}\r\n            </div>\r\n          )}\r\n          <div className=\"btn-group\">\r\n            <button\r\n              className={cx(\"select-all-btn\")}\r\n              onClick={handleSelectAllInWallet}\r\n            >\r\n              select all\r\n            </button>\r\n            <RoundButton\r\n              key=\"stake\"\r\n              text={getTextStake()}\r\n              variant=\"primary\"\r\n              disabled={disabledStakeBtn}\r\n              onBtnClick={handleStake}\r\n            />\r\n          </div>\r\n        </TabPanel>\r\n        <TabPanel>\r\n          {isMobile ? (\r\n            <div className={cx(\"cards-wrapper\", \"mb-5\")}>\r\n              {nftsStaked && nftsStaked.length ? (\r\n                nftsStaked.map((item, index) => {\r\n                  return (\r\n                    <RaijinsStakingCard\r\n                      nft={item}\r\n                      key={index}\r\n                      index={index}\r\n                      selectStatusInWallet={selectStatusStaked}\r\n                      handleSelectNFTInWallet={handleSelectNFTStaked}\r\n                    />\r\n                  );\r\n                })\r\n              ) : (\r\n                <div className={cx(\"p-1\", \"text-center\", \"text-danger\")}>\r\n                  No NFTs in wallet\r\n                </div>\r\n              )}\r\n            </div>\r\n          ) : (\r\n            <div className={cx(\"table-wrapper\", \"mb-5\")}>\r\n            {nftsStaked && nftsStaked.length ? (\r\n              nftsStaked.map((item, index) => {\r\n                return (\r\n                  <RaijinsStakingCard\r\n                    nft={item}\r\n                    key={index}\r\n                    index={index}\r\n                    selectStatusInWallet={selectStatusStaked}\r\n                    handleSelectNFTInWallet={handleSelectNFTStaked}\r\n                  />\r\n                );\r\n              })\r\n            ) : (\r\n              <div className={cx(\"p-1\", \"text-center\", \"text-danger\")}>\r\n                No staked NFTs\r\n              </div>\r\n            )}\r\n          </div>\r\n          )}\r\n          <div className=\"btn-group\">\r\n            <button\r\n              className={cx(\"select-all-btn\")}\r\n              onClick={handleSelectAllStaked}\r\n            >\r\n              select all\r\n            </button>\r\n            <RoundButton\r\n              key=\"unstake\"\r\n              text=\"unstake\"\r\n              variant=\"transparent\"\r\n              disabled={disabledUnStakeBtn}\r\n              onBtnClick={handleUnStake}\r\n            />\r\n            {/* <RoundButton\r\n              key=\"add_auto_restake\"\r\n              text=\"add auto restake\"\r\n              variant=\"transparent\"\r\n              disabled={disabledAddRestakeBtn}\r\n              onBtnClick={handleAddRestake}\r\n            />\r\n            <RoundButton\r\n              key=\"cancel_auto_restake\"\r\n              text=\"cancel auto restake\"\r\n              variant=\"transparent\"\r\n              disabled={disabledCancelRestakeBtn}\r\n              onBtnClick={handleCancelRestake}\r\n            /> */}\r\n          </div>\r\n        </TabPanel>\r\n      </Tabs>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RaijinsStaking;\r\n","import { useWeb3React } from \"@web3-react/core\";\r\n\r\nimport Layout from \"components/Layout\";\r\nimport Hero from \"components/Staking/Matic/HeroMatic\";\r\nimport RaijinsStaking from \"components/Staking/Matic/RaijinsStakingMatic\";\r\nimport StakingContainer from \"components/Staking/StakingContainer\";\r\nimport StakingDesc from \"components/Staking/StakingDesc\";\r\nimport { useMediaQuery } from \"@uidotdev/usehooks\";\r\n\r\nimport \"./index.scss\";\r\n\r\n// ================================================\r\n\r\nconst StakingM = (props) => {\r\n  const { connectWallet } = props;\r\n\r\n  const { active } = useWeb3React();\r\n  const isMobile = useMediaQuery(\"only screen and (max-width: 640px)\");\r\n\r\n  return (\r\n    <Layout>\r\n      <StakingContainer>\r\n        {!active ? (\r\n          <>\r\n            <Hero connectWallet={connectWallet} />\r\n            <StakingDesc isMobile={isMobile} />\r\n          </>\r\n        ) : (\r\n          <RaijinsStaking isMobile={isMobile} />\r\n        )}\r\n      </StakingContainer>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default StakingM;\r\n"],"names":["_ref","children","classes","_jsx","className","cx","isMobile","approveNFT","setIsApproving","library","tokenAddress","spender","chainId","onApproveSubmitted","pendingTxns","setPendingTxns","includeMessage","ethers","Token","getSigner","setApprovalForAll","then","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","res","txUrl","pendingTxn","wrap","_context","prev","next","getExplorerUrl","hash","helperToast","success","_jsxs","ExternalLink","href","message","concat","_toConsumableArray","stop","_x","apply","arguments","catch","e","_e$data","_e$message","failMsg","console","error","includes","data","finally","props","connectWallet","PageTitle","Description","RoundButton","variant","text","onBtnClick","nft","index","timeTypeInfo","currentTimeType","selectStatusInWallet","handleSelectNFTInWallet","name","id","src","image","alt","width","type","checked","onChange","value","htmlFor","walletNFTSelection","stakedNFTSelection","_userSatus$_claimedRe","_userSatus$_pendingRe2","_useWeb3React","useWeb3React","active","account","_useState","useState","_useState2","_slicedToArray","disabledClaimBtn","setDisabledClaimBtn","_useState3","_useState4","disabledUnStakeBtn","setDisabledUnStakeBtn","_useState5","_useState6","setSelectStatusInWallet","_useState7","_useState8","selectStatusStaked","setSelectStatusStaked","_useState9","_useState10","isApproving","_useState11","_useState12","isWaitingForApproval","setIsWaitingForApproval","_useState13","_useState14","isSubmitting","setIsSubmitting","_useState15","COLLECTION_OPTIONS","selectedCollection","useChainId","stakingRaijinsMaticAddress","getContract","raijinsAddress","nftAddresses","RAIJINS_NFTS","map","item","address","nftBalance","useSWR","fetcher","contractFetcher","Raijins","totalDistributedMatic","StakingRaijinsMatic","userSatus","dataWallet","nftsInWallet","undefined","length","i","toLowerCase","token_address","nftInfo","imageURL","imageHash","VOLUME1_METADATA","Number","token_id","toString","imageType","filter","loadWalletNFTs","dataContract","nftsStaked","tokenId","parseInt","loadStakedNFTs","_address","collectionApprovals","needApproval","filteredCollectionApprovals","isApproval","_useState17","_useState18","disabledStakeBtn","setDisabledStakeBtn","itemInfo","selectedItem","find","push","items","_loop","handleSelectNFTStaked","_loop2","handleUnselectAllInWallet","handleUnselectAllStaked","useEffect","_userSatus$_pendingRe","parseFloat","_pendingReward","SectionTitle","formatAmount","_claimedReward","disabled","contract","callContract","sentMsg","_ref3","_callee2","_context2","_x2","Tabs","TabList","Tab","TabPanel","RaijinsStakingCard","onClick","nftToStake","nftToUnStake","_ref4","_callee3","_context3","_x3","useMediaQuery","Layout","StakingContainer","RaijinsStaking","_Fragment","Hero","StakingDesc"],"sourceRoot":""}